<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_FsmOS_8cpp_source" xml:lang="en-US">
<title>FsmOS.cpp</title>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_FsmOS_8cpp_source_1l00001"/>00001 
<anchor xml:id="_FsmOS_8cpp_source_1l00019"/>00019 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_FsmOS_8h">FsmOS.h</link>&quot;</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00020"/>00020 <emphasis role="preprocessor">#include&#32;&lt;stdarg.h&gt;</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00021"/>00021 <emphasis role="preprocessor">#include&#32;&quot;../../src/BuildMemoryInfo.h&quot;</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00022"/>00022 <emphasis role="preprocessor">#include&#32;&lt;stdio.h&gt;</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00023"/>00023 <emphasis role="preprocessor">#include&#32;&lt;string.h&gt;</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00024"/>00024 <emphasis role="preprocessor">#include&#32;&lt;stdlib.h&gt;</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00025"/>00025 
<anchor xml:id="_FsmOS_8cpp_source_1l00026"/>00026 <emphasis role="preprocessor">#if&#32;defined(__AVR__)</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00027"/>00027 <emphasis role="comment">//&#32;Stream&#32;stdio&#32;directly&#32;to&#32;Serial&#32;to&#32;allow&#32;vfprintf_P&#32;without&#32;intermediate&#32;buffers</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00028"/>00028 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;serial_putc(<emphasis role="keywordtype">char</emphasis>&#32;c,&#32;FILE&#32;*)
<anchor xml:id="_FsmOS_8cpp_source_1l00029"/>00029 {
<anchor xml:id="_FsmOS_8cpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;Serial.write(c);
<anchor xml:id="_FsmOS_8cpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_FsmOS_8cpp_source_1l00032"/>00032 }
<anchor xml:id="_FsmOS_8cpp_source_1l00033"/>00033 <emphasis role="keyword">static</emphasis>&#32;FILE&#32;serial_stdout;
<anchor xml:id="_FsmOS_8cpp_source_1l00034"/>00034 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;init_stdio_to_serial()
<anchor xml:id="_FsmOS_8cpp_source_1l00035"/>00035 {
<anchor xml:id="_FsmOS_8cpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;inited&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l00037"/>00037 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(inited)
<anchor xml:id="_FsmOS_8cpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l00040"/>00040 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;inited&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;fdev_setup_stream(&amp;serial_stdout,&#32;serial_putc,&#32;<emphasis role="keyword">nullptr</emphasis>,&#32;_FDEV_SETUP_WRITE);
<anchor xml:id="_FsmOS_8cpp_source_1l00043"/>00043 &#32;&#32;&#32;&#32;stdout&#32;=&#32;&amp;serial_stdout;
<anchor xml:id="_FsmOS_8cpp_source_1l00044"/>00044 }
<anchor xml:id="_FsmOS_8cpp_source_1l00045"/>00045 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00046"/>00046 
<anchor xml:id="_FsmOS_8cpp_source_1l00047"/>00047 <emphasis role="comment">/*&#32;==================&#32;Global&#32;Variables&#32;==================&#32;*/</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00048"/><link linkend="_group__fsmos_1ga990d37c1e9d0a35fead6ab92e0da955e">00048</link> <link linkend="_classScheduler">Scheduler</link>&#32;<link linkend="_group__fsmos_1ga990d37c1e9d0a35fead6ab92e0da955e">OS</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l00049"/>00049 
<anchor xml:id="_FsmOS_8cpp_source_1l00050"/><link linkend="_FsmOS_8cpp_1a4b161d5fdd35540a17153452e7c6af01">00050</link> <link linkend="_structMemoryStats">MemoryStats</link>&#32;<link linkend="_FsmOS_8cpp_1a4b161d5fdd35540a17153452e7c6af01">fsmos_memory_stats</link>&#32;=&#32;{0,&#32;0,&#32;0,&#32;0};
<anchor xml:id="_FsmOS_8cpp_source_1l00051"/>00051 
<anchor xml:id="_FsmOS_8cpp_source_1l00052"/>00052 <emphasis role="comment">/*&#32;==================&#32;TimerT&#32;Implementation&#32;==================&#32;*/</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00053"/>00053 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_FsmOS_8cpp_source_1l00054"/>00054 <emphasis role="keywordtype">void</emphasis>&#32;TimerT&lt;T&gt;::startTimer(T&#32;d)
<anchor xml:id="_FsmOS_8cpp_source_1l00055"/>00055 {
<anchor xml:id="_FsmOS_8cpp_source_1l00056"/>00056 &#32;&#32;&#32;&#32;startMs&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(<link linkend="_group__fsmos_1ga990d37c1e9d0a35fead6ab92e0da955e">OS</link>.<link linkend="_classScheduler_1afe202befb3d6eac9dbb6acd1a4b09401">now</link>());
<anchor xml:id="_FsmOS_8cpp_source_1l00057"/>00057 &#32;&#32;&#32;&#32;durationMs&#32;=&#32;d;
<anchor xml:id="_FsmOS_8cpp_source_1l00058"/>00058 }
<anchor xml:id="_FsmOS_8cpp_source_1l00059"/>00059 
<anchor xml:id="_FsmOS_8cpp_source_1l00060"/>00060 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_FsmOS_8cpp_source_1l00061"/>00061 <emphasis role="keywordtype">bool</emphasis>&#32;TimerT&lt;T&gt;::isExpired()<emphasis role="keyword">&#32;const</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00062"/>00062 <emphasis role="keyword"></emphasis>{
<anchor xml:id="_FsmOS_8cpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(durationMs&#32;==&#32;0)
<anchor xml:id="_FsmOS_8cpp_source_1l00064"/>00064 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l00066"/>00066 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00067"/>00067 
<anchor xml:id="_FsmOS_8cpp_source_1l00068"/>00068 &#32;&#32;&#32;&#32;T&#32;current_time&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(<link linkend="_group__fsmos_1ga990d37c1e9d0a35fead6ab92e0da955e">OS</link>.<link linkend="_classScheduler_1afe202befb3d6eac9dbb6acd1a4b09401">now</link>());
<anchor xml:id="_FsmOS_8cpp_source_1l00069"/>00069 
<anchor xml:id="_FsmOS_8cpp_source_1l00070"/>00070 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Handle&#32;timer&#32;overflow&#32;correctly&#32;using&#32;safer&#32;arithmetic</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00071"/>00071 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(current_time&#32;&gt;=&#32;startMs)
<anchor xml:id="_FsmOS_8cpp_source_1l00072"/>00072 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;No&#32;overflow&#32;case&#32;-&#32;simple&#32;subtraction</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(current_time&#32;-&#32;startMs)&#32;&gt;=&#32;durationMs;
<anchor xml:id="_FsmOS_8cpp_source_1l00075"/>00075 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00076"/>00076 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00077"/>00077 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Timer&#32;overflow&#32;occurred&#32;-&#32;calculate&#32;elapsed&#32;time&#32;correctly</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;max_value&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>T<emphasis role="keyword">&gt;</emphasis>(~static_cast&lt;T&gt;(0));
<anchor xml:id="_FsmOS_8cpp_source_1l00080"/>00080 
<anchor xml:id="_FsmOS_8cpp_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Calculate&#32;elapsed&#32;time:&#32;time&#32;before&#32;overflow&#32;+&#32;time&#32;after&#32;overflow</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;elapsed_before_overflow&#32;=&#32;max_value&#32;-&#32;startMs&#32;+&#32;1;
<anchor xml:id="_FsmOS_8cpp_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;elapsed_after_overflow&#32;=&#32;current_time;
<anchor xml:id="_FsmOS_8cpp_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;T&#32;total_elapsed&#32;=&#32;elapsed_before_overflow&#32;+&#32;elapsed_after_overflow;
<anchor xml:id="_FsmOS_8cpp_source_1l00085"/>00085 
<anchor xml:id="_FsmOS_8cpp_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;for&#32;overflow&#32;in&#32;the&#32;addition</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(total_elapsed&#32;&lt;&#32;elapsed_before_overflow)
<anchor xml:id="_FsmOS_8cpp_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Addition&#32;overflowed,&#32;timer&#32;definitely&#32;expired</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l00091"/>00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00092"/>00092 
<anchor xml:id="_FsmOS_8cpp_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;total_elapsed&#32;&gt;=&#32;durationMs;
<anchor xml:id="_FsmOS_8cpp_source_1l00094"/>00094 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00095"/>00095 }
<anchor xml:id="_FsmOS_8cpp_source_1l00096"/>00096 
<anchor xml:id="_FsmOS_8cpp_source_1l00097"/>00097 <emphasis role="comment">//&#32;Explicit&#32;template&#32;instantiations&#32;for&#32;common&#32;types</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00098"/>00098 <emphasis role="keyword">template</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>TimerT&lt;uint8_t&gt;;
<anchor xml:id="_FsmOS_8cpp_source_1l00099"/>00099 <emphasis role="keyword">template</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>TimerT&lt;uint16_t&gt;;
<anchor xml:id="_FsmOS_8cpp_source_1l00100"/>00100 <emphasis role="keyword">template</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>TimerT&lt;uint32_t&gt;;
<anchor xml:id="_FsmOS_8cpp_source_1l00101"/>00101 
<anchor xml:id="_FsmOS_8cpp_source_1l00102"/>00102 <emphasis role="comment">/*&#32;==================&#32;SharedMsg&#32;Implementation&#32;==================&#32;*/</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00103"/><link linkend="_classSharedMsg_1a71c37ab34ce77dcdf80c756635b68ff2">00103</link> <link linkend="_classSharedMsg_1a71c37ab34ce77dcdf80c756635b68ff2">SharedMsg::SharedMsg</link>()&#32;:&#32;msgData(nullptr)&#32;{}
<anchor xml:id="_FsmOS_8cpp_source_1l00104"/>00104 
<anchor xml:id="_FsmOS_8cpp_source_1l00105"/><link linkend="_classSharedMsg_1a432ceb0eefbe4e0affadab97f3fd2c36">00105</link> <link linkend="_classSharedMsg_1a71c37ab34ce77dcdf80c756635b68ff2">SharedMsg::SharedMsg</link>(MsgData&#32;*msg)&#32;:&#32;msgData(msg)
<anchor xml:id="_FsmOS_8cpp_source_1l00106"/>00106 {
<anchor xml:id="_FsmOS_8cpp_source_1l00107"/>00107 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classSharedMsg_1a53039c707f1dc8a52c05f33af2cb24ea">msgData</link>)
<anchor xml:id="_FsmOS_8cpp_source_1l00108"/>00108 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_FsmOS_8h_1aaaea265b31dabcfb3098bec7685c39e4">ATOMIC_BLOCK</link>(<link linkend="_FsmOS_8h_1a362c18b15a09703e42e1c246c47420ef">ATOMIC_RESTORESTATE</link>)&#32;{&#32;<link linkend="_classSharedMsg_1a53039c707f1dc8a52c05f33af2cb24ea">msgData</link>-&gt;refCount++;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00110"/>00110 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00111"/>00111 }
<anchor xml:id="_FsmOS_8cpp_source_1l00112"/>00112 
<anchor xml:id="_FsmOS_8cpp_source_1l00113"/><link linkend="_classSharedMsg_1a46d80a6afd7326ea7e692e14d2cbc6b8">00113</link> <link linkend="_classSharedMsg_1a71c37ab34ce77dcdf80c756635b68ff2">SharedMsg::SharedMsg</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classSharedMsg">SharedMsg</link>&#32;&amp;other)&#32;:&#32;msgData(other.msgData)
<anchor xml:id="_FsmOS_8cpp_source_1l00114"/>00114 {
<anchor xml:id="_FsmOS_8cpp_source_1l00115"/>00115 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classSharedMsg_1a53039c707f1dc8a52c05f33af2cb24ea">msgData</link>)
<anchor xml:id="_FsmOS_8cpp_source_1l00116"/>00116 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00117"/>00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_FsmOS_8h_1aaaea265b31dabcfb3098bec7685c39e4">ATOMIC_BLOCK</link>(<link linkend="_FsmOS_8h_1a362c18b15a09703e42e1c246c47420ef">ATOMIC_RESTORESTATE</link>)&#32;{&#32;<link linkend="_classSharedMsg_1a53039c707f1dc8a52c05f33af2cb24ea">msgData</link>-&gt;refCount++;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00118"/>00118 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00119"/>00119 }
<anchor xml:id="_FsmOS_8cpp_source_1l00120"/>00120 
<anchor xml:id="_FsmOS_8cpp_source_1l00121"/><link linkend="_classSharedMsg_1ad7ce8df960b49c88f0d4264c23c93f81">00121</link> <link linkend="_classSharedMsg">SharedMsg</link>&#32;&amp;<link linkend="_classSharedMsg_1ad7ce8df960b49c88f0d4264c23c93f81">SharedMsg::operator=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classSharedMsg">SharedMsg</link>&#32;&amp;other)
<anchor xml:id="_FsmOS_8cpp_source_1l00122"/>00122 {
<anchor xml:id="_FsmOS_8cpp_source_1l00123"/>00123 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">this</emphasis>&#32;!=&#32;&amp;other)
<anchor xml:id="_FsmOS_8cpp_source_1l00124"/>00124 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00125"/>00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Avoid&#32;nested&#32;atomic&#32;blocks&#32;by&#32;doing&#32;the&#32;work&#32;outside&#32;atomic&#32;block</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00126"/>00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;MsgData&#32;*oldData&#32;=&#32;<link linkend="_classSharedMsg_1a53039c707f1dc8a52c05f33af2cb24ea">msgData</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l00127"/>00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;MsgData&#32;*newData&#32;=&#32;other.<link linkend="_classSharedMsg_1a53039c707f1dc8a52c05f33af2cb24ea">msgData</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;MsgData&#32;*toDeallocate&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l00129"/>00129 
<anchor xml:id="_FsmOS_8cpp_source_1l00130"/>00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Single&#32;atomic&#32;block&#32;for&#32;the&#32;entire&#32;operation</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00131"/>00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_FsmOS_8h_1aaaea265b31dabcfb3098bec7685c39e4">ATOMIC_BLOCK</link>(<link linkend="_FsmOS_8h_1a362c18b15a09703e42e1c246c47420ef">ATOMIC_RESTORESTATE</link>)
<anchor xml:id="_FsmOS_8cpp_source_1l00132"/>00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00133"/>00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(newData)
<anchor xml:id="_FsmOS_8cpp_source_1l00134"/>00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00135"/>00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;newData-&gt;refCount++;
<anchor xml:id="_FsmOS_8cpp_source_1l00136"/>00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00137"/>00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classSharedMsg_1a53039c707f1dc8a52c05f33af2cb24ea">msgData</link>&#32;=&#32;newData;
<anchor xml:id="_FsmOS_8cpp_source_1l00138"/>00138 
<anchor xml:id="_FsmOS_8cpp_source_1l00139"/>00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(oldData)
<anchor xml:id="_FsmOS_8cpp_source_1l00140"/>00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00141"/>00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oldData-&gt;refCount--;
<anchor xml:id="_FsmOS_8cpp_source_1l00142"/>00142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(oldData-&gt;refCount&#32;==&#32;0)
<anchor xml:id="_FsmOS_8cpp_source_1l00143"/>00143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00144"/>00144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toDeallocate&#32;=&#32;oldData;
<anchor xml:id="_FsmOS_8cpp_source_1l00145"/>00145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00146"/>00146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00147"/>00147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00148"/>00148 
<anchor xml:id="_FsmOS_8cpp_source_1l00149"/>00149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Deallocate&#32;outside&#32;atomic&#32;block&#32;if&#32;needed</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00150"/>00150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(toDeallocate)
<anchor xml:id="_FsmOS_8cpp_source_1l00151"/>00151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00152"/>00152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__fsmos_1ga990d37c1e9d0a35fead6ab92e0da955e">OS</link>.<link linkend="_classScheduler_1a4025d35f57b05649764c44f3583fc2b6">msgPool</link>.<link linkend="_classMsgDataPool_1a9b78a83be33a8a2a938f576eee7a98ee">deallocate</link>(toDeallocate);
<anchor xml:id="_FsmOS_8cpp_source_1l00153"/>00153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00154"/>00154 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00155"/>00155 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l00156"/>00156 }
<anchor xml:id="_FsmOS_8cpp_source_1l00157"/>00157 
<anchor xml:id="_FsmOS_8cpp_source_1l00158"/><link linkend="_classSharedMsg_1a1819d3340c3fa3d00950eb087cd97131">00158</link> <link linkend="_classSharedMsg_1a1819d3340c3fa3d00950eb087cd97131">SharedMsg::~SharedMsg</link>()
<anchor xml:id="_FsmOS_8cpp_source_1l00159"/>00159 {
<anchor xml:id="_FsmOS_8cpp_source_1l00160"/>00160 &#32;&#32;&#32;&#32;<link linkend="_FsmOS_8h_1aaaea265b31dabcfb3098bec7685c39e4">ATOMIC_BLOCK</link>(<link linkend="_FsmOS_8h_1a362c18b15a09703e42e1c246c47420ef">ATOMIC_RESTORESTATE</link>)&#32;{&#32;<link linkend="_classSharedMsg_1a458f5ccc07be87e716ef117e2eb0bce9">release</link>();&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00161"/>00161 }
<anchor xml:id="_FsmOS_8cpp_source_1l00162"/>00162 
<anchor xml:id="_FsmOS_8cpp_source_1l00163"/><link linkend="_classSharedMsg_1a458f5ccc07be87e716ef117e2eb0bce9">00163</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classSharedMsg_1a458f5ccc07be87e716ef117e2eb0bce9">SharedMsg::release</link>()
<anchor xml:id="_FsmOS_8cpp_source_1l00164"/>00164 {
<anchor xml:id="_FsmOS_8cpp_source_1l00165"/>00165 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classSharedMsg_1a53039c707f1dc8a52c05f33af2cb24ea">msgData</link>)
<anchor xml:id="_FsmOS_8cpp_source_1l00166"/>00166 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00167"/>00167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classSharedMsg_1a53039c707f1dc8a52c05f33af2cb24ea">msgData</link>-&gt;refCount--;
<anchor xml:id="_FsmOS_8cpp_source_1l00168"/>00168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classSharedMsg_1a53039c707f1dc8a52c05f33af2cb24ea">msgData</link>-&gt;refCount&#32;==&#32;0)
<anchor xml:id="_FsmOS_8cpp_source_1l00169"/>00169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00170"/>00170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__fsmos_1ga990d37c1e9d0a35fead6ab92e0da955e">OS</link>.<link linkend="_classScheduler_1a4025d35f57b05649764c44f3583fc2b6">msgPool</link>.<link linkend="_classMsgDataPool_1a9b78a83be33a8a2a938f576eee7a98ee">deallocate</link>(<link linkend="_classSharedMsg_1a53039c707f1dc8a52c05f33af2cb24ea">msgData</link>);
<anchor xml:id="_FsmOS_8cpp_source_1l00171"/>00171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00172"/>00172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classSharedMsg_1a53039c707f1dc8a52c05f33af2cb24ea">msgData</link>&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l00173"/>00173 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00174"/>00174 }
<anchor xml:id="_FsmOS_8cpp_source_1l00175"/>00175 
<anchor xml:id="_FsmOS_8cpp_source_1l00176"/><link linkend="_classSharedMsg_1aa20f39d8440882aa6260e5802833e67e">00176</link> MsgData&#32;*<link linkend="_classSharedMsg_1aa20f39d8440882aa6260e5802833e67e">SharedMsg::getData</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classSharedMsg_1a53039c707f1dc8a52c05f33af2cb24ea">msgData</link>;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00177"/>00177 
<anchor xml:id="_FsmOS_8cpp_source_1l00178"/><link linkend="_classSharedMsg_1ae7a947149acda480996050de99ee1b88">00178</link> MsgData&#32;*<link linkend="_classSharedMsg_1ae7a947149acda480996050de99ee1b88">SharedMsg::operator-&gt;</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classSharedMsg_1a53039c707f1dc8a52c05f33af2cb24ea">msgData</link>;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00179"/>00179 
<anchor xml:id="_FsmOS_8cpp_source_1l00180"/><link linkend="_classSharedMsg_1aaba8448183f8a5204bd8bc887c7b4ec3">00180</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classSharedMsg_1aaba8448183f8a5204bd8bc887c7b4ec3">SharedMsg::isValid</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classSharedMsg_1a53039c707f1dc8a52c05f33af2cb24ea">msgData</link>&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00181"/>00181 
<anchor xml:id="_FsmOS_8cpp_source_1l00182"/>00182 <emphasis role="comment">/*&#32;==================&#32;MsgDataPool&#32;Implementation&#32;==================&#32;*/</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00183"/><link linkend="_classMsgDataPool_1a72b29d6cb8320d81b5b0d7304cf5dce2">00183</link> <link linkend="_classMsgDataPool_1a72b29d6cb8320d81b5b0d7304cf5dce2">MsgDataPool::MsgDataPool</link>()
<anchor xml:id="_FsmOS_8cpp_source_1l00184"/>00184 &#32;&#32;&#32;&#32;:&#32;pool(nullptr),&#32;poolSize(0),&#32;poolLimit(<link linkend="_FsmOS_8h_1addd900ed12192f9ff21848d61476d5f2">MAX_MESSAGE_POOL_SIZE</link>),&#32;currentInUse(0),&#32;nextFree(0)
<anchor xml:id="_FsmOS_8cpp_source_1l00185"/>00185 {
<anchor xml:id="_FsmOS_8cpp_source_1l00186"/>00186 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Don&apos;t&#32;allocate&#32;memory&#32;during&#32;static&#32;initialization</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00187"/>00187 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Memory&#32;will&#32;be&#32;allocated&#32;lazily&#32;when&#32;first&#32;needed</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00188"/>00188 }
<anchor xml:id="_FsmOS_8cpp_source_1l00189"/>00189 
<anchor xml:id="_FsmOS_8cpp_source_1l00190"/><link linkend="_classMsgDataPool_1af2acf581af3a23b651a8985191415f4b">00190</link> <link linkend="_classMsgDataPool_1af2acf581af3a23b651a8985191415f4b">MsgDataPool::~MsgDataPool</link>()
<anchor xml:id="_FsmOS_8cpp_source_1l00191"/>00191 {
<anchor xml:id="_FsmOS_8cpp_source_1l00192"/>00192 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classMsgDataPool_1af8a8bed0618d0d7acccaf8f6c5256851">pool</link>)
<anchor xml:id="_FsmOS_8cpp_source_1l00193"/>00193 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00194"/>00194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>[]&#32;<link linkend="_classMsgDataPool_1af8a8bed0618d0d7acccaf8f6c5256851">pool</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l00195"/>00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classMsgDataPool_1af8a8bed0618d0d7acccaf8f6c5256851">pool</link>&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l00196"/>00196 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00197"/>00197 }
<anchor xml:id="_FsmOS_8cpp_source_1l00198"/>00198 
<anchor xml:id="_FsmOS_8cpp_source_1l00199"/><link linkend="_classMsgDataPool_1a5249e1c96225998fac71ba67c691740d">00199</link> MsgData&#32;*<link linkend="_classMsgDataPool_1a5249e1c96225998fac71ba67c691740d">MsgDataPool::allocate</link>()
<anchor xml:id="_FsmOS_8cpp_source_1l00200"/>00200 {
<anchor xml:id="_FsmOS_8cpp_source_1l00201"/>00201 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Lazy&#32;initialization&#32;-&#32;allocate&#32;pool&#32;if&#32;not&#32;already&#32;done</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00202"/>00202 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_classMsgDataPool_1af8a8bed0618d0d7acccaf8f6c5256851">pool</link>&#32;&amp;&amp;&#32;!<link linkend="_classMsgDataPool_1aed7f37c999de507b0441f863a4942f2a">initialize</link>())
<anchor xml:id="_FsmOS_8cpp_source_1l00203"/>00203 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00204"/>00204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_FsmOS_8cpp_1a4b161d5fdd35540a17153452e7c6af01">fsmos_memory_stats</link>.<link linkend="_structMemoryStats_1ad400667b2264e48d954b2feee8833f4a">total_allocated</link>&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(MsgData)&#32;*&#32;<link linkend="_classMsgDataPool_1a25c6c977b1a8a1682d63b4d5e0281ee2">poolLimit</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l00205"/>00205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l00206"/>00206 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00207"/>00207 
<anchor xml:id="_FsmOS_8cpp_source_1l00208"/>00208 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classMsgDataPool_1a0a148d6bfd58376877a0529f217ed33c">currentInUse</link>&#32;&gt;=&#32;<link linkend="_classMsgDataPool_1aca5724c9ea65b870035798e3cca1149d">poolSize</link>)
<anchor xml:id="_FsmOS_8cpp_source_1l00209"/>00209 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00210"/>00210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l00211"/>00211 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00212"/>00212 
<anchor xml:id="_FsmOS_8cpp_source_1l00213"/>00213 &#32;&#32;&#32;&#32;MsgData&#32;*msg&#32;=&#32;&amp;<link linkend="_classMsgDataPool_1af8a8bed0618d0d7acccaf8f6c5256851">pool</link>[<link linkend="_classMsgDataPool_1a371ad52b35bd9e2e397abf1dabacc24e">nextFree</link>];
<anchor xml:id="_FsmOS_8cpp_source_1l00214"/>00214 
<anchor xml:id="_FsmOS_8cpp_source_1l00215"/>00215 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Reset&#32;message&#32;to&#32;initial&#32;state</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00216"/>00216 &#32;&#32;&#32;&#32;msg-&gt;refCount&#32;=&#32;0;
<anchor xml:id="_FsmOS_8cpp_source_1l00217"/>00217 &#32;&#32;&#32;&#32;msg-&gt;type&#32;=&#32;0;
<anchor xml:id="_FsmOS_8cpp_source_1l00218"/>00218 &#32;&#32;&#32;&#32;msg-&gt;topic&#32;=&#32;0;
<anchor xml:id="_FsmOS_8cpp_source_1l00219"/>00219 &#32;&#32;&#32;&#32;msg-&gt;arg&#32;=&#32;0;
<anchor xml:id="_FsmOS_8cpp_source_1l00220"/>00220 
<anchor xml:id="_FsmOS_8cpp_source_1l00221"/>00221 &#32;&#32;&#32;&#32;<link linkend="_classMsgDataPool_1a0a148d6bfd58376877a0529f217ed33c">currentInUse</link>++;
<anchor xml:id="_FsmOS_8cpp_source_1l00222"/>00222 &#32;&#32;&#32;&#32;<link linkend="_classMsgDataPool_1a371ad52b35bd9e2e397abf1dabacc24e">nextFree</link>&#32;=&#32;(<link linkend="_classMsgDataPool_1a371ad52b35bd9e2e397abf1dabacc24e">nextFree</link>&#32;+&#32;1)&#32;%&#32;<link linkend="_classMsgDataPool_1aca5724c9ea65b870035798e3cca1149d">poolSize</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l00223"/>00223 
<anchor xml:id="_FsmOS_8cpp_source_1l00224"/>00224 &#32;&#32;&#32;&#32;<link linkend="_FsmOS_8cpp_1a4b161d5fdd35540a17153452e7c6af01">fsmos_memory_stats</link>.<link linkend="_structMemoryStats_1a66c3d8d757e4fcd55403c904fa4cb0d5">current_usage</link>&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(MsgData);
<anchor xml:id="_FsmOS_8cpp_source_1l00225"/>00225 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_FsmOS_8cpp_1a4b161d5fdd35540a17153452e7c6af01">fsmos_memory_stats</link>.<link linkend="_structMemoryStats_1a66c3d8d757e4fcd55403c904fa4cb0d5">current_usage</link>&#32;&gt;&#32;<link linkend="_FsmOS_8cpp_1a4b161d5fdd35540a17153452e7c6af01">fsmos_memory_stats</link>.<link linkend="_structMemoryStats_1ab27f5b00f150919cd24828e4f3136357">peak_usage</link>)
<anchor xml:id="_FsmOS_8cpp_source_1l00226"/>00226 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00227"/>00227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_FsmOS_8cpp_1a4b161d5fdd35540a17153452e7c6af01">fsmos_memory_stats</link>.<link linkend="_structMemoryStats_1ab27f5b00f150919cd24828e4f3136357">peak_usage</link>&#32;=&#32;<link linkend="_FsmOS_8cpp_1a4b161d5fdd35540a17153452e7c6af01">fsmos_memory_stats</link>.<link linkend="_structMemoryStats_1a66c3d8d757e4fcd55403c904fa4cb0d5">current_usage</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l00228"/>00228 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00229"/>00229 
<anchor xml:id="_FsmOS_8cpp_source_1l00230"/>00230 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Update&#32;adaptive&#32;limit&#32;based&#32;on&#32;usage</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00231"/>00231 &#32;&#32;&#32;&#32;<link linkend="_classMsgDataPool_1aec9292e845c522cd14c90764b8bfc054">updateAdaptiveLimit</link>();
<anchor xml:id="_FsmOS_8cpp_source_1l00232"/>00232 
<anchor xml:id="_FsmOS_8cpp_source_1l00233"/>00233 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;msg;
<anchor xml:id="_FsmOS_8cpp_source_1l00234"/>00234 }
<anchor xml:id="_FsmOS_8cpp_source_1l00235"/>00235 
<anchor xml:id="_FsmOS_8cpp_source_1l00236"/><link linkend="_classMsgDataPool_1a9b78a83be33a8a2a938f576eee7a98ee">00236</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classMsgDataPool_1a9b78a83be33a8a2a938f576eee7a98ee">MsgDataPool::deallocate</link>(MsgData&#32;*msg)
<anchor xml:id="_FsmOS_8cpp_source_1l00237"/>00237 {
<anchor xml:id="_FsmOS_8cpp_source_1l00238"/>00238 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!msg&#32;||&#32;!<link linkend="_classMsgDataPool_1af8a8bed0618d0d7acccaf8f6c5256851">pool</link>)
<anchor xml:id="_FsmOS_8cpp_source_1l00239"/>00239 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00240"/>00240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l00241"/>00241 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00242"/>00242 
<anchor xml:id="_FsmOS_8cpp_source_1l00243"/>00243 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Reset&#32;message&#32;to&#32;initial&#32;state</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00244"/>00244 &#32;&#32;&#32;&#32;msg-&gt;refCount&#32;=&#32;0;
<anchor xml:id="_FsmOS_8cpp_source_1l00245"/>00245 &#32;&#32;&#32;&#32;msg-&gt;type&#32;=&#32;0;
<anchor xml:id="_FsmOS_8cpp_source_1l00246"/>00246 &#32;&#32;&#32;&#32;msg-&gt;topic&#32;=&#32;0;
<anchor xml:id="_FsmOS_8cpp_source_1l00247"/>00247 &#32;&#32;&#32;&#32;msg-&gt;arg&#32;=&#32;0;
<anchor xml:id="_FsmOS_8cpp_source_1l00248"/>00248 
<anchor xml:id="_FsmOS_8cpp_source_1l00249"/>00249 &#32;&#32;&#32;&#32;<link linkend="_classMsgDataPool_1a0a148d6bfd58376877a0529f217ed33c">currentInUse</link>--;
<anchor xml:id="_FsmOS_8cpp_source_1l00250"/>00250 
<anchor xml:id="_FsmOS_8cpp_source_1l00251"/>00251 &#32;&#32;&#32;&#32;<link linkend="_FsmOS_8cpp_1a4b161d5fdd35540a17153452e7c6af01">fsmos_memory_stats</link>.<link linkend="_structMemoryStats_1a66c3d8d757e4fcd55403c904fa4cb0d5">current_usage</link>&#32;-=&#32;<emphasis role="keyword">sizeof</emphasis>(MsgData);
<anchor xml:id="_FsmOS_8cpp_source_1l00252"/>00252 &#32;&#32;&#32;&#32;<link linkend="_FsmOS_8cpp_1a4b161d5fdd35540a17153452e7c6af01">fsmos_memory_stats</link>.<link linkend="_structMemoryStats_1aaefab979deb1c98218e9267d198de4fe">total_freed</link>&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(MsgData);
<anchor xml:id="_FsmOS_8cpp_source_1l00253"/>00253 
<anchor xml:id="_FsmOS_8cpp_source_1l00254"/>00254 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Update&#32;adaptive&#32;limit&#32;based&#32;on&#32;usage</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00255"/>00255 &#32;&#32;&#32;&#32;<link linkend="_classMsgDataPool_1aec9292e845c522cd14c90764b8bfc054">updateAdaptiveLimit</link>();
<anchor xml:id="_FsmOS_8cpp_source_1l00256"/>00256 }
<anchor xml:id="_FsmOS_8cpp_source_1l00257"/>00257 
<anchor xml:id="_FsmOS_8cpp_source_1l00258"/><link linkend="_classMsgDataPool_1aec9292e845c522cd14c90764b8bfc054">00258</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classMsgDataPool_1aec9292e845c522cd14c90764b8bfc054">MsgDataPool::updateAdaptiveLimit</link>()
<anchor xml:id="_FsmOS_8cpp_source_1l00259"/>00259 {
<anchor xml:id="_FsmOS_8cpp_source_1l00260"/>00260 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Simple&#32;adaptive&#32;algorithm:&#32;increase&#32;limit&#32;if&#32;we&apos;re&#32;using&#32;most&#32;of&#32;it</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00261"/>00261 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classMsgDataPool_1a0a148d6bfd58376877a0529f217ed33c">currentInUse</link>&#32;&gt;&#32;(<link linkend="_classMsgDataPool_1aca5724c9ea65b870035798e3cca1149d">poolSize</link>&#32;*&#32;3)&#32;/&#32;4&#32;&amp;&amp;&#32;<link linkend="_classMsgDataPool_1aca5724c9ea65b870035798e3cca1149d">poolSize</link>&#32;&lt;&#32;<link linkend="_classMsgDataPool_1a25c6c977b1a8a1682d63b4d5e0281ee2">poolLimit</link>)
<anchor xml:id="_FsmOS_8cpp_source_1l00262"/>00262 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00263"/>00263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classMsgDataPool_1aca5724c9ea65b870035798e3cca1149d">poolSize</link>++;
<anchor xml:id="_FsmOS_8cpp_source_1l00264"/>00264 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00265"/>00265 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Decrease&#32;limit&#32;if&#32;we&apos;re&#32;using&#32;very&#32;little</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00266"/>00266 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classMsgDataPool_1a0a148d6bfd58376877a0529f217ed33c">currentInUse &lt; poolSize / 4 &amp;&amp; poolSize &gt;</link>&#32;4)
<anchor xml:id="_FsmOS_8cpp_source_1l00267"/>00267 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00268"/>00268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classMsgDataPool_1aca5724c9ea65b870035798e3cca1149d">poolSize</link>--;
<anchor xml:id="_FsmOS_8cpp_source_1l00269"/>00269 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00270"/>00270 }
<anchor xml:id="_FsmOS_8cpp_source_1l00271"/>00271 
<anchor xml:id="_FsmOS_8cpp_source_1l00272"/><link linkend="_classMsgDataPool_1a8d57ebaaeb9f6907fd2a6844d8611a68">00272</link> uint8_t&#32;<link linkend="_classMsgDataPool_1a8d57ebaaeb9f6907fd2a6844d8611a68">MsgDataPool::getPoolSize</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classMsgDataPool_1aca5724c9ea65b870035798e3cca1149d">poolSize</link>;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00273"/>00273 
<anchor xml:id="_FsmOS_8cpp_source_1l00274"/><link linkend="_classMsgDataPool_1a78472476fea071173c12900e76bb5525">00274</link> uint8_t&#32;<link linkend="_classMsgDataPool_1a78472476fea071173c12900e76bb5525">MsgDataPool::getPoolLimit</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classMsgDataPool_1a25c6c977b1a8a1682d63b4d5e0281ee2">poolLimit</link>;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00275"/>00275 
<anchor xml:id="_FsmOS_8cpp_source_1l00276"/><link linkend="_classMsgDataPool_1ab68fab96e5ad24d2879c0c852391d25e">00276</link> uint8_t&#32;<link linkend="_classMsgDataPool_1ab68fab96e5ad24d2879c0c852391d25e">MsgDataPool::getCurrentInUse</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classMsgDataPool_1a0a148d6bfd58376877a0529f217ed33c">currentInUse</link>;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00277"/>00277 
<anchor xml:id="_FsmOS_8cpp_source_1l00278"/><link linkend="_classMsgDataPool_1aed7f37c999de507b0441f863a4942f2a">00278</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classMsgDataPool_1aed7f37c999de507b0441f863a4942f2a">MsgDataPool::initialize</link>()
<anchor xml:id="_FsmOS_8cpp_source_1l00279"/>00279 {
<anchor xml:id="_FsmOS_8cpp_source_1l00280"/>00280 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;already&#32;initialized,&#32;return&#32;true</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00281"/>00281 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classMsgDataPool_1af8a8bed0618d0d7acccaf8f6c5256851">pool</link>&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>)
<anchor xml:id="_FsmOS_8cpp_source_1l00282"/>00282 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00283"/>00283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l00284"/>00284 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00285"/>00285 
<anchor xml:id="_FsmOS_8cpp_source_1l00286"/>00286 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Try&#32;to&#32;allocate&#32;memory</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00287"/>00287 &#32;&#32;&#32;&#32;<link linkend="_classMsgDataPool_1af8a8bed0618d0d7acccaf8f6c5256851">pool</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_classMsgDataPool_1a0a148d6bfd58376877a0529f217ed33c">MsgData</link>[<link linkend="_classMsgDataPool_1a25c6c977b1a8a1682d63b4d5e0281ee2">poolLimit</link>];
<anchor xml:id="_FsmOS_8cpp_source_1l00288"/>00288 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classMsgDataPool_1af8a8bed0618d0d7acccaf8f6c5256851">pool</link>)
<anchor xml:id="_FsmOS_8cpp_source_1l00289"/>00289 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00290"/>00290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classMsgDataPool_1aca5724c9ea65b870035798e3cca1149d">poolSize</link>&#32;=&#32;<link linkend="_classMsgDataPool_1a25c6c977b1a8a1682d63b4d5e0281ee2">poolLimit</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l00291"/>00291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Initialize&#32;all&#32;messages&#32;as&#32;free</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00292"/>00292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_classMsgDataPool_1a0a148d6bfd58376877a0529f217ed33c">uint8_t</link>&#32;<link linkend="_classMsgDataPool_1a0a148d6bfd58376877a0529f217ed33c">i</link>&#32;=&#32;0;&#32;<link linkend="_classMsgDataPool_1a0a148d6bfd58376877a0529f217ed33c">i</link>&#32;&lt;&#32;<link linkend="_classMsgDataPool_1aca5724c9ea65b870035798e3cca1149d">poolSize</link>;&#32;<link linkend="_classMsgDataPool_1a0a148d6bfd58376877a0529f217ed33c">i</link>++)
<anchor xml:id="_FsmOS_8cpp_source_1l00293"/>00293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00294"/>00294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classMsgDataPool_1af8a8bed0618d0d7acccaf8f6c5256851">pool</link>[<link linkend="_classMsgDataPool_1a0a148d6bfd58376877a0529f217ed33c">i</link>].refCount&#32;=&#32;0;
<anchor xml:id="_FsmOS_8cpp_source_1l00295"/>00295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classMsgDataPool_1af8a8bed0618d0d7acccaf8f6c5256851">pool</link>[<link linkend="_classMsgDataPool_1a0a148d6bfd58376877a0529f217ed33c">i</link>].type&#32;=&#32;0;
<anchor xml:id="_FsmOS_8cpp_source_1l00296"/>00296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classMsgDataPool_1af8a8bed0618d0d7acccaf8f6c5256851">pool</link>[<link linkend="_classMsgDataPool_1a0a148d6bfd58376877a0529f217ed33c">i</link>].topic&#32;=&#32;0;
<anchor xml:id="_FsmOS_8cpp_source_1l00297"/>00297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classMsgDataPool_1af8a8bed0618d0d7acccaf8f6c5256851">pool</link>[<link linkend="_classMsgDataPool_1a0a148d6bfd58376877a0529f217ed33c">i</link>].arg&#32;=&#32;0;
<anchor xml:id="_FsmOS_8cpp_source_1l00298"/>00298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00299"/>00299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_FsmOS_8cpp_1a4b161d5fdd35540a17153452e7c6af01">fsmos_memory_stats</link>.<link linkend="_structMemoryStats_1ad400667b2264e48d954b2feee8833f4a">total_allocated</link>&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_classMsgDataPool_1a0a148d6bfd58376877a0529f217ed33c">MsgData</link>)&#32;*&#32;<link linkend="_classMsgDataPool_1a25c6c977b1a8a1682d63b4d5e0281ee2">poolLimit</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l00300"/>00300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l00301"/>00301 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00302"/>00302 
<anchor xml:id="_FsmOS_8cpp_source_1l00303"/>00303 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Log&#32;error&#32;if&#32;memory&#32;allocation&#32;fails</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00304"/>00304 &#32;&#32;&#32;&#32;<link linkend="_group__fsmos_1ga990d37c1e9d0a35fead6ab92e0da955e">OS</link>.<link linkend="_classScheduler_1acaab28b4949d5a175212d134c04cf406">logMessage</link>(<emphasis role="keyword">nullptr</emphasis>,&#32;<link linkend="_classScheduler_1ab2bd6aa333e3f108343fedb022eaca79aa56e45ee8b2ce204989dcede4bfa7805">Scheduler::LOG_ERROR</link>,&#32;<link linkend="_classMsgDataPool_1a0a148d6bfd58376877a0529f217ed33c">F</link>(<emphasis role="stringliteral">&quot;Msg&#32;pool&#32;alloc&#32;failed&quot;</emphasis>));
<anchor xml:id="_FsmOS_8cpp_source_1l00305"/>00305 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l00306"/>00306 }
<anchor xml:id="_FsmOS_8cpp_source_1l00307"/>00307 
<anchor xml:id="_FsmOS_8cpp_source_1l00308"/>00308 <emphasis role="comment">/*&#32;==================&#32;LinkedQueue&#32;Implementation&#32;==================&#32;*/</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00309"/>00309 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_FsmOS_8cpp_source_1l00310"/><link linkend="_classLinkedQueue_1a4983be0b269558e5bb0f93d2ce084345">00310</link> <link linkend="_classLinkedQueue_1a4983be0b269558e5bb0f93d2ce084345">LinkedQueue&lt;T&gt;::LinkedQueue</link>()&#32;:&#32;head(nullptr),&#32;tail(nullptr),&#32;count(0)&#32;{}
<anchor xml:id="_FsmOS_8cpp_source_1l00311"/>00311 
<anchor xml:id="_FsmOS_8cpp_source_1l00312"/>00312 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_FsmOS_8cpp_source_1l00313"/><link linkend="_classLinkedQueue_1ad84250d452864b16e000f4d1ee6295f6">00313</link> <link linkend="_classLinkedQueue_1ad84250d452864b16e000f4d1ee6295f6">LinkedQueue&lt;T&gt;::~LinkedQueue</link>()
<anchor xml:id="_FsmOS_8cpp_source_1l00314"/>00314 {
<anchor xml:id="_FsmOS_8cpp_source_1l00315"/>00315 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(head)
<anchor xml:id="_FsmOS_8cpp_source_1l00316"/>00316 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00317"/>00317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structLinkedQueue_1_1Node">Node</link>&#32;*temp&#32;=&#32;head;
<anchor xml:id="_FsmOS_8cpp_source_1l00318"/>00318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;head&#32;=&#32;head-&gt;<link linkend="_structLinkedQueue_1_1Node_1a105896e21861dcb1bb7bcb5af3e5c9b2">next</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l00319"/>00319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;temp;
<anchor xml:id="_FsmOS_8cpp_source_1l00320"/>00320 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00321"/>00321 }
<anchor xml:id="_FsmOS_8cpp_source_1l00322"/>00322 
<anchor xml:id="_FsmOS_8cpp_source_1l00323"/>00323 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_FsmOS_8cpp_source_1l00324"/><link linkend="_classLinkedQueue_1a8c5a6ea35be6ffaf35f76098e8bc89f9">00324</link> <link linkend="_classLinkedQueue_1a4983be0b269558e5bb0f93d2ce084345">LinkedQueue&lt;T&gt;::LinkedQueue</link>(<link linkend="_classLinkedQueue">LinkedQueue</link>&#32;&amp;&amp;other)&#32;noexcept&#32;:&#32;head(other.head),&#32;tail(other.tail),&#32;count(other.count)
<anchor xml:id="_FsmOS_8cpp_source_1l00325"/>00325 {
<anchor xml:id="_FsmOS_8cpp_source_1l00326"/>00326 &#32;&#32;&#32;&#32;other.head&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l00327"/>00327 &#32;&#32;&#32;&#32;other.tail&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l00328"/>00328 &#32;&#32;&#32;&#32;other.count&#32;=&#32;0;
<anchor xml:id="_FsmOS_8cpp_source_1l00329"/>00329 }
<anchor xml:id="_FsmOS_8cpp_source_1l00330"/>00330 
<anchor xml:id="_FsmOS_8cpp_source_1l00331"/>00331 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_FsmOS_8cpp_source_1l00332"/><link linkend="_classLinkedQueue_1ab2bb64be832ea8f62e76dc7fcbe1e9fb">00332</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classLinkedQueue_1ab2bb64be832ea8f62e76dc7fcbe1e9fb">LinkedQueue&lt;T&gt;::push</link>(<emphasis role="keyword">const</emphasis>&#32;T&#32;&amp;item)
<anchor xml:id="_FsmOS_8cpp_source_1l00333"/>00333 {
<anchor xml:id="_FsmOS_8cpp_source_1l00334"/>00334 &#32;&#32;&#32;&#32;<link linkend="_structLinkedQueue_1_1Node">Node</link>&#32;*new_node&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_structLinkedQueue_1_1Node">Node</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l00335"/>00335 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!new_node)
<anchor xml:id="_FsmOS_8cpp_source_1l00336"/>00336 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00337"/>00337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Memory&#32;allocation&#32;failed</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00338"/>00338 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00339"/>00339 
<anchor xml:id="_FsmOS_8cpp_source_1l00340"/>00340 &#32;&#32;&#32;&#32;new_node-&gt;<link linkend="_structLinkedQueue_1_1Node_1abfc1309426317b5ec46b96ad93fa3615">data</link>&#32;=&#32;item;
<anchor xml:id="_FsmOS_8cpp_source_1l00341"/>00341 &#32;&#32;&#32;&#32;new_node-&gt;<link linkend="_structLinkedQueue_1_1Node_1a105896e21861dcb1bb7bcb5af3e5c9b2">next</link>&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l00342"/>00342 
<anchor xml:id="_FsmOS_8cpp_source_1l00343"/>00343 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(tail)
<anchor xml:id="_FsmOS_8cpp_source_1l00344"/>00344 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00345"/>00345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tail-&gt;<link linkend="_structLinkedQueue_1_1Node_1a105896e21861dcb1bb7bcb5af3e5c9b2">next</link>&#32;=&#32;new_node;
<anchor xml:id="_FsmOS_8cpp_source_1l00346"/>00346 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00347"/>00347 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00348"/>00348 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00349"/>00349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;head&#32;=&#32;new_node;
<anchor xml:id="_FsmOS_8cpp_source_1l00350"/>00350 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00351"/>00351 &#32;&#32;&#32;&#32;tail&#32;=&#32;new_node;
<anchor xml:id="_FsmOS_8cpp_source_1l00352"/>00352 &#32;&#32;&#32;&#32;count++;
<anchor xml:id="_FsmOS_8cpp_source_1l00353"/>00353 }
<anchor xml:id="_FsmOS_8cpp_source_1l00354"/>00354 
<anchor xml:id="_FsmOS_8cpp_source_1l00355"/>00355 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_FsmOS_8cpp_source_1l00356"/><link linkend="_classLinkedQueue_1ae54fefdc687852e0465e414bbfadd138">00356</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classLinkedQueue_1ae54fefdc687852e0465e414bbfadd138">LinkedQueue&lt;T&gt;::pop</link>(T&#32;&amp;item)
<anchor xml:id="_FsmOS_8cpp_source_1l00357"/>00357 {
<anchor xml:id="_FsmOS_8cpp_source_1l00358"/>00358 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!head)
<anchor xml:id="_FsmOS_8cpp_source_1l00359"/>00359 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00360"/>00360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l00361"/>00361 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00362"/>00362 
<anchor xml:id="_FsmOS_8cpp_source_1l00363"/>00363 &#32;&#32;&#32;&#32;<link linkend="_structLinkedQueue_1_1Node">Node</link>&#32;*temp&#32;=&#32;head;
<anchor xml:id="_FsmOS_8cpp_source_1l00364"/>00364 &#32;&#32;&#32;&#32;item&#32;=&#32;temp-&gt;<link linkend="_structLinkedQueue_1_1Node_1abfc1309426317b5ec46b96ad93fa3615">data</link>;&#32;&#32;<emphasis role="comment">//&#32;This&#32;properly&#32;handles&#32;SharedMsg&#32;reference&#32;counting</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00365"/>00365 &#32;&#32;&#32;&#32;head&#32;=&#32;head-&gt;next;
<anchor xml:id="_FsmOS_8cpp_source_1l00366"/>00366 
<anchor xml:id="_FsmOS_8cpp_source_1l00367"/>00367 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!head)
<anchor xml:id="_FsmOS_8cpp_source_1l00368"/>00368 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00369"/>00369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tail&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l00370"/>00370 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00371"/>00371 
<anchor xml:id="_FsmOS_8cpp_source_1l00372"/>00372 &#32;&#32;&#32;&#32;<emphasis role="keyword">delete</emphasis>&#32;temp;
<anchor xml:id="_FsmOS_8cpp_source_1l00373"/>00373 &#32;&#32;&#32;&#32;count--;
<anchor xml:id="_FsmOS_8cpp_source_1l00374"/>00374 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l00375"/>00375 }
<anchor xml:id="_FsmOS_8cpp_source_1l00376"/>00376 
<anchor xml:id="_FsmOS_8cpp_source_1l00377"/>00377 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_FsmOS_8cpp_source_1l00378"/><link linkend="_classLinkedQueue_1af4554d6d9ca422c9332217fbbe054c06">00378</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classLinkedQueue_1af4554d6d9ca422c9332217fbbe054c06">LinkedQueue&lt;T&gt;::isEmpty</link>()<emphasis role="keyword">&#32;const</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00379"/>00379 <emphasis role="keyword"></emphasis>{
<anchor xml:id="_FsmOS_8cpp_source_1l00380"/>00380 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;head&#32;==&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l00381"/>00381 }
<anchor xml:id="_FsmOS_8cpp_source_1l00382"/>00382 
<anchor xml:id="_FsmOS_8cpp_source_1l00383"/>00383 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_FsmOS_8cpp_source_1l00384"/><link linkend="_classLinkedQueue_1a81123eba59f05b7218b756740cfb3fa6">00384</link> uint8_t&#32;<link linkend="_classLinkedQueue_1a81123eba59f05b7218b756740cfb3fa6">LinkedQueue&lt;T&gt;::getSize</link>()<emphasis role="keyword">&#32;const</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00385"/>00385 <emphasis role="keyword"></emphasis>{
<anchor xml:id="_FsmOS_8cpp_source_1l00386"/>00386 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;count;
<anchor xml:id="_FsmOS_8cpp_source_1l00387"/>00387 }
<anchor xml:id="_FsmOS_8cpp_source_1l00388"/>00388 
<anchor xml:id="_FsmOS_8cpp_source_1l00389"/>00389 <emphasis role="comment">//&#32;Explicit&#32;template&#32;instantiations&#32;for&#32;common&#32;types</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00390"/>00390 <emphasis role="keyword">template</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classLinkedQueue">LinkedQueue&lt;SharedMsg&gt;</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l00391"/>00391 
<anchor xml:id="_FsmOS_8cpp_source_1l00392"/>00392 <emphasis role="comment">/*&#32;==================&#32;Mutex&#32;Implementation&#32;==================&#32;*/</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00393"/><link linkend="_classMutex_1a593423d868daf926c7b0d63a833ae29a">00393</link> <link linkend="_classMutex_1a593423d868daf926c7b0d63a833ae29a">Mutex::Mutex</link>()&#32;:&#32;locked(false),&#32;owner_id(0)&#32;{}
<anchor xml:id="_FsmOS_8cpp_source_1l00394"/>00394 
<anchor xml:id="_FsmOS_8cpp_source_1l00395"/><link linkend="_classMutex_1a25133a881d7392b966786263d41bde79">00395</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classMutex_1a25133a881d7392b966786263d41bde79">Mutex::tryLock</link>(uint8_t&#32;task_id)
<anchor xml:id="_FsmOS_8cpp_source_1l00396"/>00396 {
<anchor xml:id="_FsmOS_8cpp_source_1l00397"/>00397 &#32;&#32;&#32;&#32;<link linkend="_FsmOS_8h_1aaaea265b31dabcfb3098bec7685c39e4">ATOMIC_BLOCK</link>(<link linkend="_FsmOS_8h_1a362c18b15a09703e42e1c246c47420ef">ATOMIC_RESTORESTATE</link>)
<anchor xml:id="_FsmOS_8cpp_source_1l00398"/>00398 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00399"/>00399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_classMutex_1a833a30ffb34001c68aa2a37570dbf56e">locked</link>)
<anchor xml:id="_FsmOS_8cpp_source_1l00400"/>00400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00401"/>00401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classMutex_1a833a30ffb34001c68aa2a37570dbf56e">locked</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l00402"/>00402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classMutex_1ae818e65daf468eed3d03a3aad59e1281">owner_id</link>&#32;=&#32;task_id;
<anchor xml:id="_FsmOS_8cpp_source_1l00403"/>00403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l00404"/>00404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00405"/>00405 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00406"/>00406 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l00407"/>00407 }
<anchor xml:id="_FsmOS_8cpp_source_1l00408"/>00408 
<anchor xml:id="_FsmOS_8cpp_source_1l00409"/><link linkend="_classMutex_1ac72a20fa83ef3beb121bb11bb452e9cd">00409</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classMutex_1ac72a20fa83ef3beb121bb11bb452e9cd">Mutex::unlock</link>(uint8_t&#32;task_id)
<anchor xml:id="_FsmOS_8cpp_source_1l00410"/>00410 {
<anchor xml:id="_FsmOS_8cpp_source_1l00411"/>00411 &#32;&#32;&#32;&#32;<link linkend="_FsmOS_8h_1aaaea265b31dabcfb3098bec7685c39e4">ATOMIC_BLOCK</link>(<link linkend="_FsmOS_8h_1a362c18b15a09703e42e1c246c47420ef">ATOMIC_RESTORESTATE</link>)
<anchor xml:id="_FsmOS_8cpp_source_1l00412"/>00412 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00413"/>00413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classMutex_1a833a30ffb34001c68aa2a37570dbf56e">locked</link>&#32;&amp;&amp;&#32;<link linkend="_classMutex_1ae818e65daf468eed3d03a3aad59e1281">owner_id</link>&#32;==&#32;task_id)
<anchor xml:id="_FsmOS_8cpp_source_1l00414"/>00414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00415"/>00415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classMutex_1a833a30ffb34001c68aa2a37570dbf56e">locked</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l00416"/>00416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classMutex_1ae818e65daf468eed3d03a3aad59e1281">owner_id</link>&#32;=&#32;0;
<anchor xml:id="_FsmOS_8cpp_source_1l00417"/>00417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00418"/>00418 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00419"/>00419 }
<anchor xml:id="_FsmOS_8cpp_source_1l00420"/>00420 
<anchor xml:id="_FsmOS_8cpp_source_1l00421"/><link linkend="_classMutex_1ac54a451ca9a856271f5f434f1aaee3d5">00421</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classMutex_1ac54a451ca9a856271f5f434f1aaee3d5">Mutex::isLocked</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classMutex_1a833a30ffb34001c68aa2a37570dbf56e">locked</link>;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00422"/>00422 
<anchor xml:id="_FsmOS_8cpp_source_1l00423"/><link linkend="_classMutex_1ae155c790be1a23e17700cd8b8c2636b4">00423</link> uint8_t&#32;<link linkend="_classMutex_1ae155c790be1a23e17700cd8b8c2636b4">Mutex::getOwner</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classMutex_1ae818e65daf468eed3d03a3aad59e1281">owner_id</link>;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00424"/>00424 
<anchor xml:id="_FsmOS_8cpp_source_1l00425"/>00425 <emphasis role="comment">/*&#32;==================&#32;Semaphore&#32;Implementation&#32;==================&#32;*/</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00426"/><link linkend="_classSemaphore_1a9f8febef61d91a380337f05e3fc0678c">00426</link> <link linkend="_classSemaphore_1a9f8febef61d91a380337f05e3fc0678c">Semaphore::Semaphore</link>(uint8_t&#32;initial_count,&#32;uint8_t&#32;max_count)&#32;:&#32;count(initial_count),&#32;max_count(max_count)&#32;{}
<anchor xml:id="_FsmOS_8cpp_source_1l00427"/>00427 
<anchor xml:id="_FsmOS_8cpp_source_1l00428"/><link linkend="_classSemaphore_1ab733c9bf26e7dd7e007c68ca27b8c06e">00428</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classSemaphore_1ab733c9bf26e7dd7e007c68ca27b8c06e">Semaphore::wait</link>(uint8_t&#32;task_id)
<anchor xml:id="_FsmOS_8cpp_source_1l00429"/>00429 {
<anchor xml:id="_FsmOS_8cpp_source_1l00430"/>00430 &#32;&#32;&#32;&#32;(void)task_id;&#32;&#32;<emphasis role="comment">//&#32;Unused&#32;parameter</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00431"/>00431 &#32;&#32;&#32;&#32;<link linkend="_FsmOS_8h_1aaaea265b31dabcfb3098bec7685c39e4">ATOMIC_BLOCK</link>(<link linkend="_FsmOS_8h_1a362c18b15a09703e42e1c246c47420ef">ATOMIC_RESTORESTATE</link>)
<anchor xml:id="_FsmOS_8cpp_source_1l00432"/>00432 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00433"/>00433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classSemaphore_1a3a416166d840dc83b6283b20bccd072a">count</link>&#32;&gt;&#32;0)
<anchor xml:id="_FsmOS_8cpp_source_1l00434"/>00434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00435"/>00435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classSemaphore_1a3a416166d840dc83b6283b20bccd072a">count</link>--;
<anchor xml:id="_FsmOS_8cpp_source_1l00436"/>00436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l00437"/>00437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00438"/>00438 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00439"/>00439 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l00440"/>00440 }
<anchor xml:id="_FsmOS_8cpp_source_1l00441"/>00441 
<anchor xml:id="_FsmOS_8cpp_source_1l00442"/><link linkend="_classSemaphore_1a1d7c51da55f9ac913a6a711cb6d6e52a">00442</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classSemaphore_1a1d7c51da55f9ac913a6a711cb6d6e52a">Semaphore::signal</link>()
<anchor xml:id="_FsmOS_8cpp_source_1l00443"/>00443 {
<anchor xml:id="_FsmOS_8cpp_source_1l00444"/>00444 &#32;&#32;&#32;&#32;<link linkend="_FsmOS_8h_1aaaea265b31dabcfb3098bec7685c39e4">ATOMIC_BLOCK</link>(<link linkend="_FsmOS_8h_1a362c18b15a09703e42e1c246c47420ef">ATOMIC_RESTORESTATE</link>)
<anchor xml:id="_FsmOS_8cpp_source_1l00445"/>00445 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00446"/>00446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classSemaphore_1a3a416166d840dc83b6283b20bccd072a">count</link>&#32;&lt;&#32;<link linkend="_classSemaphore_1a1851b2b206e6fe2fe6711bd8469e157e">max_count</link>)
<anchor xml:id="_FsmOS_8cpp_source_1l00447"/>00447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00448"/>00448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classSemaphore_1a3a416166d840dc83b6283b20bccd072a">count</link>++;
<anchor xml:id="_FsmOS_8cpp_source_1l00449"/>00449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00450"/>00450 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00451"/>00451 }
<anchor xml:id="_FsmOS_8cpp_source_1l00452"/>00452 
<anchor xml:id="_FsmOS_8cpp_source_1l00453"/><link linkend="_classSemaphore_1a0c65b57daf4e089e6e6241f4669d6f1f">00453</link> uint8_t&#32;<link linkend="_classSemaphore_1a0c65b57daf4e089e6e6241f4669d6f1f">Semaphore::getCount</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classSemaphore_1a3a416166d840dc83b6283b20bccd072a">count</link>;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00454"/>00454 
<anchor xml:id="_FsmOS_8cpp_source_1l00455"/><link linkend="_classSemaphore_1a5dc46274b490015edf89edf3048512a8">00455</link> uint8_t&#32;<link linkend="_classSemaphore_1a5dc46274b490015edf89edf3048512a8">Semaphore::getMaxCount</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classSemaphore_1a1851b2b206e6fe2fe6711bd8469e157e">max_count</link>;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00456"/>00456 
<anchor xml:id="_FsmOS_8cpp_source_1l00457"/>00457 <emphasis role="comment">/*&#32;==================&#32;Task&#32;Implementation&#32;==================&#32;*/</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00458"/>00458 <emphasis role="comment">//&#32;Initialize&#32;static&#32;counter</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00459"/>00459 uint16_t&#32;<link linkend="_classTask_1abf8be7ba74ec27e72e25d2f2cd531d14">Task::createdInstanceCount</link>&#32;=&#32;0;
<anchor xml:id="_FsmOS_8cpp_source_1l00460"/><link linkend="_classTask_1ac801f055a69f1bbbca495cfcaa93940a">00460</link> <link linkend="_classTask_1ac801f055a69f1bbbca495cfcaa93940a">Task::Task</link>(<emphasis role="keyword">const</emphasis>&#32;__FlashStringHelper&#32;*task_name)
<anchor xml:id="_FsmOS_8cpp_source_1l00461"/>00461 &#32;&#32;&#32;&#32;:&#32;remainingTime(0),
<anchor xml:id="_FsmOS_8cpp_source_1l00462"/>00462 &#32;&#32;&#32;&#32;&#32;&#32;periodMs(<link linkend="_group__fsmos_1gac154c550db4c5b7fed1b1fd1e31a63ee">DEFAULT_TASK_PERIOD</link>),
<anchor xml:id="_FsmOS_8cpp_source_1l00463"/>00463 &#32;&#32;&#32;&#32;&#32;&#32;taskId(0),
<anchor xml:id="_FsmOS_8cpp_source_1l00464"/>00464 &#32;&#32;&#32;&#32;&#32;&#32;stateAndPriority(PRIORITY_NORMAL&#32;&lt;&lt;&#32;4),&#32;<emphasis role="comment">//&#32;INACTIVE&#32;state,&#32;PRIORITY_NORMAL&#32;priority</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00465"/>00465 &#32;&#32;&#32;&#32;&#32;&#32;name(task_name)
<anchor xml:id="_FsmOS_8cpp_source_1l00466"/>00466 {
<anchor xml:id="_FsmOS_8cpp_source_1l00467"/>00467 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Bitfield&#32;is&#32;already&#32;initialized&#32;to&#32;0</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00468"/>00468 &#32;&#32;&#32;&#32;<link linkend="_classTask_1abf8be7ba74ec27e72e25d2f2cd531d14">createdInstanceCount</link>++;
<anchor xml:id="_FsmOS_8cpp_source_1l00469"/>00469 }
<anchor xml:id="_FsmOS_8cpp_source_1l00470"/>00470 
<anchor xml:id="_FsmOS_8cpp_source_1l00471"/><link linkend="_classTask_1a3ecf499ea35fb4a96853969a1e1cbbce">00471</link> <link linkend="_classTask_1a3ecf499ea35fb4a96853969a1e1cbbce">Task::~Task</link>()
<anchor xml:id="_FsmOS_8cpp_source_1l00472"/>00472 {
<anchor xml:id="_FsmOS_8cpp_source_1l00473"/>00473 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classTask_1abf8be7ba74ec27e72e25d2f2cd531d14">createdInstanceCount</link>&#32;&gt;&#32;0)
<anchor xml:id="_FsmOS_8cpp_source_1l00474"/>00474 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00475"/>00475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classTask_1abf8be7ba74ec27e72e25d2f2cd531d14">createdInstanceCount</link>--;
<anchor xml:id="_FsmOS_8cpp_source_1l00476"/>00476 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00477"/>00477 }
<anchor xml:id="_FsmOS_8cpp_source_1l00478"/>00478 
<anchor xml:id="_FsmOS_8cpp_source_1l00479"/><link linkend="_classTask_1a5d6a1d3c6cd5b587d2414737fab9f3ed">00479</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classTask_1a5d6a1d3c6cd5b587d2414737fab9f3ed">Task::start</link>()
<anchor xml:id="_FsmOS_8cpp_source_1l00480"/>00480 {
<anchor xml:id="_FsmOS_8cpp_source_1l00481"/>00481 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classTask_1acccd11864edfa1abbb15ff43008a17ec">getState</link>()&#32;==&#32;<link linkend="_classTask_1afa88d99eb2a58c8f078a53f1195c53a8a3ca0a562f7e0ec849ab64f47164b552e">INACTIVE</link>)
<anchor xml:id="_FsmOS_8cpp_source_1l00482"/>00482 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00483"/>00483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classTask_1a7a79169eed523ffdafa76f3c9d07ff27">setState</link>(<link linkend="_classTask_1afa88d99eb2a58c8f078a53f1195c53a8a5c1b2aafd7b0d425608d0481620e0827">ACTIVE</link>);
<anchor xml:id="_FsmOS_8cpp_source_1l00484"/>00484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classTask_1a69b0d2b2a7231d2e2a2880b7cca136e1">remainingTime</link>&#32;=&#32;<link linkend="_classTask_1ab3ed971b7edebf924e2f1e06c4ce20d2">periodMs</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l00485"/>00485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classTask_1a05ad697fe4c99793e7af4dade75bad64">on_start</link>();
<anchor xml:id="_FsmOS_8cpp_source_1l00486"/>00486 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00487"/>00487 }
<anchor xml:id="_FsmOS_8cpp_source_1l00488"/>00488 
<anchor xml:id="_FsmOS_8cpp_source_1l00489"/><link linkend="_classTask_1aba5eb3d6c2a034aa0e319383fbec68c4">00489</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classTask_1aba5eb3d6c2a034aa0e319383fbec68c4">Task::stop</link>()
<anchor xml:id="_FsmOS_8cpp_source_1l00490"/>00490 {
<anchor xml:id="_FsmOS_8cpp_source_1l00491"/>00491 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classTask_1acccd11864edfa1abbb15ff43008a17ec">getState</link>()&#32;==&#32;<link linkend="_classTask_1afa88d99eb2a58c8f078a53f1195c53a8a5c1b2aafd7b0d425608d0481620e0827">ACTIVE</link>&#32;||&#32;<link linkend="_classTask_1acccd11864edfa1abbb15ff43008a17ec">getState</link>()&#32;==&#32;<link linkend="_classTask_1afa88d99eb2a58c8f078a53f1195c53a8a695d6ccd154b43d39b21ff6c6848db53">SUSPENDED</link>)
<anchor xml:id="_FsmOS_8cpp_source_1l00492"/>00492 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00493"/>00493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classTask_1a7a79169eed523ffdafa76f3c9d07ff27">setState</link>(<link linkend="_classTask_1afa88d99eb2a58c8f078a53f1195c53a8a3ca0a562f7e0ec849ab64f47164b552e">INACTIVE</link>);
<anchor xml:id="_FsmOS_8cpp_source_1l00494"/>00494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classTask_1a7eccc77f654e53524d3a07b1ef73c83c">on_stop</link>();
<anchor xml:id="_FsmOS_8cpp_source_1l00495"/>00495 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00496"/>00496 }
<anchor xml:id="_FsmOS_8cpp_source_1l00497"/>00497 
<anchor xml:id="_FsmOS_8cpp_source_1l00498"/><link linkend="_classTask_1ae95f8af6f74b4c956b82698b98454cd2">00498</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classTask_1ae95f8af6f74b4c956b82698b98454cd2">Task::suspend</link>()
<anchor xml:id="_FsmOS_8cpp_source_1l00499"/>00499 {
<anchor xml:id="_FsmOS_8cpp_source_1l00500"/>00500 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classTask_1acccd11864edfa1abbb15ff43008a17ec">getState</link>()&#32;==&#32;<link linkend="_classTask_1afa88d99eb2a58c8f078a53f1195c53a8a5c1b2aafd7b0d425608d0481620e0827">ACTIVE</link>)
<anchor xml:id="_FsmOS_8cpp_source_1l00501"/>00501 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00502"/>00502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classTask_1a7a79169eed523ffdafa76f3c9d07ff27">setState</link>(<link linkend="_classTask_1afa88d99eb2a58c8f078a53f1195c53a8a695d6ccd154b43d39b21ff6c6848db53">SUSPENDED</link>);
<anchor xml:id="_FsmOS_8cpp_source_1l00503"/>00503 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00504"/>00504 }
<anchor xml:id="_FsmOS_8cpp_source_1l00505"/>00505 
<anchor xml:id="_FsmOS_8cpp_source_1l00506"/><link linkend="_classTask_1a8fc7f3a2f5ebd910f22d1134d0dfcb2f">00506</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classTask_1a8fc7f3a2f5ebd910f22d1134d0dfcb2f">Task::resume</link>()
<anchor xml:id="_FsmOS_8cpp_source_1l00507"/>00507 {
<anchor xml:id="_FsmOS_8cpp_source_1l00508"/>00508 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classTask_1acccd11864edfa1abbb15ff43008a17ec">getState</link>()&#32;==&#32;<link linkend="_classTask_1afa88d99eb2a58c8f078a53f1195c53a8a695d6ccd154b43d39b21ff6c6848db53">SUSPENDED</link>)
<anchor xml:id="_FsmOS_8cpp_source_1l00509"/>00509 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00510"/>00510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classTask_1a7a79169eed523ffdafa76f3c9d07ff27">setState</link>(<link linkend="_classTask_1afa88d99eb2a58c8f078a53f1195c53a8a5c1b2aafd7b0d425608d0481620e0827">ACTIVE</link>);
<anchor xml:id="_FsmOS_8cpp_source_1l00511"/>00511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classTask_1a69b0d2b2a7231d2e2a2880b7cca136e1">remainingTime</link>&#32;=&#32;<link linkend="_classTask_1ab3ed971b7edebf924e2f1e06c4ce20d2">periodMs</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l00512"/>00512 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00513"/>00513 }
<anchor xml:id="_FsmOS_8cpp_source_1l00514"/>00514 
<anchor xml:id="_FsmOS_8cpp_source_1l00515"/><link linkend="_classTask_1a4401622acef8826077250b6b9e24e477">00515</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classTask_1a4401622acef8826077250b6b9e24e477">Task::terminate</link>()&#32;{&#32;<link linkend="_classTask_1a7a79169eed523ffdafa76f3c9d07ff27">setState</link>(<link linkend="_classTask_1afa88d99eb2a58c8f078a53f1195c53a8a7a6d8686d5e5ecffdf01fdd137d7713e">TERMINATED</link>);&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00516"/>00516 
<anchor xml:id="_FsmOS_8cpp_source_1l00517"/><link linkend="_classTask_1a77d95e30aaab4ef098b94724c278ecd1">00517</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classTask_1a77d95e30aaab4ef098b94724c278ecd1">Task::setPeriod</link>(uint16_t&#32;period)
<anchor xml:id="_FsmOS_8cpp_source_1l00518"/>00518 {
<anchor xml:id="_FsmOS_8cpp_source_1l00519"/>00519 &#32;&#32;&#32;&#32;<link linkend="_classTask_1ab3ed971b7edebf924e2f1e06c4ce20d2">periodMs</link>&#32;=&#32;(period&#32;&lt;&#32;<link linkend="_group__fsmos_1ga13157fca65016a2c6c913eff0119cf5c">MIN_TASK_PERIOD</link>)&#32;?&#32;<link linkend="_group__fsmos_1ga13157fca65016a2c6c913eff0119cf5c">MIN_TASK_PERIOD</link>&#32;:&#32;((period&#32;&gt;&#32;<link linkend="_group__fsmos_1gab0cd97b1506816b7e089447cd3430e65">MAX_TASK_PERIOD</link>)&#32;?&#32;<link linkend="_group__fsmos_1gab0cd97b1506816b7e089447cd3430e65">MAX_TASK_PERIOD</link>&#32;:&#32;period);
<anchor xml:id="_FsmOS_8cpp_source_1l00520"/>00520 }
<anchor xml:id="_FsmOS_8cpp_source_1l00521"/>00521 
<anchor xml:id="_FsmOS_8cpp_source_1l00522"/><link linkend="_classTask_1aa096c58dddc4fb8f7f8d5f40e1815d2d">00522</link> uint16_t&#32;<link linkend="_classTask_1aa096c58dddc4fb8f7f8d5f40e1815d2d">Task::getPeriod</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classTask_1ab3ed971b7edebf924e2f1e06c4ce20d2">periodMs</link>;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00523"/>00523 
<anchor xml:id="_FsmOS_8cpp_source_1l00524"/><link linkend="_classTask_1ae7a47875b478833d9dae1b5117661ed4">00524</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classTask_1ae7a47875b478833d9dae1b5117661ed4">Task::setPriority</link>(<link linkend="_classTask_1a698d2efb6569ff0ae099fff3e661592a">Priority</link>&#32;priority)&#32;{&#32;<link linkend="_classTask_1a57497b2437a803730f0e5adc8656fe97">stateAndPriority</link>&#32;=&#32;(<link linkend="_classTask_1a57497b2437a803730f0e5adc8656fe97">stateAndPriority</link>&#32;&amp;&#32;0x0F)&#32;|&#32;((<emphasis role="keyword">static_cast&lt;</emphasis>uint8_t<emphasis role="keyword">&gt;</emphasis>(priority)&#32;&amp;&#32;0x0F)&#32;&lt;&lt;&#32;4);&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00525"/>00525 
<anchor xml:id="_FsmOS_8cpp_source_1l00526"/><link linkend="_classTask_1aaa220be4e5007ede0bd3e5349d36eae9">00526</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classTask_1ae7a47875b478833d9dae1b5117661ed4">Task::setPriority</link>(uint8_t&#32;prio)&#32;{&#32;<link linkend="_classTask_1a57497b2437a803730f0e5adc8656fe97">stateAndPriority</link>&#32;=&#32;(<link linkend="_classTask_1a57497b2437a803730f0e5adc8656fe97">stateAndPriority</link>&#32;&amp;&#32;0x0F)&#32;|&#32;((prio&#32;&amp;&#32;0x0F)&#32;&lt;&lt;&#32;4);&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00527"/>00527 
<anchor xml:id="_FsmOS_8cpp_source_1l00528"/><link linkend="_classTask_1aef8cf69a9b677977003d8b72d66d36d8">00528</link> uint8_t&#32;<link linkend="_classTask_1aef8cf69a9b677977003d8b72d66d36d8">Task::getPriority</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<link linkend="_classTask_1a57497b2437a803730f0e5adc8656fe97">stateAndPriority</link>&#32;&gt;&gt;&#32;4)&#32;&amp;&#32;0x0F;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00529"/>00529 
<anchor xml:id="_FsmOS_8cpp_source_1l00530"/><link linkend="_classTask_1a871f04aee2f5a2a024c96b9b54aa5ba4">00530</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classTask_1a871f04aee2f5a2a024c96b9b54aa5ba4">Task::setMaxMessageBudget</link>(uint8_t&#32;budget)
<anchor xml:id="_FsmOS_8cpp_source_1l00531"/>00531 {
<anchor xml:id="_FsmOS_8cpp_source_1l00532"/>00532 &#32;&#32;&#32;&#32;<link linkend="_classTask_1aceb872daf3ecd86b362df7bf2b19130f">maxMessageBudget</link>&#32;=&#32;budget;
<anchor xml:id="_FsmOS_8cpp_source_1l00533"/>00533 }
<anchor xml:id="_FsmOS_8cpp_source_1l00534"/>00534 
<anchor xml:id="_FsmOS_8cpp_source_1l00535"/>00535 
<anchor xml:id="_FsmOS_8cpp_source_1l00536"/><link linkend="_classTask_1acccd11864edfa1abbb15ff43008a17ec">00536</link> <link linkend="_classTask_1afa88d99eb2a58c8f078a53f1195c53a8">Task::State</link>&#32;<link linkend="_classTask_1acccd11864edfa1abbb15ff43008a17ec">Task::getState</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_classTask_1afa88d99eb2a58c8f078a53f1195c53a8">State</link><emphasis role="keyword">&gt;</emphasis>(<link linkend="_classTask_1a57497b2437a803730f0e5adc8656fe97">stateAndPriority</link>&#32;&amp;&#32;0x0F);&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00537"/>00537 
<anchor xml:id="_FsmOS_8cpp_source_1l00538"/><link linkend="_classTask_1a7a79169eed523ffdafa76f3c9d07ff27">00538</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classTask_1a7a79169eed523ffdafa76f3c9d07ff27">Task::setState</link>(<link linkend="_classTask_1afa88d99eb2a58c8f078a53f1195c53a8">State</link>&#32;newState)&#32;{&#32;<link linkend="_classTask_1a57497b2437a803730f0e5adc8656fe97">stateAndPriority</link>&#32;=&#32;(<link linkend="_classTask_1a57497b2437a803730f0e5adc8656fe97">stateAndPriority</link>&#32;&amp;&#32;0xF0)&#32;|&#32;<emphasis role="keyword">static_cast&lt;</emphasis>uint8_t<emphasis role="keyword">&gt;</emphasis>(newState);&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00539"/>00539 
<anchor xml:id="_FsmOS_8cpp_source_1l00540"/><link linkend="_classTask_1af770c80b9b06c6f314441144dcb6b117">00540</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classTask_1af770c80b9b06c6f314441144dcb6b117">Task::checkState</link>(<link linkend="_classTask_1afa88d99eb2a58c8f078a53f1195c53a8">State</link>&#32;expected)<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classTask_1acccd11864edfa1abbb15ff43008a17ec">getState</link>()&#32;==&#32;expected;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00541"/>00541 
<anchor xml:id="_FsmOS_8cpp_source_1l00542"/><link linkend="_classTask_1a14f40317936f729e291a81fcf4426466">00542</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classTask_1a14f40317936f729e291a81fcf4426466">Task::isActive</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classTask_1acccd11864edfa1abbb15ff43008a17ec">getState</link>()&#32;==&#32;<link linkend="_classTask_1afa88d99eb2a58c8f078a53f1195c53a8a5c1b2aafd7b0d425608d0481620e0827">ACTIVE</link>;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00543"/>00543 
<anchor xml:id="_FsmOS_8cpp_source_1l00544"/><link linkend="_classTask_1abee024294d3599db8917a96cab0a55f2">00544</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classTask_1abee024294d3599db8917a96cab0a55f2">Task::isInactive</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classTask_1acccd11864edfa1abbb15ff43008a17ec">getState</link>()&#32;==&#32;<link linkend="_classTask_1afa88d99eb2a58c8f078a53f1195c53a8a3ca0a562f7e0ec849ab64f47164b552e">INACTIVE</link>;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00545"/>00545 
<anchor xml:id="_FsmOS_8cpp_source_1l00546"/><link linkend="_classTask_1a548d620b8f5d7490b8cdc235dbfdf6eb">00546</link> uint8_t&#32;<link linkend="_classTask_1a548d620b8f5d7490b8cdc235dbfdf6eb">Task::getId</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classTask_1a4dc17810637f6e3ea836f1068393a1c8">taskId</link>;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00547"/>00547 
<anchor xml:id="_FsmOS_8cpp_source_1l00548"/><link linkend="_classTask_1aae9b70f6c6542469cd8c3c122536964c">00548</link> <emphasis role="keyword">const</emphasis>&#32;__FlashStringHelper&#32;*<link linkend="_classTask_1aae9b70f6c6542469cd8c3c122536964c">Task::getName</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classTask_1a7727703d676510926710ba56268959f0">name</link>;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00549"/>00549 
<anchor xml:id="_FsmOS_8cpp_source_1l00550"/><link linkend="_classTask_1a955e48a4143b0e140a552fa25f4500c9">00550</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classTask_1a955e48a4143b0e140a552fa25f4500c9">Task::setName</link>(<emphasis role="keyword">const</emphasis>&#32;__FlashStringHelper&#32;*task_name)&#32;{&#32;<link linkend="_classTask_1a7727703d676510926710ba56268959f0">name</link>&#32;=&#32;task_name;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00551"/>00551 
<anchor xml:id="_FsmOS_8cpp_source_1l00552"/>00552 <emphasis role="comment">//&#32;Subscribe/unsubscribe&#32;methods&#32;are&#32;now&#32;inline&#32;in&#32;header&#32;file</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00553"/>00553 
<anchor xml:id="_FsmOS_8cpp_source_1l00554"/><link linkend="_classTask_1a4b2cce5377f8ddf0cc29d00a3c58c1c0">00554</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classTask_1a4b2cce5377f8ddf0cc29d00a3c58c1c0">Task::publish</link>(uint8_t&#32;topic,&#32;uint8_t&#32;type,&#32;uint16_t&#32;arg)
<anchor xml:id="_FsmOS_8cpp_source_1l00555"/>00555 {
<anchor xml:id="_FsmOS_8cpp_source_1l00556"/>00556 &#32;&#32;&#32;&#32;<link linkend="_group__fsmos_1ga990d37c1e9d0a35fead6ab92e0da955e">OS</link>.<link linkend="_classScheduler_1a6212cb4fdc7a3ed5c9e50e97729cff8d">publishMessage</link>(topic,&#32;type,&#32;arg);
<anchor xml:id="_FsmOS_8cpp_source_1l00557"/>00557 }
<anchor xml:id="_FsmOS_8cpp_source_1l00558"/>00558 
<anchor xml:id="_FsmOS_8cpp_source_1l00559"/><link linkend="_classTask_1adbd4d278e42780bd4b6c1d918d0f85c9">00559</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classTask_1adbd4d278e42780bd4b6c1d918d0f85c9">Task::tell</link>(uint8_t&#32;target_task_id,&#32;uint8_t&#32;type,&#32;uint16_t&#32;arg)
<anchor xml:id="_FsmOS_8cpp_source_1l00560"/>00560 {
<anchor xml:id="_FsmOS_8cpp_source_1l00561"/>00561 &#32;&#32;&#32;&#32;<link linkend="_group__fsmos_1ga990d37c1e9d0a35fead6ab92e0da955e">OS</link>.<link linkend="_classScheduler_1a4f3960871e36fdf7234b151f81f04120">sendMessage</link>(target_task_id,&#32;type,&#32;arg);
<anchor xml:id="_FsmOS_8cpp_source_1l00562"/>00562 }
<anchor xml:id="_FsmOS_8cpp_source_1l00563"/>00563 
<anchor xml:id="_FsmOS_8cpp_source_1l00564"/><link linkend="_classTask_1a8bc9456ebb7dfbb657f040320af1a6ef">00564</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classTask_1a8bc9456ebb7dfbb657f040320af1a6ef">Task::log</link>(<emphasis role="keyword">const</emphasis>&#32;__FlashStringHelper&#32;*msg)&#32;{&#32;<link linkend="_group__fsmos_1ga990d37c1e9d0a35fead6ab92e0da955e">OS</link>.<link linkend="_classScheduler_1acaab28b4949d5a175212d134c04cf406">logMessage</link>(<emphasis role="keyword">this</emphasis>,&#32;<link linkend="_classScheduler_1ab2bd6aa333e3f108343fedb022eaca79ac50a6d9344241d486cea80292b5ba327">Scheduler::LOG_INFO</link>,&#32;msg);&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00565"/>00565 
<anchor xml:id="_FsmOS_8cpp_source_1l00566"/><link linkend="_classTask_1aa961a934509f354a023b8f32d3656e95">00566</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classTask_1aa961a934509f354a023b8f32d3656e95">Task::logDebug</link>(<emphasis role="keyword">const</emphasis>&#32;__FlashStringHelper&#32;*msg)&#32;{&#32;<link linkend="_group__fsmos_1ga990d37c1e9d0a35fead6ab92e0da955e">OS</link>.<link linkend="_classScheduler_1acaab28b4949d5a175212d134c04cf406">logMessage</link>(<emphasis role="keyword">this</emphasis>,&#32;<link linkend="_classScheduler_1ab2bd6aa333e3f108343fedb022eaca79ae533a07bf1ba23e55ae9769602ac74a7">Scheduler::LOG_DEBUG</link>,&#32;msg);&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00567"/>00567 
<anchor xml:id="_FsmOS_8cpp_source_1l00568"/><link linkend="_classTask_1a24f4e032e0dd55e6e2e7ef44c715e9ca">00568</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classTask_1a24f4e032e0dd55e6e2e7ef44c715e9ca">Task::logInfo</link>(<emphasis role="keyword">const</emphasis>&#32;__FlashStringHelper&#32;*msg)&#32;{&#32;<link linkend="_group__fsmos_1ga990d37c1e9d0a35fead6ab92e0da955e">OS</link>.<link linkend="_classScheduler_1acaab28b4949d5a175212d134c04cf406">logMessage</link>(<emphasis role="keyword">this</emphasis>,&#32;<link linkend="_classScheduler_1ab2bd6aa333e3f108343fedb022eaca79ac50a6d9344241d486cea80292b5ba327">Scheduler::LOG_INFO</link>,&#32;msg);&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00569"/>00569 
<anchor xml:id="_FsmOS_8cpp_source_1l00570"/><link linkend="_classTask_1a36592cc85ff1d08bf6cb2442055188f6">00570</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classTask_1a36592cc85ff1d08bf6cb2442055188f6">Task::logWarn</link>(<emphasis role="keyword">const</emphasis>&#32;__FlashStringHelper&#32;*msg)&#32;{&#32;<link linkend="_group__fsmos_1ga990d37c1e9d0a35fead6ab92e0da955e">OS</link>.<link linkend="_classScheduler_1acaab28b4949d5a175212d134c04cf406">logMessage</link>(<emphasis role="keyword">this</emphasis>,&#32;<link linkend="_classScheduler_1ab2bd6aa333e3f108343fedb022eaca79a43ae65cd6d87b4c15b8ddb2e1a110286">Scheduler::LOG_WARN</link>,&#32;msg);&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00571"/>00571 
<anchor xml:id="_FsmOS_8cpp_source_1l00572"/><link linkend="_classTask_1aa4c091b4c65870bd83c6111d23ecee21">00572</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classTask_1aa4c091b4c65870bd83c6111d23ecee21">Task::logError</link>(<emphasis role="keyword">const</emphasis>&#32;__FlashStringHelper&#32;*msg)&#32;{&#32;<link linkend="_group__fsmos_1ga990d37c1e9d0a35fead6ab92e0da955e">OS</link>.<link linkend="_classScheduler_1acaab28b4949d5a175212d134c04cf406">logMessage</link>(<emphasis role="keyword">this</emphasis>,&#32;<link linkend="_classScheduler_1ab2bd6aa333e3f108343fedb022eaca79aa56e45ee8b2ce204989dcede4bfa7805">Scheduler::LOG_ERROR</link>,&#32;msg);&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00573"/>00573 
<anchor xml:id="_FsmOS_8cpp_source_1l00574"/>00574 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
<anchor xml:id="_FsmOS_8cpp_source_1l00575"/><link linkend="_classTask_1a9fb78213d87aed4408f9c792fc1ade97">00575</link> T&#32;<link linkend="_classTask_1a9fb78213d87aed4408f9c792fc1ade97">Task::createTimerTyped</link>(uint32_t&#32;duration_ms)<emphasis role="keyword">&#32;const</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00576"/>00576 <emphasis role="keyword"></emphasis>{
<anchor xml:id="_FsmOS_8cpp_source_1l00577"/>00577 &#32;&#32;&#32;&#32;T&#32;timer;
<anchor xml:id="_FsmOS_8cpp_source_1l00578"/>00578 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Extract&#32;the&#32;underlying&#32;type&#32;from&#32;TimerT&lt;T&gt;</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00579"/>00579 &#32;&#32;&#32;&#32;<emphasis role="keyword">using&#32;</emphasis>UnderlyingType&#32;=&#32;<emphasis role="keyword">decltype</emphasis>(timer.durationMs);
<anchor xml:id="_FsmOS_8cpp_source_1l00580"/>00580 &#32;&#32;&#32;&#32;UnderlyingType&#32;max_duration&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>UnderlyingType<emphasis role="keyword">&gt;</emphasis>(~static_cast&lt;UnderlyingType&gt;(0));
<anchor xml:id="_FsmOS_8cpp_source_1l00581"/>00581 &#32;&#32;&#32;&#32;UnderlyingType&#32;safe_duration&#32;=
<anchor xml:id="_FsmOS_8cpp_source_1l00582"/>00582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(duration_ms&#32;&gt;&#32;max_duration)&#32;?&#32;max_duration&#32;:&#32;<emphasis role="keyword">static_cast&lt;</emphasis>UnderlyingType<emphasis role="keyword">&gt;</emphasis>(duration_ms);
<anchor xml:id="_FsmOS_8cpp_source_1l00583"/>00583 &#32;&#32;&#32;&#32;timer.startTimer(safe_duration);
<anchor xml:id="_FsmOS_8cpp_source_1l00584"/>00584 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;timer;
<anchor xml:id="_FsmOS_8cpp_source_1l00585"/>00585 }
<anchor xml:id="_FsmOS_8cpp_source_1l00586"/>00586 
<anchor xml:id="_FsmOS_8cpp_source_1l00587"/>00587 <emphasis role="comment">//&#32;Explicit&#32;template&#32;instantiations&#32;for&#32;Task::createTimerTyped</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00588"/>00588 <emphasis role="keyword">template</emphasis>&#32;<link linkend="_FsmOS_8h_1a9f53b37c6d575f1b498359cc429740b0">Timer8</link>&#32;Task::createTimerTyped&lt;Timer8&gt;(uint32_t)&#32;<emphasis role="keyword">const</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l00589"/>00589 <emphasis role="keyword">template</emphasis>&#32;<link linkend="_FsmOS_8h_1acc8d5d8e761e9ae66c17be7f7d8ff843">Timer16</link>&#32;Task::createTimerTyped&lt;Timer16&gt;(uint32_t)&#32;<emphasis role="keyword">const</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l00590"/>00590 <emphasis role="keyword">template</emphasis>&#32;<link linkend="_FsmOS_8h_1acce064b0f024fed7c7008c84a000538f">Timer32</link>&#32;Task::createTimerTyped&lt;Timer32&gt;(uint32_t)&#32;<emphasis role="keyword">const</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l00591"/>00591 
<anchor xml:id="_FsmOS_8cpp_source_1l00592"/><link linkend="_classTask_1a8c07bf11aa75929d4028b1035e71dac7">00592</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classTask_1a8c07bf11aa75929d4028b1035e71dac7">Task::processMessages</link>()
<anchor xml:id="_FsmOS_8cpp_source_1l00593"/>00593 {
<anchor xml:id="_FsmOS_8cpp_source_1l00594"/>00594 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Message&#32;processing&#32;removed&#32;for&#32;RAM&#32;optimization</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00595"/>00595 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Messages&#32;are&#32;now&#32;handled&#32;directly&#32;by&#32;the&#32;scheduler</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00596"/>00596 }
<anchor xml:id="_FsmOS_8cpp_source_1l00597"/>00597 
<anchor xml:id="_FsmOS_8cpp_source_1l00598"/>00598 <emphasis role="comment">//&#32;Task&#32;timing&#32;monitoring&#32;methods</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00599"/><link linkend="_classTask_1ac5ab04209706d6b3a0fdd5266dc0d97f">00599</link> uint16_t&#32;<link linkend="_classTask_1ac5ab04209706d6b3a0fdd5266dc0d97f">Task::getDelayCount</link>()<emphasis role="keyword">&#32;const</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00600"/>00600 <emphasis role="keyword"></emphasis>{
<anchor xml:id="_FsmOS_8cpp_source_1l00601"/>00601 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classTask_1aaf791abc71bca2ca62d29d2e155dc82c">delayCount</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l00602"/>00602 }
<anchor xml:id="_FsmOS_8cpp_source_1l00603"/>00603 
<anchor xml:id="_FsmOS_8cpp_source_1l00604"/><link linkend="_classTask_1a7806ae077325d4970155cb65cace02c5">00604</link> uint16_t&#32;<link linkend="_classTask_1a7806ae077325d4970155cb65cace02c5">Task::getMaxDelay</link>()<emphasis role="keyword">&#32;const</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00605"/>00605 <emphasis role="keyword"></emphasis>{
<anchor xml:id="_FsmOS_8cpp_source_1l00606"/>00606 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classTask_1a82389ea58680f2ce8a0ffada921c3b6c">maxDelayMs</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l00607"/>00607 }
<anchor xml:id="_FsmOS_8cpp_source_1l00608"/>00608 
<anchor xml:id="_FsmOS_8cpp_source_1l00609"/><link linkend="_classTask_1aed0ad6765c8ca38f4104df0ad075be60">00609</link> uint32_t&#32;<link linkend="_classTask_1aed0ad6765c8ca38f4104df0ad075be60">Task::getScheduledTime</link>()<emphasis role="keyword">&#32;const</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00610"/>00610 <emphasis role="keyword"></emphasis>{
<anchor xml:id="_FsmOS_8cpp_source_1l00611"/>00611 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classTask_1ac78a2eb92ac06324535259def5fe2d43">scheduledTime</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l00612"/>00612 }
<anchor xml:id="_FsmOS_8cpp_source_1l00613"/>00613 
<anchor xml:id="_FsmOS_8cpp_source_1l00614"/><link linkend="_classTask_1ad17b132958585c85ceb73b077b52c099">00614</link> uint32_t&#32;<link linkend="_classTask_1ad17b132958585c85ceb73b077b52c099">Task::getActualStartTime</link>()<emphasis role="keyword">&#32;const</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00615"/>00615 <emphasis role="keyword"></emphasis>{
<anchor xml:id="_FsmOS_8cpp_source_1l00616"/>00616 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classTask_1aba00d925c610ebb6ffce38ce7d550b33">actualStartTime</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l00617"/>00617 }
<anchor xml:id="_FsmOS_8cpp_source_1l00618"/>00618 
<anchor xml:id="_FsmOS_8cpp_source_1l00619"/>00619 <emphasis role="comment">/*&#32;==================&#32;Scheduler&#32;Implementation&#32;==================&#32;*/</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00620"/><link linkend="_classScheduler_1a3b61aac11466cd45ae42ab8c2b0013f6">00620</link> <link linkend="_classScheduler_1a3b61aac11466cd45ae42ab8c2b0013f6">Scheduler::Scheduler</link>()
<anchor xml:id="_FsmOS_8cpp_source_1l00621"/>00621 &#32;&#32;&#32;&#32;:&#32;taskCount(0),
<anchor xml:id="_FsmOS_8cpp_source_1l00622"/>00622 &#32;&#32;&#32;&#32;&#32;&#32;nextTaskId(1),
<anchor xml:id="_FsmOS_8cpp_source_1l00623"/>00623 &#32;&#32;&#32;&#32;&#32;&#32;systemTime(0),
<anchor xml:id="_FsmOS_8cpp_source_1l00624"/>00624 &#32;&#32;&#32;&#32;&#32;&#32;running(false),
<anchor xml:id="_FsmOS_8cpp_source_1l00625"/>00625 &#32;&#32;&#32;&#32;&#32;&#32;currentLogLevel(LOG_INFO)
<anchor xml:id="_FsmOS_8cpp_source_1l00626"/>00626 {
<anchor xml:id="_FsmOS_8cpp_source_1l00627"/>00627 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Initialize&#32;linked&#32;list&#32;pointers</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00628"/>00628 &#32;&#32;&#32;&#32;<link linkend="_classScheduler_1a9eb682b2716a34e7c3eb742782aa42e2">taskHead</link>&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l00629"/>00629 &#32;&#32;&#32;&#32;<link linkend="_classScheduler_1a7dbc17482550f15704cdc4e5bbdde2d9">taskTail</link>&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l00630"/>00630 }
<anchor xml:id="_FsmOS_8cpp_source_1l00631"/>00631 <emphasis role="comment">//&#32;==========&#32;Stack&#32;Canary&#32;(AVR&#32;only)&#32;==========</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00632"/>00632 <emphasis role="preprocessor">#if&#32;defined(__AVR__)</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00633"/>00633 <emphasis role="comment">//&#32;Canary&#32;byte&#32;used&#32;to&#32;mark&#32;free&#32;RAM&#32;for&#32;stack&#32;usage&#32;measurement</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00634"/>00634 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;uint8_t&#32;STACK_CANARY_BYTE&#32;=&#32;0xCD;
<anchor xml:id="_FsmOS_8cpp_source_1l00635"/>00635 
<anchor xml:id="_FsmOS_8cpp_source_1l00636"/>00636 <emphasis role="comment">//&#32;Pointers&#32;delimiting&#32;the&#32;canary&#32;region.&#32;We&#32;avoid&#32;touching&#32;the&#32;current&#32;stack.</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00637"/>00637 <emphasis role="keyword">static</emphasis>&#32;uint8_t&#32;*g_canary_start&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l00638"/>00638 <emphasis role="keyword">static</emphasis>&#32;uint8_t&#32;*g_canary_end&#32;&#32;&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l00639"/>00639 
<anchor xml:id="_FsmOS_8cpp_source_1l00645"/>00645 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;init_stack_canary()
<anchor xml:id="_FsmOS_8cpp_source_1l00646"/>00646 {
<anchor xml:id="_FsmOS_8cpp_source_1l00647"/>00647 &#32;&#32;&#32;&#32;<emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;__bss_end;
<anchor xml:id="_FsmOS_8cpp_source_1l00648"/>00648 &#32;&#32;&#32;&#32;<emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*__brkval;
<anchor xml:id="_FsmOS_8cpp_source_1l00649"/>00649 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Current&#32;stack&#32;pointer&#32;approximation&#32;via&#32;address&#32;of&#32;a&#32;local</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00650"/>00650 &#32;&#32;&#32;&#32;uint8_t&#32;sp_probe;
<anchor xml:id="_FsmOS_8cpp_source_1l00651"/>00651 &#32;&#32;&#32;&#32;uint8_t&#32;*sp&#32;=&#32;(uint8_t&#32;*)&amp;sp_probe;
<anchor xml:id="_FsmOS_8cpp_source_1l00652"/>00652 
<anchor xml:id="_FsmOS_8cpp_source_1l00653"/>00653 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Compute&#32;heap&#32;top</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00654"/>00654 &#32;&#32;&#32;&#32;uint8_t&#32;*heap_top&#32;=&#32;(uint8_t&#32;*)(__brkval&#32;?&#32;__brkval&#32;:&#32;&amp;__bss_end);
<anchor xml:id="_FsmOS_8cpp_source_1l00655"/>00655 
<anchor xml:id="_FsmOS_8cpp_source_1l00656"/>00656 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Safety&#32;margin&#32;to&#32;keep&#32;above&#32;the&#32;canary&#32;(below&#32;SP)</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00657"/>00657 <emphasis role="preprocessor">#ifndef&#32;FSMOS_STACK_CANARY_MARGIN</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00658"/>00658 <emphasis role="preprocessor">#define&#32;FSMOS_STACK_CANARY_MARGIN&#32;32</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00659"/>00659 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00660"/>00660 
<anchor xml:id="_FsmOS_8cpp_source_1l00661"/>00661 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Region&#32;end&#32;just&#32;below&#32;current&#32;SP</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00662"/>00662 &#32;&#32;&#32;&#32;uint8_t&#32;*region_end&#32;=&#32;sp&#32;-&#32;<link linkend="_FsmOS_8h_1a9f8057007e58750af1de560ba396f6bc">FSMOS_STACK_CANARY_MARGIN</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l00663"/>00663 
<anchor xml:id="_FsmOS_8cpp_source_1l00664"/>00664 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Start&#32;from&#32;heap&#32;top&#32;-&#32;cover&#32;entire&#32;free&#32;RAM&#32;area</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00665"/>00665 &#32;&#32;&#32;&#32;uint8_t&#32;*region_start&#32;=&#32;heap_top;
<anchor xml:id="_FsmOS_8cpp_source_1l00666"/>00666 
<anchor xml:id="_FsmOS_8cpp_source_1l00667"/>00667 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(region_start&#32;&gt;=&#32;region_end)
<anchor xml:id="_FsmOS_8cpp_source_1l00668"/>00668 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00669"/>00669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Nothing&#32;to&#32;initialize;&#32;leave&#32;pointers&#32;null</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00670"/>00670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;g_canary_start&#32;=&#32;g_canary_end&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l00671"/>00671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l00672"/>00672 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00673"/>00673 
<anchor xml:id="_FsmOS_8cpp_source_1l00674"/>00674 &#32;&#32;&#32;&#32;g_canary_start&#32;=&#32;region_start;
<anchor xml:id="_FsmOS_8cpp_source_1l00675"/>00675 &#32;&#32;&#32;&#32;g_canary_end&#32;&#32;&#32;=&#32;region_end;
<anchor xml:id="_FsmOS_8cpp_source_1l00676"/>00676 
<anchor xml:id="_FsmOS_8cpp_source_1l00677"/>00677 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Disable&#32;interrupts&#32;around&#32;the&#32;fill&#32;to&#32;keep&#32;ISR&#32;stacks&#32;from&#32;interfering</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00678"/>00678 &#32;&#32;&#32;&#32;uint8_t&#32;sreg&#32;=&#32;SREG;
<anchor xml:id="_FsmOS_8cpp_source_1l00679"/>00679 &#32;&#32;&#32;&#32;cli();
<anchor xml:id="_FsmOS_8cpp_source_1l00680"/>00680 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(uint8_t&#32;*p&#32;=&#32;g_canary_start;&#32;p&#32;&lt;=&#32;g_canary_end;&#32;++p)
<anchor xml:id="_FsmOS_8cpp_source_1l00681"/>00681 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00682"/>00682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*p&#32;=&#32;STACK_CANARY_BYTE;
<anchor xml:id="_FsmOS_8cpp_source_1l00683"/>00683 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00684"/>00684 &#32;&#32;&#32;&#32;SREG&#32;=&#32;sreg;&#32;<emphasis role="comment">//&#32;restore&#32;interrupt&#32;state</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00685"/>00685 }
<anchor xml:id="_FsmOS_8cpp_source_1l00686"/>00686 
<anchor xml:id="_FsmOS_8cpp_source_1l00687"/>00687 <emphasis role="keyword">static</emphasis>&#32;uint16_t&#32;measure_stack_used()
<anchor xml:id="_FsmOS_8cpp_source_1l00688"/>00688 {
<anchor xml:id="_FsmOS_8cpp_source_1l00689"/>00689 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!g_canary_start&#32;||&#32;!g_canary_end&#32;||&#32;g_canary_start&#32;&gt;&#32;g_canary_end)
<anchor xml:id="_FsmOS_8cpp_source_1l00690"/>00690 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00691"/>00691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_FsmOS_8cpp_source_1l00692"/>00692 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00693"/>00693 &#32;&#32;&#32;&#32;uint8_t&#32;*p&#32;=&#32;g_canary_start;
<anchor xml:id="_FsmOS_8cpp_source_1l00694"/>00694 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(p&#32;&lt;=&#32;g_canary_end&#32;&amp;&amp;&#32;*p&#32;==&#32;STACK_CANARY_BYTE)
<anchor xml:id="_FsmOS_8cpp_source_1l00695"/>00695 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00696"/>00696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++p;
<anchor xml:id="_FsmOS_8cpp_source_1l00697"/>00697 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00698"/>00698 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p&#32;&gt;&#32;g_canary_end)
<anchor xml:id="_FsmOS_8cpp_source_1l00699"/>00699 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00700"/>00700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
<anchor xml:id="_FsmOS_8cpp_source_1l00701"/>00701 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00702"/>00702 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Bytes&#32;from&#32;first&#32;non-canary&#32;up&#32;to&#32;end&#32;are&#32;considered&#32;used</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00703"/>00703 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(uint16_t)(g_canary_end&#32;-&#32;p&#32;+&#32;1);
<anchor xml:id="_FsmOS_8cpp_source_1l00704"/>00704 }
<anchor xml:id="_FsmOS_8cpp_source_1l00705"/>00705 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00706"/>00706 
<anchor xml:id="_FsmOS_8cpp_source_1l00707"/><link linkend="_classScheduler_1afc8187779b46f64039d3ffa58f0dbe51">00707</link> <link linkend="_classScheduler_1afc8187779b46f64039d3ffa58f0dbe51">Scheduler::~Scheduler</link>()&#32;{&#32;<link linkend="_classScheduler_1aaa234e0155e99b4fcbae695898663eea">removeAll</link>();&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00708"/>00708 
<anchor xml:id="_FsmOS_8cpp_source_1l00709"/>00709 <emphasis role="comment">//&#32;Missing&#32;method&#32;implementations</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00710"/><link linkend="_classScheduler_1afa07db3c7014412af426ee1c304ebc4b">00710</link> <link linkend="_structTaskNode">TaskNode</link>&#32;*<link linkend="_classScheduler_1afa07db3c7014412af426ee1c304ebc4b">Scheduler::acquireTaskNode</link>(<link linkend="_classTask">Task</link>&#32;*task)
<anchor xml:id="_FsmOS_8cpp_source_1l00711"/>00711 {
<anchor xml:id="_FsmOS_8cpp_source_1l00712"/>00712 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classScheduler_1a38cf4a79d14bd68514a26946b19d3d53">allocateTaskNode</link>(task);
<anchor xml:id="_FsmOS_8cpp_source_1l00713"/>00713 }
<anchor xml:id="_FsmOS_8cpp_source_1l00714"/>00714 
<anchor xml:id="_FsmOS_8cpp_source_1l00715"/><link linkend="_classScheduler_1a2e5c9f7ad69391854d3a0dc2dd73f8b4">00715</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classScheduler_1a2e5c9f7ad69391854d3a0dc2dd73f8b4">Scheduler::releaseTaskNode</link>(<link linkend="_structTaskNode">TaskNode</link>&#32;*node)
<anchor xml:id="_FsmOS_8cpp_source_1l00716"/>00716 {
<anchor xml:id="_FsmOS_8cpp_source_1l00717"/>00717 &#32;&#32;&#32;&#32;<link linkend="_classScheduler_1a419ac926b5685ea804fe7eae086066e3">deallocateTaskNode</link>(node);
<anchor xml:id="_FsmOS_8cpp_source_1l00718"/>00718 }
<anchor xml:id="_FsmOS_8cpp_source_1l00719"/>00719 
<anchor xml:id="_FsmOS_8cpp_source_1l00720"/><link linkend="_classScheduler_1ac6614605ec1477ed4e44d93e613e3ed4">00720</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classScheduler_1ac6614605ec1477ed4e44d93e613e3ed4">Scheduler::dequeueQueuedMessageNode</link>(<link linkend="_structScheduler_1_1MsgNode">MsgNode</link>&#32;*&amp;outNode)
<anchor xml:id="_FsmOS_8cpp_source_1l00721"/>00721 {
<anchor xml:id="_FsmOS_8cpp_source_1l00722"/>00722 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;method&#32;should&#32;work&#32;with&#32;the&#32;main&#32;message&#32;queue,&#32;not&#32;a&#32;separate&#32;queued&#32;message&#32;queue</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00723"/>00723 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_classScheduler_1afc800a55be0f3da82ef2e79dad96496d">msgHead</link>)
<anchor xml:id="_FsmOS_8cpp_source_1l00724"/>00724 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00725"/>00725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outNode&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l00726"/>00726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l00727"/>00727 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00728"/>00728 
<anchor xml:id="_FsmOS_8cpp_source_1l00729"/>00729 &#32;&#32;&#32;&#32;outNode&#32;=&#32;<link linkend="_classScheduler_1afc800a55be0f3da82ef2e79dad96496d">msgHead</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l00730"/>00730 &#32;&#32;&#32;&#32;<link linkend="_classScheduler_1afc800a55be0f3da82ef2e79dad96496d">msgHead</link>&#32;=&#32;<link linkend="_classScheduler_1afc800a55be0f3da82ef2e79dad96496d">msgHead</link>-&gt;<link linkend="_structScheduler_1_1MsgNode_1a91702c9faa02b67ac24d3924be9fdaee">next</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l00731"/>00731 
<anchor xml:id="_FsmOS_8cpp_source_1l00732"/>00732 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_classScheduler_1afc800a55be0f3da82ef2e79dad96496d">msgHead</link>)
<anchor xml:id="_FsmOS_8cpp_source_1l00733"/>00733 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00734"/>00734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classScheduler_1a2503ab5f7acb13a3bd46f35036af3c02">msgTail</link>&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l00735"/>00735 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00736"/>00736 
<anchor xml:id="_FsmOS_8cpp_source_1l00737"/>00737 &#32;&#32;&#32;&#32;outNode-&gt;<link linkend="_structScheduler_1_1MsgNode_1a91702c9faa02b67ac24d3924be9fdaee">next</link>&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l00738"/>00738 &#32;&#32;&#32;&#32;<link linkend="_classScheduler_1a13367b7d53dc7bf804d9158e57bff5f7">msgCount</link>--;
<anchor xml:id="_FsmOS_8cpp_source_1l00739"/>00739 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l00740"/>00740 }
<anchor xml:id="_FsmOS_8cpp_source_1l00741"/>00741 
<anchor xml:id="_FsmOS_8cpp_source_1l00742"/><link linkend="_classScheduler_1aaa8cc86207802e4a457202396b2f7441">00742</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classScheduler_1aaa8cc86207802e4a457202396b2f7441">Scheduler::initializeTaskNodePool</link>()
<anchor xml:id="_FsmOS_8cpp_source_1l00743"/>00743 {
<anchor xml:id="_FsmOS_8cpp_source_1l00744"/>00744 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classScheduler_1a6f21f46d36e9c56a43fadfa6cc32aad7">taskNodePoolInitialized</link>)
<anchor xml:id="_FsmOS_8cpp_source_1l00745"/>00745 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00746"/>00746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l00747"/>00747 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00748"/>00748 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Preallocate&#32;TaskNode&#32;objects&#32;as&#32;a&#32;singly-linked&#32;free-list.</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00749"/>00749 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Start&#32;with&#32;the&#32;number&#32;of&#32;created&#32;tasks&#32;(at&#32;least&#32;1).</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00750"/>00750 &#32;&#32;&#32;&#32;<link linkend="_structTaskNode">TaskNode</link>&#32;*prev&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l00751"/>00751 &#32;&#32;&#32;&#32;uint16_t&#32;initial&#32;=&#32;<link linkend="_classTask_1a42a50afac20691fb27694ca04ccc4e90">Task::getCreatedInstanceCount</link>();
<anchor xml:id="_FsmOS_8cpp_source_1l00752"/>00752 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(initial&#32;==&#32;0)
<anchor xml:id="_FsmOS_8cpp_source_1l00753"/>00753 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00754"/>00754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;initial&#32;=&#32;1;
<anchor xml:id="_FsmOS_8cpp_source_1l00755"/>00755 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00756"/>00756 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(uint8_t&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;initial;&#32;++i)
<anchor xml:id="_FsmOS_8cpp_source_1l00757"/>00757 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00758"/>00758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structTaskNode">TaskNode</link>&#32;*node&#32;=&#32;(<link linkend="_structTaskNode">TaskNode</link>&#32;*)malloc(<emphasis role="keyword">sizeof</emphasis>(<link linkend="_structTaskNode">TaskNode</link>));
<anchor xml:id="_FsmOS_8cpp_source_1l00759"/>00759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!node)
<anchor xml:id="_FsmOS_8cpp_source_1l00760"/>00760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00761"/>00761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Allocation&#32;failure;&#32;cleanup&#32;any&#32;already&#32;allocated&#32;nodes</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00762"/>00762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(prev)
<anchor xml:id="_FsmOS_8cpp_source_1l00763"/>00763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00764"/>00764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structTaskNode">TaskNode</link>&#32;*temp&#32;=&#32;prev;
<anchor xml:id="_FsmOS_8cpp_source_1l00765"/>00765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;prev&#32;=&#32;prev-&gt;<link linkend="_structTaskNode_1af6f74dbb5d2baa80d10dabc43b593ffd">next</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l00766"/>00766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;free(temp);
<anchor xml:id="_FsmOS_8cpp_source_1l00767"/>00767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00768"/>00768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classScheduler_1a72d0e1044f04173955e8783b8c1c9bb0">taskNodePoolCapacity</link>&#32;=&#32;0;
<anchor xml:id="_FsmOS_8cpp_source_1l00769"/>00769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l00770"/>00770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00771"/>00771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Initialize&#32;fields&#32;manually;&#32;building&#32;free-list&#32;in&#32;reverse</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00772"/>00772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node-&gt;<link linkend="_structTaskNode_1a04f109a440464fd95c18d0f3758ee0af">task</link>&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l00773"/>00773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node-&gt;<link linkend="_structTaskNode_1af6f74dbb5d2baa80d10dabc43b593ffd">next</link>&#32;=&#32;prev;
<anchor xml:id="_FsmOS_8cpp_source_1l00774"/>00774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;prev&#32;=&#32;node;
<anchor xml:id="_FsmOS_8cpp_source_1l00775"/>00775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classScheduler_1a72d0e1044f04173955e8783b8c1c9bb0">taskNodePoolCapacity</link>++;
<anchor xml:id="_FsmOS_8cpp_source_1l00776"/>00776 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00777"/>00777 &#32;&#32;&#32;&#32;<link linkend="_classScheduler_1ae4384c1ec8e5ef486776d6dc255a501a">freeTaskNodeHead</link>&#32;=&#32;prev;
<anchor xml:id="_FsmOS_8cpp_source_1l00778"/>00778 &#32;&#32;&#32;&#32;<link linkend="_classScheduler_1a6f21f46d36e9c56a43fadfa6cc32aad7">taskNodePoolInitialized</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l00779"/>00779 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l00780"/>00780 }
<anchor xml:id="_FsmOS_8cpp_source_1l00781"/>00781 
<anchor xml:id="_FsmOS_8cpp_source_1l00782"/>00782 
<anchor xml:id="_FsmOS_8cpp_source_1l00783"/><link linkend="_classScheduler_1a278e9940ce3dd1c708c5bd55b0e4059b">00783</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classScheduler_1a278e9940ce3dd1c708c5bd55b0e4059b">Scheduler::add</link>(<link linkend="_classTask">Task</link>&#32;*task)
<anchor xml:id="_FsmOS_8cpp_source_1l00784"/>00784 {
<anchor xml:id="_FsmOS_8cpp_source_1l00785"/>00785 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!task)
<anchor xml:id="_FsmOS_8cpp_source_1l00786"/>00786 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00787"/>00787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l00788"/>00788 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00789"/>00789 
<anchor xml:id="_FsmOS_8cpp_source_1l00790"/>00790 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;task&#32;limit&#32;based&#32;on&#32;TOPIC_BITFIELD_SIZE</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00791"/>00791 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classScheduler_1a3e1f741da7d85ea80bb2f226d6457ab6">taskCount</link>&#32;&gt;=&#32;<link linkend="_FsmOS_8h_1a91bc2cac3c4615c062e7524ba2ea2278">MAX_TOPICS</link>)
<anchor xml:id="_FsmOS_8cpp_source_1l00792"/>00792 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00793"/>00793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classScheduler_1a1c6dd608a209d55e1925a4dbf5fb4344">logSystemEvent</link>(<link linkend="_classScheduler_1ab2bd6aa333e3f108343fedb022eaca79aa56e45ee8b2ce204989dcede4bfa7805">LOG_ERROR</link>,&#32;F(<emphasis role="stringliteral">&quot;Task&#32;limit&#32;reached&quot;</emphasis>));
<anchor xml:id="_FsmOS_8cpp_source_1l00794"/>00794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group__fsmos_1ga0fd80592a7d1d2fd9b1b52081a8d69cb">logInfof</link>(F(<emphasis role="stringliteral">&quot;Max&#32;tasks:&#32;%u,&#32;Current:&#32;%u&quot;</emphasis>),&#32;<link linkend="_FsmOS_8h_1a91bc2cac3c4615c062e7524ba2ea2278">MAX_TOPICS</link>,&#32;<link linkend="_classScheduler_1a3e1f741da7d85ea80bb2f226d6457ab6">taskCount</link>);
<anchor xml:id="_FsmOS_8cpp_source_1l00795"/>00795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l00796"/>00796 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00797"/>00797 
<anchor xml:id="_FsmOS_8cpp_source_1l00798"/>00798 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Acquire&#32;node&#32;from&#32;pool&#32;using&#32;helper&#32;method</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00799"/>00799 &#32;&#32;&#32;&#32;<link linkend="_structTaskNode">TaskNode</link>&#32;*newNode&#32;=&#32;<link linkend="_classScheduler_1a38cf4a79d14bd68514a26946b19d3d53">allocateTaskNode</link>(task);
<anchor xml:id="_FsmOS_8cpp_source_1l00800"/>00800 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!newNode)
<anchor xml:id="_FsmOS_8cpp_source_1l00801"/>00801 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00802"/>00802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;&#32;&#32;<emphasis role="comment">//&#32;Pool&#32;allocation&#32;failed</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00803"/>00803 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00804"/>00804 
<anchor xml:id="_FsmOS_8cpp_source_1l00805"/>00805 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Assign&#32;task&#32;ID</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00806"/>00806 &#32;&#32;&#32;&#32;task-&gt;<link linkend="_classTask_1a4dc17810637f6e3ea836f1068393a1c8">taskId</link>&#32;=&#32;<link linkend="_classScheduler_1a89473e616865792db671bdb2551aa338">nextTaskId</link>++;
<anchor xml:id="_FsmOS_8cpp_source_1l00807"/>00807 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classScheduler_1a89473e616865792db671bdb2551aa338">nextTaskId</link>&#32;==&#32;0)
<anchor xml:id="_FsmOS_8cpp_source_1l00808"/>00808 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00809"/>00809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classScheduler_1a89473e616865792db671bdb2551aa338">nextTaskId</link>&#32;=&#32;1;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Avoid&#32;zero&#32;task&#32;ID</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00810"/>00810 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00811"/>00811 
<anchor xml:id="_FsmOS_8cpp_source_1l00812"/>00812 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Add&#32;to&#32;linked&#32;list&#32;(singly-linked)</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00813"/>00813 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classScheduler_1a9eb682b2716a34e7c3eb742782aa42e2">taskHead</link>&#32;==&#32;<emphasis role="keyword">nullptr</emphasis>)
<anchor xml:id="_FsmOS_8cpp_source_1l00814"/>00814 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00815"/>00815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;First&#32;task</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00816"/>00816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classScheduler_1a9eb682b2716a34e7c3eb742782aa42e2">taskHead</link>&#32;=&#32;<link linkend="_classScheduler_1a7dbc17482550f15704cdc4e5bbdde2d9">taskTail</link>&#32;=&#32;newNode;
<anchor xml:id="_FsmOS_8cpp_source_1l00817"/>00817 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00818"/>00818 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00819"/>00819 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00820"/>00820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Append&#32;to&#32;tail</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00821"/>00821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classScheduler_1a7dbc17482550f15704cdc4e5bbdde2d9">taskTail</link>-&gt;<link linkend="_structTaskNode_1af6f74dbb5d2baa80d10dabc43b593ffd">next</link>&#32;=&#32;newNode;
<anchor xml:id="_FsmOS_8cpp_source_1l00822"/>00822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classScheduler_1a7dbc17482550f15704cdc4e5bbdde2d9">taskTail</link>&#32;=&#32;newNode;
<anchor xml:id="_FsmOS_8cpp_source_1l00823"/>00823 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00824"/>00824 
<anchor xml:id="_FsmOS_8cpp_source_1l00825"/>00825 &#32;&#32;&#32;&#32;<link linkend="_classScheduler_1a3e1f741da7d85ea80bb2f226d6457ab6">taskCount</link>++;
<anchor xml:id="_FsmOS_8cpp_source_1l00826"/>00826 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l00827"/>00827 }
<anchor xml:id="_FsmOS_8cpp_source_1l00828"/>00828 
<anchor xml:id="_FsmOS_8cpp_source_1l00829"/><link linkend="_classScheduler_1a303a5bd8d44b55803e6da7b4108401c2">00829</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classScheduler_1a303a5bd8d44b55803e6da7b4108401c2">Scheduler::remove</link>(<link linkend="_classTask">Task</link>&#32;*task)
<anchor xml:id="_FsmOS_8cpp_source_1l00830"/>00830 {
<anchor xml:id="_FsmOS_8cpp_source_1l00831"/>00831 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!task)
<anchor xml:id="_FsmOS_8cpp_source_1l00832"/>00832 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00833"/>00833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l00834"/>00834 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00835"/>00835 
<anchor xml:id="_FsmOS_8cpp_source_1l00836"/>00836 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Find&#32;the&#32;node&#32;containing&#32;this&#32;task,&#32;tracking&#32;previous&#32;(singly-linked)</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00837"/>00837 &#32;&#32;&#32;&#32;<link linkend="_structTaskNode">TaskNode</link>&#32;*current&#32;=&#32;<link linkend="_classScheduler_1a9eb682b2716a34e7c3eb742782aa42e2">taskHead</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l00838"/>00838 &#32;&#32;&#32;&#32;<link linkend="_structTaskNode">TaskNode</link>&#32;*previous&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l00839"/>00839 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(current&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>)
<anchor xml:id="_FsmOS_8cpp_source_1l00840"/>00840 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00841"/>00841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(current-&gt;<link linkend="_structTaskNode_1a04f109a440464fd95c18d0f3758ee0af">task</link>&#32;==&#32;task)
<anchor xml:id="_FsmOS_8cpp_source_1l00842"/>00842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00843"/>00843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Remove&#32;from&#32;linked&#32;list</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00844"/>00844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(previous)
<anchor xml:id="_FsmOS_8cpp_source_1l00845"/>00845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00846"/>00846 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;previous-&gt;<link linkend="_structTaskNode_1af6f74dbb5d2baa80d10dabc43b593ffd">next</link>&#32;=&#32;current-&gt;<link linkend="_structTaskNode_1af6f74dbb5d2baa80d10dabc43b593ffd">next</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l00847"/>00847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00848"/>00848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00849"/>00849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00850"/>00850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Removing&#32;head</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00851"/>00851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classScheduler_1a9eb682b2716a34e7c3eb742782aa42e2">taskHead</link>&#32;=&#32;current-&gt;<link linkend="_structTaskNode_1af6f74dbb5d2baa80d10dabc43b593ffd">next</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l00852"/>00852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00853"/>00853 
<anchor xml:id="_FsmOS_8cpp_source_1l00854"/>00854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(current&#32;==&#32;<link linkend="_classScheduler_1a7dbc17482550f15704cdc4e5bbdde2d9">taskTail</link>)
<anchor xml:id="_FsmOS_8cpp_source_1l00855"/>00855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00856"/>00856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Update&#32;tail&#32;if&#32;needed</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00857"/>00857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classScheduler_1a7dbc17482550f15704cdc4e5bbdde2d9">taskTail</link>&#32;=&#32;previous;
<anchor xml:id="_FsmOS_8cpp_source_1l00858"/>00858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00859"/>00859 
<anchor xml:id="_FsmOS_8cpp_source_1l00860"/>00860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classScheduler_1a419ac926b5685ea804fe7eae086066e3">deallocateTaskNode</link>(current);
<anchor xml:id="_FsmOS_8cpp_source_1l00861"/>00861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classScheduler_1a3e1f741da7d85ea80bb2f226d6457ab6">taskCount</link>--;
<anchor xml:id="_FsmOS_8cpp_source_1l00862"/>00862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l00863"/>00863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00864"/>00864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;previous&#32;=&#32;current;
<anchor xml:id="_FsmOS_8cpp_source_1l00865"/>00865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;current&#32;=&#32;current-&gt;<link linkend="_structTaskNode_1af6f74dbb5d2baa80d10dabc43b593ffd">next</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l00866"/>00866 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00867"/>00867 
<anchor xml:id="_FsmOS_8cpp_source_1l00868"/>00868 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l00869"/>00869 }
<anchor xml:id="_FsmOS_8cpp_source_1l00870"/>00870 
<anchor xml:id="_FsmOS_8cpp_source_1l00871"/><link linkend="_classScheduler_1aaa234e0155e99b4fcbae695898663eea">00871</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classScheduler_1aaa234e0155e99b4fcbae695898663eea">Scheduler::removeAll</link>()
<anchor xml:id="_FsmOS_8cpp_source_1l00872"/>00872 {
<anchor xml:id="_FsmOS_8cpp_source_1l00873"/>00873 &#32;&#32;&#32;&#32;<link linkend="_structTaskNode">TaskNode</link>&#32;*current&#32;=&#32;<link linkend="_classScheduler_1a9eb682b2716a34e7c3eb742782aa42e2">taskHead</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l00874"/>00874 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(current&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>)
<anchor xml:id="_FsmOS_8cpp_source_1l00875"/>00875 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00876"/>00876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structTaskNode">TaskNode</link>&#32;*next&#32;=&#32;current-&gt;<link linkend="_structTaskNode_1af6f74dbb5d2baa80d10dabc43b593ffd">next</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l00877"/>00877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;current-&gt;<link linkend="_structTaskNode_1a04f109a440464fd95c18d0f3758ee0af">task</link>-&gt;<link linkend="_classTask_1aba5eb3d6c2a034aa0e319383fbec68c4">stop</link>();
<anchor xml:id="_FsmOS_8cpp_source_1l00878"/>00878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classScheduler_1a419ac926b5685ea804fe7eae086066e3">deallocateTaskNode</link>(current);
<anchor xml:id="_FsmOS_8cpp_source_1l00879"/>00879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;current&#32;=&#32;next;
<anchor xml:id="_FsmOS_8cpp_source_1l00880"/>00880 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00881"/>00881 &#32;&#32;&#32;&#32;<link linkend="_classScheduler_1a9eb682b2716a34e7c3eb742782aa42e2">taskHead</link>&#32;=&#32;<link linkend="_classScheduler_1a7dbc17482550f15704cdc4e5bbdde2d9">taskTail</link>&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l00882"/>00882 &#32;&#32;&#32;&#32;<link linkend="_classScheduler_1a3e1f741da7d85ea80bb2f226d6457ab6">taskCount</link>&#32;=&#32;0;
<anchor xml:id="_FsmOS_8cpp_source_1l00883"/>00883 }
<anchor xml:id="_FsmOS_8cpp_source_1l00884"/>00884 
<anchor xml:id="_FsmOS_8cpp_source_1l00885"/><link linkend="_classScheduler_1aabf3840938cc797555cdee88f5d19dd2">00885</link> <link linkend="_classTask">Task</link>&#32;*<link linkend="_classScheduler_1aabf3840938cc797555cdee88f5d19dd2">Scheduler::getTask</link>(uint8_t&#32;task_id)
<anchor xml:id="_FsmOS_8cpp_source_1l00886"/>00886 {
<anchor xml:id="_FsmOS_8cpp_source_1l00887"/>00887 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classScheduler_1ad2b77c7b7e929aad03ce0034f992d876">findTask</link>([task_id](<link linkend="_classTask">Task</link>&#32;*&#32;task)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;task-&gt;<link linkend="_classTask_1a548d620b8f5d7490b8cdc235dbfdf6eb">getId</link>()&#32;==&#32;task_id;&#32;});
<anchor xml:id="_FsmOS_8cpp_source_1l00888"/>00888 }
<anchor xml:id="_FsmOS_8cpp_source_1l00889"/>00889 
<anchor xml:id="_FsmOS_8cpp_source_1l00890"/>00890 <emphasis role="comment">//&#32;getTaskCount&#32;is&#32;now&#32;inline&#32;in&#32;header&#32;file</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00891"/>00891 
<anchor xml:id="_FsmOS_8cpp_source_1l00892"/><link linkend="_classScheduler_1acb0612339205f7e921b0034768dba4c5">00892</link> uint16_t&#32;<link linkend="_classScheduler_1acb0612339205f7e921b0034768dba4c5">Scheduler::getMaxTasks</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classScheduler_1a72d0e1044f04173955e8783b8c1c9bb0">taskNodePoolCapacity</link>;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00893"/>00893 
<anchor xml:id="_FsmOS_8cpp_source_1l00894"/><link linkend="_classScheduler_1ae552f70c9bc8fa9f7406e482d6a3769b">00894</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classScheduler_1ae552f70c9bc8fa9f7406e482d6a3769b">Scheduler::begin</link>()
<anchor xml:id="_FsmOS_8cpp_source_1l00895"/>00895 {
<anchor xml:id="_FsmOS_8cpp_source_1l00896"/>00896 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Initialize&#32;stack&#32;canary&#32;before&#32;tasks&#32;start&#32;executing</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00897"/>00897 <emphasis role="preprocessor">#if&#32;defined(__AVR__)</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00898"/>00898 &#32;&#32;&#32;&#32;init_stack_canary();
<anchor xml:id="_FsmOS_8cpp_source_1l00899"/>00899 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00900"/>00900 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Set&#32;log&#32;level&#32;to&#32;INFO&#32;for&#32;better&#32;debugging</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00901"/>00901 &#32;&#32;&#32;&#32;<link linkend="_classScheduler_1a612b33338832de0d18ebf5859b3d7037">setLogLevel</link>(<link linkend="_classScheduler_1ab2bd6aa333e3f108343fedb022eaca79ac50a6d9344241d486cea80292b5ba327">LOG_INFO</link>);
<anchor xml:id="_FsmOS_8cpp_source_1l00902"/>00902 
<anchor xml:id="_FsmOS_8cpp_source_1l00903"/>00903 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Log&#32;startup&#32;message</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00904"/>00904 &#32;&#32;&#32;&#32;<link linkend="_classScheduler_1a1c6dd608a209d55e1925a4dbf5fb4344">logSystemEvent</link>(<link linkend="_classScheduler_1ab2bd6aa333e3f108343fedb022eaca79ac50a6d9344241d486cea80292b5ba327">LOG_INFO</link>,&#32;F(<emphasis role="stringliteral">&quot;FsmOS&#32;starting&quot;</emphasis>));
<anchor xml:id="_FsmOS_8cpp_source_1l00905"/>00905 
<anchor xml:id="_FsmOS_8cpp_source_1l00906"/>00906 &#32;&#32;&#32;&#32;<link linkend="_classScheduler_1a8a0b0619fdfbda3338fc4964999b3ffd">running</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l00907"/>00907 &#32;&#32;&#32;&#32;<link linkend="_classScheduler_1ac66364f021223ea49e76680b6dbcb56a">systemTime</link>&#32;=&#32;millis();
<anchor xml:id="_FsmOS_8cpp_source_1l00908"/>00908 
<anchor xml:id="_FsmOS_8cpp_source_1l00909"/>00909 <emphasis role="preprocessor">#if&#32;defined(__AVR__)</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00910"/>00910 &#32;&#32;&#32;&#32;init_stdio_to_serial();
<anchor xml:id="_FsmOS_8cpp_source_1l00911"/>00911 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00912"/>00912 
<anchor xml:id="_FsmOS_8cpp_source_1l00913"/>00913 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Start&#32;all&#32;tasks</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00914"/>00914 &#32;&#32;&#32;&#32;<link linkend="_classScheduler_1a3c9f6290c6ae7231b96c9ba6da36382b">forEachTask</link>([<emphasis role="keyword">this</emphasis>](<link linkend="_classTask">Task</link>&#32;*&#32;task)
<anchor xml:id="_FsmOS_8cpp_source_1l00915"/>00915 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00916"/>00916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;task-&gt;<link linkend="_classTask_1a5d6a1d3c6cd5b587d2414737fab9f3ed">start</link>();
<anchor xml:id="_FsmOS_8cpp_source_1l00917"/>00917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classScheduler_1aa541036ba6db4765a2270d39f74c8758">feedWatchdog</link>();
<anchor xml:id="_FsmOS_8cpp_source_1l00918"/>00918 &#32;&#32;&#32;&#32;});
<anchor xml:id="_FsmOS_8cpp_source_1l00919"/>00919 
<anchor xml:id="_FsmOS_8cpp_source_1l00920"/>00920 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Log&#32;task&#32;count</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00921"/>00921 &#32;&#32;&#32;&#32;<link linkend="_classScheduler_1a1c6dd608a209d55e1925a4dbf5fb4344">logSystemEvent</link>(<link linkend="_classScheduler_1ab2bd6aa333e3f108343fedb022eaca79ac50a6d9344241d486cea80292b5ba327">LOG_INFO</link>,&#32;F(<emphasis role="stringliteral">&quot;Scheduler&#32;ready&quot;</emphasis>));
<anchor xml:id="_FsmOS_8cpp_source_1l00922"/>00922 }
<anchor xml:id="_FsmOS_8cpp_source_1l00923"/>00923 
<anchor xml:id="_FsmOS_8cpp_source_1l00924"/><link linkend="_classScheduler_1ae3fa321ea81e2c07e361147f4f0d606e">00924</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classScheduler_1ae3fa321ea81e2c07e361147f4f0d606e">Scheduler::loopOnce</link>()
<anchor xml:id="_FsmOS_8cpp_source_1l00925"/>00925 {
<anchor xml:id="_FsmOS_8cpp_source_1l00926"/>00926 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_classScheduler_1a8a0b0619fdfbda3338fc4964999b3ffd">running</link>)
<anchor xml:id="_FsmOS_8cpp_source_1l00927"/>00927 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00928"/>00928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l00929"/>00929 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00930"/>00930 
<anchor xml:id="_FsmOS_8cpp_source_1l00931"/>00931 &#32;&#32;&#32;&#32;<link linkend="_classScheduler_1a0a80134fcc4380c2577a5281352847eb">updateSystemTime</link>();
<anchor xml:id="_FsmOS_8cpp_source_1l00932"/>00932 
<anchor xml:id="_FsmOS_8cpp_source_1l00933"/>00933 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Decrease&#32;remaining&#32;time&#32;for&#32;all&#32;active&#32;tasks</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00934"/>00934 &#32;&#32;&#32;&#32;<link linkend="_classScheduler_1a3c9f6290c6ae7231b96c9ba6da36382b">forEachTask</link>([](<link linkend="_classTask">Task</link>&#32;*&#32;task)
<anchor xml:id="_FsmOS_8cpp_source_1l00935"/>00935 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00936"/>00936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(task-&gt;<link linkend="_classTask_1a14f40317936f729e291a81fcf4426466">isActive</link>()&#32;&amp;&amp;&#32;task-&gt;<link linkend="_classTask_1a69b0d2b2a7231d2e2a2880b7cca136e1">remainingTime</link>&#32;&gt;&#32;0)
<anchor xml:id="_FsmOS_8cpp_source_1l00937"/>00937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00938"/>00938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;task-&gt;remainingTime--;
<anchor xml:id="_FsmOS_8cpp_source_1l00939"/>00939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00940"/>00940 &#32;&#32;&#32;&#32;});
<anchor xml:id="_FsmOS_8cpp_source_1l00941"/>00941 
<anchor xml:id="_FsmOS_8cpp_source_1l00942"/>00942 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Feed&#32;watchdog&#32;timer</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00943"/>00943 &#32;&#32;&#32;&#32;<link linkend="_classScheduler_1aa541036ba6db4765a2270d39f74c8758">feedWatchdog</link>();
<anchor xml:id="_FsmOS_8cpp_source_1l00944"/>00944 
<anchor xml:id="_FsmOS_8cpp_source_1l00945"/>00945 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Process&#32;a&#32;limited&#32;number&#32;of&#32;queued&#32;messages&#32;per&#32;tick</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00946"/>00946 &#32;&#32;&#32;&#32;<link linkend="_classScheduler_1aef20dca5b8efdd71b4e91f91d5e0240f">processMessages</link>();
<anchor xml:id="_FsmOS_8cpp_source_1l00947"/>00947 
<anchor xml:id="_FsmOS_8cpp_source_1l00948"/>00948 &#32;&#32;&#32;&#32;<link linkend="_classTask">Task</link>&#32;*next_task&#32;=&#32;<link linkend="_classScheduler_1aafdaee288f465a178ef154e1fce57cf4">findNextTask</link>();
<anchor xml:id="_FsmOS_8cpp_source_1l00949"/>00949 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(next_task)
<anchor xml:id="_FsmOS_8cpp_source_1l00950"/>00950 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00951"/>00951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classScheduler_1a42e220f60192016791fa56855fcc8e46">executeTask</link>(next_task);
<anchor xml:id="_FsmOS_8cpp_source_1l00952"/>00952 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00953"/>00953 }
<anchor xml:id="_FsmOS_8cpp_source_1l00954"/>00954 
<anchor xml:id="_FsmOS_8cpp_source_1l00955"/><link linkend="_classScheduler_1a81607abe2905dee2e7cf9222a9e35b8f">00955</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classScheduler_1a81607abe2905dee2e7cf9222a9e35b8f">Scheduler::loop</link>()
<anchor xml:id="_FsmOS_8cpp_source_1l00956"/>00956 {
<anchor xml:id="_FsmOS_8cpp_source_1l00957"/>00957 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<link linkend="_classScheduler_1a8a0b0619fdfbda3338fc4964999b3ffd">running</link>)
<anchor xml:id="_FsmOS_8cpp_source_1l00958"/>00958 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00959"/>00959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classScheduler_1ae3fa321ea81e2c07e361147f4f0d606e">loopOnce</link>();
<anchor xml:id="_FsmOS_8cpp_source_1l00960"/>00960 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00961"/>00961 }
<anchor xml:id="_FsmOS_8cpp_source_1l00962"/>00962 
<anchor xml:id="_FsmOS_8cpp_source_1l00963"/><link linkend="_classScheduler_1a7ac470a1b0421f2db78e5b478a6b28b1">00963</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classScheduler_1a7ac470a1b0421f2db78e5b478a6b28b1">Scheduler::stop</link>()&#32;{&#32;<link linkend="_classScheduler_1a8a0b0619fdfbda3338fc4964999b3ffd">running</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00964"/>00964 
<anchor xml:id="_FsmOS_8cpp_source_1l00965"/><link linkend="_classScheduler_1a6212cb4fdc7a3ed5c9e50e97729cff8d">00965</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classScheduler_1a6212cb4fdc7a3ed5c9e50e97729cff8d">Scheduler::publishMessage</link>(uint8_t&#32;topic,&#32;uint8_t&#32;type,&#32;uint16_t&#32;arg)
<anchor xml:id="_FsmOS_8cpp_source_1l00966"/>00966 {
<anchor xml:id="_FsmOS_8cpp_source_1l00967"/>00967 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Enqueue&#32;for&#32;all&#32;subscribed&#32;tasks</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00968"/>00968 &#32;&#32;&#32;&#32;<link linkend="_classScheduler_1a3c9f6290c6ae7231b96c9ba6da36382b">forEachTask</link>([<emphasis role="keyword">this</emphasis>,&#32;topic,&#32;type,&#32;arg](<link linkend="_classTask">Task</link>&#32;*&#32;task)
<anchor xml:id="_FsmOS_8cpp_source_1l00969"/>00969 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00970"/>00970 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(task-&gt;<link linkend="_classTask_1a14f40317936f729e291a81fcf4426466">isActive</link>()&#32;&amp;&amp;&#32;task-&gt;<link linkend="_classTask_1a1f356af32a2d49b158ead810225d00be">isSubscribedToTopic</link>(topic))
<anchor xml:id="_FsmOS_8cpp_source_1l00971"/>00971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00972"/>00972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;enqueueQueuedMessage(task-&gt;getId(),&#32;topic,&#32;type,&#32;arg);
<anchor xml:id="_FsmOS_8cpp_source_1l00973"/>00973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00974"/>00974 &#32;&#32;&#32;&#32;});
<anchor xml:id="_FsmOS_8cpp_source_1l00975"/>00975 }
<anchor xml:id="_FsmOS_8cpp_source_1l00976"/>00976 
<anchor xml:id="_FsmOS_8cpp_source_1l00977"/><link linkend="_classScheduler_1a4f3960871e36fdf7234b151f81f04120">00977</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classScheduler_1a4f3960871e36fdf7234b151f81f04120">Scheduler::sendMessage</link>(uint8_t&#32;task_id,&#32;uint8_t&#32;type,&#32;uint16_t&#32;arg)
<anchor xml:id="_FsmOS_8cpp_source_1l00978"/>00978 {
<anchor xml:id="_FsmOS_8cpp_source_1l00979"/>00979 &#32;&#32;&#32;&#32;<link linkend="_classTask">Task</link>&#32;*target_task&#32;=&#32;<link linkend="_classScheduler_1aabf3840938cc797555cdee88f5d19dd2">getTask</link>(task_id);
<anchor xml:id="_FsmOS_8cpp_source_1l00980"/>00980 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!target_task&#32;||&#32;!target_task-&gt;<link linkend="_classTask_1a14f40317936f729e291a81fcf4426466">isActive</link>())
<anchor xml:id="_FsmOS_8cpp_source_1l00981"/>00981 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l00982"/>00982 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l00983"/>00983 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00984"/>00984 
<anchor xml:id="_FsmOS_8cpp_source_1l00985"/>00985 &#32;&#32;&#32;&#32;<link linkend="_classScheduler_1acb1eb89034fcb709b8769ff9060063e5">enqueueQueuedMessage</link>(task_id,&#32;0,&#32;type,&#32;arg);
<anchor xml:id="_FsmOS_8cpp_source_1l00986"/>00986 }
<anchor xml:id="_FsmOS_8cpp_source_1l00987"/>00987 
<anchor xml:id="_FsmOS_8cpp_source_1l00988"/><link linkend="_classScheduler_1afe202befb3d6eac9dbb6acd1a4b09401">00988</link> uint32_t&#32;<link linkend="_classScheduler_1afe202befb3d6eac9dbb6acd1a4b09401">Scheduler::now</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classScheduler_1ac66364f021223ea49e76680b6dbcb56a">systemTime</link>;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l00989"/>00989 
<anchor xml:id="_FsmOS_8cpp_source_1l00990"/><link linkend="_classScheduler_1a56c3c1a776927eeb7917e7b636a2e3ab">00990</link> uint16_t&#32;<link linkend="_classScheduler_1a56c3c1a776927eeb7917e7b636a2e3ab">Scheduler::getFreeMemory</link>()<emphasis role="keyword">&#32;const</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00991"/>00991 <emphasis role="keyword"></emphasis>{
<anchor xml:id="_FsmOS_8cpp_source_1l00992"/>00992 &#32;&#32;&#32;&#32;<emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;__heap_start;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;start&#32;of&#32;heap&#32;(in&#32;.bss)</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00993"/>00993 &#32;&#32;&#32;&#32;<emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*__brkval;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;current&#32;heap&#32;break&#32;(nullptr&#32;if&#32;none)</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00994"/>00994 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;v;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;stack&#32;variable&#32;to&#32;get&#32;current&#32;stack&#32;address</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00995"/>00995 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Difference&#32;between&#32;current&#32;stack&#32;pointer&#32;and&#32;heap&#32;end/start</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l00996"/>00996 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(uint16_t)(&amp;v&#32;-&#32;(__brkval&#32;==&#32;0&#32;?&#32;&amp;__heap_start&#32;:&#32;__brkval));
<anchor xml:id="_FsmOS_8cpp_source_1l00997"/>00997 }
<anchor xml:id="_FsmOS_8cpp_source_1l00998"/>00998 
<anchor xml:id="_FsmOS_8cpp_source_1l00999"/><link linkend="_classScheduler_1a612b33338832de0d18ebf5859b3d7037">00999</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classScheduler_1a612b33338832de0d18ebf5859b3d7037">Scheduler::setLogLevel</link>(<link linkend="_classScheduler_1ab2bd6aa333e3f108343fedb022eaca79">LogLevel</link>&#32;level)&#32;{&#32;<link linkend="_classScheduler_1a720b2ff4a9e770649fe7b63d3098613d">currentLogLevel</link>&#32;=&#32;level;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01000"/>01000 
<anchor xml:id="_FsmOS_8cpp_source_1l01001"/><link linkend="_classScheduler_1acaab28b4949d5a175212d134c04cf406">01001</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classScheduler_1acaab28b4949d5a175212d134c04cf406">Scheduler::logMessage</link>(<link linkend="_classTask">Task</link>&#32;*task,&#32;<link linkend="_classScheduler_1ab2bd6aa333e3f108343fedb022eaca79">LogLevel</link>&#32;level,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*msg)
<anchor xml:id="_FsmOS_8cpp_source_1l01002"/>01002 {
<anchor xml:id="_FsmOS_8cpp_source_1l01003"/>01003 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(level&#32;&lt;&#32;<link linkend="_classScheduler_1a720b2ff4a9e770649fe7b63d3098613d">currentLogLevel</link>)
<anchor xml:id="_FsmOS_8cpp_source_1l01004"/>01004 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01005"/>01005 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l01006"/>01006 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01007"/>01007 
<anchor xml:id="_FsmOS_8cpp_source_1l01008"/>01008 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*level_str&#32;=&#32;<emphasis role="stringliteral">&quot;DEBUG&quot;</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l01009"/>01009 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(level)
<anchor xml:id="_FsmOS_8cpp_source_1l01010"/>01010 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01011"/>01011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_classScheduler_1ab2bd6aa333e3f108343fedb022eaca79ac50a6d9344241d486cea80292b5ba327">LOG_INFO</link>:
<anchor xml:id="_FsmOS_8cpp_source_1l01012"/>01012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;level_str&#32;=&#32;<emphasis role="stringliteral">&quot;INFO&quot;</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l01013"/>01013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l01014"/>01014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_classScheduler_1ab2bd6aa333e3f108343fedb022eaca79a43ae65cd6d87b4c15b8ddb2e1a110286">LOG_WARN</link>:
<anchor xml:id="_FsmOS_8cpp_source_1l01015"/>01015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;level_str&#32;=&#32;<emphasis role="stringliteral">&quot;WARN&quot;</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l01016"/>01016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l01017"/>01017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_classScheduler_1ab2bd6aa333e3f108343fedb022eaca79aa56e45ee8b2ce204989dcede4bfa7805">LOG_ERROR</link>:
<anchor xml:id="_FsmOS_8cpp_source_1l01018"/>01018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;level_str&#32;=&#32;<emphasis role="stringliteral">&quot;ERROR&quot;</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l01019"/>01019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l01020"/>01020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
<anchor xml:id="_FsmOS_8cpp_source_1l01021"/>01021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l01022"/>01022 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01023"/>01023 
<anchor xml:id="_FsmOS_8cpp_source_1l01024"/>01024 &#32;&#32;&#32;&#32;Serial.print(F(<emphasis role="stringliteral">&quot;[&quot;</emphasis>));
<anchor xml:id="_FsmOS_8cpp_source_1l01025"/>01025 &#32;&#32;&#32;&#32;Serial.print(level_str);
<anchor xml:id="_FsmOS_8cpp_source_1l01026"/>01026 &#32;&#32;&#32;&#32;Serial.print(F(<emphasis role="stringliteral">&quot;]&#32;&quot;</emphasis>));
<anchor xml:id="_FsmOS_8cpp_source_1l01027"/>01027 
<anchor xml:id="_FsmOS_8cpp_source_1l01028"/>01028 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(task)
<anchor xml:id="_FsmOS_8cpp_source_1l01029"/>01029 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01030"/>01030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.print(F(<emphasis role="stringliteral">&quot;T&quot;</emphasis>));
<anchor xml:id="_FsmOS_8cpp_source_1l01031"/>01031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.print(task-&gt;<link linkend="_classTask_1a548d620b8f5d7490b8cdc235dbfdf6eb">getId</link>());
<anchor xml:id="_FsmOS_8cpp_source_1l01032"/>01032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.print(F(<emphasis role="stringliteral">&quot;:&#32;&quot;</emphasis>));
<anchor xml:id="_FsmOS_8cpp_source_1l01033"/>01033 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01034"/>01034 
<anchor xml:id="_FsmOS_8cpp_source_1l01035"/>01035 &#32;&#32;&#32;&#32;Serial.println(msg);
<anchor xml:id="_FsmOS_8cpp_source_1l01036"/>01036 }
<anchor xml:id="_FsmOS_8cpp_source_1l01037"/>01037 
<anchor xml:id="_FsmOS_8cpp_source_1l01038"/><link linkend="_classScheduler_1af5334fe39dbfc2286e91ee358087d3b5">01038</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classScheduler_1acaab28b4949d5a175212d134c04cf406">Scheduler::logMessage</link>(<link linkend="_classTask">Task</link>&#32;*task,&#32;<link linkend="_classScheduler_1ab2bd6aa333e3f108343fedb022eaca79">LogLevel</link>&#32;level,&#32;<emphasis role="keyword">const</emphasis>&#32;__FlashStringHelper&#32;*msg)
<anchor xml:id="_FsmOS_8cpp_source_1l01039"/>01039 {
<anchor xml:id="_FsmOS_8cpp_source_1l01040"/>01040 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(level&#32;&lt;&#32;<link linkend="_classScheduler_1a720b2ff4a9e770649fe7b63d3098613d">currentLogLevel</link>)
<anchor xml:id="_FsmOS_8cpp_source_1l01041"/>01041 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01042"/>01042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l01043"/>01043 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01044"/>01044 
<anchor xml:id="_FsmOS_8cpp_source_1l01045"/>01045 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*level_str&#32;=&#32;<emphasis role="stringliteral">&quot;DEBUG&quot;</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l01046"/>01046 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(level)
<anchor xml:id="_FsmOS_8cpp_source_1l01047"/>01047 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01048"/>01048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_classScheduler_1ab2bd6aa333e3f108343fedb022eaca79ac50a6d9344241d486cea80292b5ba327">LOG_INFO</link>:
<anchor xml:id="_FsmOS_8cpp_source_1l01049"/>01049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;level_str&#32;=&#32;<emphasis role="stringliteral">&quot;INFO&quot;</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l01050"/>01050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l01051"/>01051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_classScheduler_1ab2bd6aa333e3f108343fedb022eaca79a43ae65cd6d87b4c15b8ddb2e1a110286">LOG_WARN</link>:
<anchor xml:id="_FsmOS_8cpp_source_1l01052"/>01052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;level_str&#32;=&#32;<emphasis role="stringliteral">&quot;WARN&quot;</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l01053"/>01053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l01054"/>01054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_classScheduler_1ab2bd6aa333e3f108343fedb022eaca79aa56e45ee8b2ce204989dcede4bfa7805">LOG_ERROR</link>:
<anchor xml:id="_FsmOS_8cpp_source_1l01055"/>01055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;level_str&#32;=&#32;<emphasis role="stringliteral">&quot;ERROR&quot;</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l01056"/>01056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l01057"/>01057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
<anchor xml:id="_FsmOS_8cpp_source_1l01058"/>01058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l01059"/>01059 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01060"/>01060 
<anchor xml:id="_FsmOS_8cpp_source_1l01061"/>01061 &#32;&#32;&#32;&#32;Serial.print(F(<emphasis role="stringliteral">&quot;[&quot;</emphasis>));
<anchor xml:id="_FsmOS_8cpp_source_1l01062"/>01062 &#32;&#32;&#32;&#32;Serial.print(level_str);
<anchor xml:id="_FsmOS_8cpp_source_1l01063"/>01063 &#32;&#32;&#32;&#32;Serial.print(F(<emphasis role="stringliteral">&quot;]&#32;&quot;</emphasis>));
<anchor xml:id="_FsmOS_8cpp_source_1l01064"/>01064 
<anchor xml:id="_FsmOS_8cpp_source_1l01065"/>01065 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(task)
<anchor xml:id="_FsmOS_8cpp_source_1l01066"/>01066 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01067"/>01067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.print(F(<emphasis role="stringliteral">&quot;T&quot;</emphasis>));
<anchor xml:id="_FsmOS_8cpp_source_1l01068"/>01068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.print(task-&gt;<link linkend="_classTask_1a548d620b8f5d7490b8cdc235dbfdf6eb">getId</link>());
<anchor xml:id="_FsmOS_8cpp_source_1l01069"/>01069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Serial.print(F(<emphasis role="stringliteral">&quot;:&#32;&quot;</emphasis>));
<anchor xml:id="_FsmOS_8cpp_source_1l01070"/>01070 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01071"/>01071 
<anchor xml:id="_FsmOS_8cpp_source_1l01072"/>01072 &#32;&#32;&#32;&#32;Serial.println(msg);
<anchor xml:id="_FsmOS_8cpp_source_1l01073"/>01073 }
<anchor xml:id="_FsmOS_8cpp_source_1l01074"/>01074 
<anchor xml:id="_FsmOS_8cpp_source_1l01075"/><link linkend="_classScheduler_1aab0e31c53df15af0ffbcd97d0510c9a2">01075</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classScheduler_1aab0e31c53df15af0ffbcd97d0510c9a2">Scheduler::onTick</link>()&#32;{&#32;<link linkend="_classScheduler_1ac66364f021223ea49e76680b6dbcb56a">systemTime</link>++;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01076"/>01076 
<anchor xml:id="_FsmOS_8cpp_source_1l01077"/><link linkend="_classScheduler_1aef20dca5b8efdd71b4e91f91d5e0240f">01077</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classScheduler_1aef20dca5b8efdd71b4e91f91d5e0240f">Scheduler::processMessages</link>()
<anchor xml:id="_FsmOS_8cpp_source_1l01078"/>01078 {
<anchor xml:id="_FsmOS_8cpp_source_1l01079"/>01079 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<emphasis role="keyword">true</emphasis>)
<anchor xml:id="_FsmOS_8cpp_source_1l01080"/>01080 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01081"/>01081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Dequeue&#32;node&#32;to&#32;ensure&#32;we&#32;recycle&#32;only&#32;after&#32;handler&#32;finishes</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01082"/>01082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classScheduler_1a13367b7d53dc7bf804d9158e57bff5f7">msgCount</link>&#32;==&#32;0)
<anchor xml:id="_FsmOS_8cpp_source_1l01083"/>01083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01084"/>01084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l01085"/>01085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01086"/>01086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structScheduler_1_1MsgNode">MsgNode</link>&#32;*node&#32;=&#32;<link linkend="_classScheduler_1afc800a55be0f3da82ef2e79dad96496d">msgHead</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l01087"/>01087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classScheduler_1afc800a55be0f3da82ef2e79dad96496d">msgHead</link>&#32;=&#32;node-&gt;<link linkend="_structScheduler_1_1MsgNode_1a91702c9faa02b67ac24d3924be9fdaee">next</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l01088"/>01088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_classScheduler_1afc800a55be0f3da82ef2e79dad96496d">msgHead</link>)
<anchor xml:id="_FsmOS_8cpp_source_1l01089"/>01089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01090"/>01090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classScheduler_1a2503ab5f7acb13a3bd46f35036af3c02">msgTail</link>&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l01091"/>01091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01092"/>01092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classScheduler_1a13367b7d53dc7bf804d9158e57bff5f7">msgCount</link>--;
<anchor xml:id="_FsmOS_8cpp_source_1l01093"/>01093 
<anchor xml:id="_FsmOS_8cpp_source_1l01094"/>01094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structScheduler_1_1QueuedMessage">QueuedMessage</link>&#32;&amp;qm&#32;=&#32;node-&gt;<link linkend="_structScheduler_1_1MsgNode_1ab2623f2b15be317f6b54848af08ce97c">payload</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l01095"/>01095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classTask">Task</link>&#32;*target&#32;=&#32;<link linkend="_classScheduler_1aabf3840938cc797555cdee88f5d19dd2">getTask</link>(qm.<link linkend="_structScheduler_1_1QueuedMessage_1ab2d20d6197328866badf5e94f048255c">targetTaskId</link>);
<anchor xml:id="_FsmOS_8cpp_source_1l01096"/>01096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(target&#32;&amp;&amp;&#32;target-&gt;<link linkend="_classTask_1a14f40317936f729e291a81fcf4426466">isActive</link>())
<anchor xml:id="_FsmOS_8cpp_source_1l01097"/>01097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01098"/>01098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;target-&gt;<link linkend="_classTask_1a25e697fa851318504170fc4f3edf8308">on_msg</link>(qm.<link linkend="_structScheduler_1_1QueuedMessage_1a4920af5804a48c59719261484553f169">msg</link>);
<anchor xml:id="_FsmOS_8cpp_source_1l01099"/>01099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01100"/>01100 
<anchor xml:id="_FsmOS_8cpp_source_1l01101"/>01101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Recycle&#32;node&#32;after&#32;handler&#32;returns;&#32;keep&#32;buffer&#32;for&#32;reuse</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01102"/>01102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node-&gt;<link linkend="_structScheduler_1_1MsgNode_1a91702c9faa02b67ac24d3924be9fdaee">next</link>&#32;=&#32;<link linkend="_classScheduler_1a59fa5a068cd9a36672b39362982c2e97">freeHead</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l01103"/>01103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classScheduler_1a59fa5a068cd9a36672b39362982c2e97">freeHead</link>&#32;=&#32;node;
<anchor xml:id="_FsmOS_8cpp_source_1l01104"/>01104 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01105"/>01105 }
<anchor xml:id="_FsmOS_8cpp_source_1l01106"/>01106 
<anchor xml:id="_FsmOS_8cpp_source_1l01107"/><link linkend="_classScheduler_1a0a80134fcc4380c2577a5281352847eb">01107</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classScheduler_1a0a80134fcc4380c2577a5281352847eb">Scheduler::updateSystemTime</link>()&#32;{&#32;<link linkend="_classScheduler_1ac66364f021223ea49e76680b6dbcb56a">systemTime</link>&#32;=&#32;millis();&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01108"/>01108 
<anchor xml:id="_FsmOS_8cpp_source_1l01109"/><link linkend="_classScheduler_1aafdaee288f465a178ef154e1fce57cf4">01109</link> <link linkend="_classTask">Task</link>&#32;*<link linkend="_classScheduler_1aafdaee288f465a178ef154e1fce57cf4">Scheduler::findNextTask</link>()
<anchor xml:id="_FsmOS_8cpp_source_1l01110"/>01110 {
<anchor xml:id="_FsmOS_8cpp_source_1l01111"/>01111 &#32;&#32;&#32;&#32;<link linkend="_classTask">Task</link>&#32;*nextTask&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l01112"/>01112 &#32;&#32;&#32;&#32;uint16_t&#32;shortestTime&#32;=&#32;UINT16_MAX;
<anchor xml:id="_FsmOS_8cpp_source_1l01113"/>01113 
<anchor xml:id="_FsmOS_8cpp_source_1l01114"/>01114 &#32;&#32;&#32;&#32;<link linkend="_structTaskNode">TaskNode</link>&#32;*current&#32;=&#32;<link linkend="_classScheduler_1a9eb682b2716a34e7c3eb742782aa42e2">taskHead</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l01115"/>01115 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(current&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>)
<anchor xml:id="_FsmOS_8cpp_source_1l01116"/>01116 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01117"/>01117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(current-&gt;<link linkend="_structTaskNode_1a04f109a440464fd95c18d0f3758ee0af">task</link>&#32;&amp;&amp;&#32;current-&gt;<link linkend="_structTaskNode_1a04f109a440464fd95c18d0f3758ee0af">task</link>-&gt;<link linkend="_classTask_1a14f40317936f729e291a81fcf4426466">isActive</link>()&#32;&amp;&amp;&#32;current-&gt;<link linkend="_structTaskNode_1a04f109a440464fd95c18d0f3758ee0af">task</link>-&gt;<link linkend="_classTask_1a69b0d2b2a7231d2e2a2880b7cca136e1">remainingTime</link>&#32;==&#32;0)
<anchor xml:id="_FsmOS_8cpp_source_1l01118"/>01118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01119"/>01119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;task&#32;declares&#32;a&#32;message&#32;production&#32;budget,&#32;ensure&#32;enough&#32;free&#32;queue&#32;slots</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01120"/>01120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint8_t&#32;budget&#32;=&#32;current-&gt;<link linkend="_structTaskNode_1a04f109a440464fd95c18d0f3758ee0af">task</link>-&gt;<link linkend="_group__fsmos_1gadf715a30a3759bfd0856f12cfdf29d0e">getMaxMessageBudget</link>();
<anchor xml:id="_FsmOS_8cpp_source_1l01121"/>01121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Only&#32;use&#32;default&#32;if&#32;task&#32;hasn&apos;t&#32;explicitly&#32;set&#32;a&#32;budget&#32;(inherited&#32;default)</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01122"/>01122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(budget&#32;==&#32;<link linkend="_group__fsmos_1ga5c3f1eb0aa79f56d91fdbf8fd9f1b911">DEFAULT_TASK_MESSAGE_BUDGET</link>)
<anchor xml:id="_FsmOS_8cpp_source_1l01123"/>01123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01124"/>01124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Task&#32;is&#32;using&#32;the&#32;default,&#32;which&#32;is&#32;fine</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01125"/>01125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01126"/>01126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;budget&#32;is&#32;0,&#32;task&#32;explicitly&#32;wants&#32;no&#32;message&#32;production</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01127"/>01127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;budget&#32;&gt;&#32;0,&#32;task&#32;has&#32;explicit&#32;budget</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01128"/>01128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;In&#32;both&#32;cases,&#32;respect&#32;the&#32;task&apos;s&#32;decision</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01129"/>01129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classScheduler_1a86ddccd30b5b2af61d3cb76d53ca1b4b">getFreeQueueSlots</link>()&#32;&lt;&#32;budget)
<anchor xml:id="_FsmOS_8cpp_source_1l01130"/>01130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01131"/>01131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Skip&#32;this&#32;task&#32;for&#32;now;&#32;not&#32;enough&#32;capacity&#32;to&#32;accept&#32;its&#32;messages</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01132"/>01132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01133"/>01133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(nextTask&#32;==&#32;<emphasis role="keyword">nullptr</emphasis>)
<anchor xml:id="_FsmOS_8cpp_source_1l01134"/>01134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01135"/>01135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nextTask&#32;=&#32;current-&gt;<link linkend="_structTaskNode_1a04f109a440464fd95c18d0f3758ee0af">task</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l01136"/>01136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01137"/>01137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(current-&gt;<link linkend="_structTaskNode_1a04f109a440464fd95c18d0f3758ee0af">task</link>-&gt;<link linkend="_classTask_1aef8cf69a9b677977003d8b72d66d36d8">getPriority</link>()&#32;&gt;&#32;nextTask-&gt;<link linkend="_classTask_1aef8cf69a9b677977003d8b72d66d36d8">getPriority</link>())
<anchor xml:id="_FsmOS_8cpp_source_1l01138"/>01138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01139"/>01139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Higher&#32;enum&#32;value&#32;wins&#32;(PRIORITY_SYSTEM=7&#32;&gt;&#32;PRIORITY_LOWEST=0)</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01140"/>01140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nextTask&#32;=&#32;current-&gt;<link linkend="_structTaskNode_1a04f109a440464fd95c18d0f3758ee0af">task</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l01141"/>01141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01142"/>01142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(current-&gt;<link linkend="_structTaskNode_1a04f109a440464fd95c18d0f3758ee0af">task</link>-&gt;<link linkend="_classTask_1aef8cf69a9b677977003d8b72d66d36d8">getPriority</link>()&#32;==&#32;nextTask-&gt;<link linkend="_classTask_1aef8cf69a9b677977003d8b72d66d36d8">getPriority</link>())
<anchor xml:id="_FsmOS_8cpp_source_1l01143"/>01143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01144"/>01144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Same&#32;priority,&#32;smaller&#32;task&#32;ID&#32;wins</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01145"/>01145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(current-&gt;<link linkend="_structTaskNode_1a04f109a440464fd95c18d0f3758ee0af">task</link>-&gt;<link linkend="_classTask_1a548d620b8f5d7490b8cdc235dbfdf6eb">getId</link>()&#32;&lt;&#32;nextTask-&gt;<link linkend="_classTask_1a548d620b8f5d7490b8cdc235dbfdf6eb">getId</link>())
<anchor xml:id="_FsmOS_8cpp_source_1l01146"/>01146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01147"/>01147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nextTask&#32;=&#32;current-&gt;<link linkend="_structTaskNode_1a04f109a440464fd95c18d0f3758ee0af">task</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l01148"/>01148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01149"/>01149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01150"/>01150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01151"/>01151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(current-&gt;<link linkend="_structTaskNode_1a04f109a440464fd95c18d0f3758ee0af">task</link>&#32;&amp;&amp;&#32;current-&gt;<link linkend="_structTaskNode_1a04f109a440464fd95c18d0f3758ee0af">task</link>-&gt;<link linkend="_classTask_1a14f40317936f729e291a81fcf4426466">isActive</link>()&#32;&amp;&amp;&#32;current-&gt;<link linkend="_structTaskNode_1a04f109a440464fd95c18d0f3758ee0af">task</link>-&gt;<link linkend="_classTask_1a69b0d2b2a7231d2e2a2880b7cca136e1">remainingTime</link>&#32;&lt;&#32;shortestTime)
<anchor xml:id="_FsmOS_8cpp_source_1l01152"/>01152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01153"/>01153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shortestTime&#32;=&#32;current-&gt;<link linkend="_structTaskNode_1a04f109a440464fd95c18d0f3758ee0af">task</link>-&gt;<link linkend="_classTask_1a69b0d2b2a7231d2e2a2880b7cca136e1">remainingTime</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l01154"/>01154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01155"/>01155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;current&#32;=&#32;current-&gt;<link linkend="_structTaskNode_1af6f74dbb5d2baa80d10dabc43b593ffd">next</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l01156"/>01156 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01157"/>01157 
<anchor xml:id="_FsmOS_8cpp_source_1l01158"/>01158 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;nextTask;
<anchor xml:id="_FsmOS_8cpp_source_1l01159"/>01159 }
<anchor xml:id="_FsmOS_8cpp_source_1l01160"/>01160 
<anchor xml:id="_FsmOS_8cpp_source_1l01161"/><link linkend="_classScheduler_1a42e220f60192016791fa56855fcc8e46">01161</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classScheduler_1a42e220f60192016791fa56855fcc8e46">Scheduler::executeTask</link>(<link linkend="_classTask">Task</link>&#32;*task)
<anchor xml:id="_FsmOS_8cpp_source_1l01162"/>01162 {
<anchor xml:id="_FsmOS_8cpp_source_1l01163"/>01163 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!task&#32;||&#32;!task-&gt;<link linkend="_classTask_1a14f40317936f729e291a81fcf4426466">isActive</link>())
<anchor xml:id="_FsmOS_8cpp_source_1l01164"/>01164 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01165"/>01165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l01166"/>01166 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01167"/>01167 
<anchor xml:id="_FsmOS_8cpp_source_1l01168"/>01168 &#32;&#32;&#32;&#32;uint32_t&#32;execStart&#32;=&#32;micros();
<anchor xml:id="_FsmOS_8cpp_source_1l01169"/>01169 &#32;&#32;&#32;&#32;uint32_t&#32;currentTime&#32;=&#32;<link linkend="_classScheduler_1ac66364f021223ea49e76680b6dbcb56a">systemTime</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l01170"/>01170 
<anchor xml:id="_FsmOS_8cpp_source_1l01171"/>01171 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Handle&#32;task&#32;timing&#32;monitoring</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01172"/>01172 &#32;&#32;&#32;&#32;<link linkend="_classScheduler_1a22a32d58cf6898fff48880c5349c115f">handleTaskTiming</link>(task,&#32;currentTime);
<anchor xml:id="_FsmOS_8cpp_source_1l01173"/>01173 
<anchor xml:id="_FsmOS_8cpp_source_1l01174"/>01174 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Execute&#32;the&#32;actual&#32;task&#32;step</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01175"/>01175 &#32;&#32;&#32;&#32;<link linkend="_classScheduler_1a74551b047dfdd1675e53de6d1fc53ac7">executeTaskStep</link>(task);
<anchor xml:id="_FsmOS_8cpp_source_1l01176"/>01176 
<anchor xml:id="_FsmOS_8cpp_source_1l01177"/>01177 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Update&#32;task&#32;execution&#32;statistics</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01178"/>01178 &#32;&#32;&#32;&#32;<link linkend="_classScheduler_1a23437fce9b79f76f4534c402e832d4f5">updateTaskStatistics</link>(task,&#32;execStart);
<anchor xml:id="_FsmOS_8cpp_source_1l01179"/>01179 
<anchor xml:id="_FsmOS_8cpp_source_1l01180"/>01180 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Update&#32;timing&#32;monitoring&#32;variables</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01181"/>01181 &#32;&#32;&#32;&#32;<link linkend="_classScheduler_1a6ee466fc5e47301d6101c246c691c131">updateTimingVariables</link>(task);
<anchor xml:id="_FsmOS_8cpp_source_1l01182"/>01182 
<anchor xml:id="_FsmOS_8cpp_source_1l01183"/>01183 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;for&#32;terminated&#32;tasks</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01184"/>01184 &#32;&#32;&#32;&#32;<link linkend="_classScheduler_1af423092ed6af17160b11a8fab79c2eab">checkForTerminatedTask</link>(task);
<anchor xml:id="_FsmOS_8cpp_source_1l01185"/>01185 }
<anchor xml:id="_FsmOS_8cpp_source_1l01186"/>01186 
<anchor xml:id="_FsmOS_8cpp_source_1l01187"/>01187 <emphasis role="comment">//&#32;Refactored&#32;helper&#32;methods&#32;for&#32;executeTask</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01188"/><link linkend="_classScheduler_1a22a32d58cf6898fff48880c5349c115f">01188</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classScheduler_1a22a32d58cf6898fff48880c5349c115f">Scheduler::handleTaskTiming</link>(<link linkend="_classTask">Task</link>&#32;*task,&#32;uint32_t&#32;currentTime)
<anchor xml:id="_FsmOS_8cpp_source_1l01189"/>01189 {
<anchor xml:id="_FsmOS_8cpp_source_1l01190"/>01190 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Set&#32;scheduled&#32;time&#32;(when&#32;task&#32;should&#32;have&#32;started)</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01191"/>01191 &#32;&#32;&#32;&#32;task-&gt;<link linkend="_classTask_1ac78a2eb92ac06324535259def5fe2d43">scheduledTime</link>&#32;=&#32;currentTime&#32;-&#32;task-&gt;<link linkend="_classTask_1aa096c58dddc4fb8f7f8d5f40e1815d2d">getPeriod</link>();
<anchor xml:id="_FsmOS_8cpp_source_1l01192"/>01192 &#32;&#32;&#32;&#32;task-&gt;<link linkend="_classTask_1aba00d925c610ebb6ffce38ce7d550b33">actualStartTime</link>&#32;=&#32;currentTime;
<anchor xml:id="_FsmOS_8cpp_source_1l01193"/>01193 
<anchor xml:id="_FsmOS_8cpp_source_1l01194"/>01194 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;for&#32;delay</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01195"/>01195 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(task-&gt;<link linkend="_classTask_1aba00d925c610ebb6ffce38ce7d550b33">actualStartTime</link>&#32;&gt;&#32;task-&gt;<link linkend="_classTask_1ac78a2eb92ac06324535259def5fe2d43">scheduledTime</link>)
<anchor xml:id="_FsmOS_8cpp_source_1l01196"/>01196 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01197"/>01197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint32_t&#32;delay&#32;=&#32;task-&gt;<link linkend="_classTask_1aba00d925c610ebb6ffce38ce7d550b33">actualStartTime</link>&#32;-&#32;task-&gt;<link linkend="_classTask_1ac78a2eb92ac06324535259def5fe2d43">scheduledTime</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l01198"/>01198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint16_t&#32;delayMs&#32;=&#32;(delay&#32;&gt;&#32;65535)&#32;?&#32;65535&#32;:&#32;<emphasis role="keyword">static_cast&lt;</emphasis>uint16_t<emphasis role="keyword">&gt;</emphasis>(delay);
<anchor xml:id="_FsmOS_8cpp_source_1l01199"/>01199 
<anchor xml:id="_FsmOS_8cpp_source_1l01200"/>01200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Update&#32;delay&#32;statistics</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01201"/>01201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;task-&gt;<link linkend="_classTask_1aaf791abc71bca2ca62d29d2e155dc82c">delayCount</link>++;
<anchor xml:id="_FsmOS_8cpp_source_1l01202"/>01202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(delayMs&#32;&gt;&#32;task-&gt;<link linkend="_classTask_1a82389ea58680f2ce8a0ffada921c3b6c">maxDelayMs</link>)
<anchor xml:id="_FsmOS_8cpp_source_1l01203"/>01203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01204"/>01204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;task-&gt;<link linkend="_classTask_1a82389ea58680f2ce8a0ffada921c3b6c">maxDelayMs</link>&#32;=&#32;delayMs;
<anchor xml:id="_FsmOS_8cpp_source_1l01205"/>01205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01206"/>01206 
<anchor xml:id="_FsmOS_8cpp_source_1l01207"/>01207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Log&#32;delay&#32;with&#32;attribution</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01208"/>01208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classScheduler_1a40371a166759f310c2223ef082526829">logTaskDelay</link>(task,&#32;delayMs,&#32;<link linkend="_classScheduler_1ac44741f6b01d7d8f914851b72f538617">lastExecutedTaskId</link>);
<anchor xml:id="_FsmOS_8cpp_source_1l01209"/>01209 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01210"/>01210 }
<anchor xml:id="_FsmOS_8cpp_source_1l01211"/>01211 
<anchor xml:id="_FsmOS_8cpp_source_1l01212"/><link linkend="_classScheduler_1a74551b047dfdd1675e53de6d1fc53ac7">01212</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classScheduler_1a74551b047dfdd1675e53de6d1fc53ac7">Scheduler::executeTaskStep</link>(<link linkend="_classTask">Task</link>&#32;*task)
<anchor xml:id="_FsmOS_8cpp_source_1l01213"/>01213 {
<anchor xml:id="_FsmOS_8cpp_source_1l01214"/>01214 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Reset&#32;remaining&#32;time&#32;for&#32;next&#32;execution</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01215"/>01215 &#32;&#32;&#32;&#32;task-&gt;<link linkend="_classTask_1a69b0d2b2a7231d2e2a2880b7cca136e1">remainingTime</link>&#32;=&#32;task-&gt;<link linkend="_classTask_1aa096c58dddc4fb8f7f8d5f40e1815d2d">getPeriod</link>();
<anchor xml:id="_FsmOS_8cpp_source_1l01216"/>01216 
<anchor xml:id="_FsmOS_8cpp_source_1l01217"/>01217 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Execute&#32;task&#32;step</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01218"/>01218 &#32;&#32;&#32;&#32;task-&gt;<link linkend="_classTask_1a399ff82ffe4b94a11cd8148987e38622">step</link>();
<anchor xml:id="_FsmOS_8cpp_source_1l01219"/>01219 }
<anchor xml:id="_FsmOS_8cpp_source_1l01220"/>01220 
<anchor xml:id="_FsmOS_8cpp_source_1l01221"/><link linkend="_classScheduler_1a23437fce9b79f76f4534c402e832d4f5">01221</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classScheduler_1a23437fce9b79f76f4534c402e832d4f5">Scheduler::updateTaskStatistics</link>(<link linkend="_classTask">Task</link>&#32;*task,&#32;uint32_t&#32;execStart)
<anchor xml:id="_FsmOS_8cpp_source_1l01222"/>01222 {
<anchor xml:id="_FsmOS_8cpp_source_1l01223"/>01223 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Calculate&#32;execution&#32;time</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01224"/>01224 &#32;&#32;&#32;&#32;uint32_t&#32;execTime&#32;=&#32;micros()&#32;-&#32;execStart;
<anchor xml:id="_FsmOS_8cpp_source_1l01225"/>01225 &#32;&#32;&#32;&#32;uint16_t&#32;execTime16&#32;=&#32;(execTime&#32;&gt;&#32;65535)&#32;?&#32;65535&#32;:&#32;<emphasis role="keyword">static_cast&lt;</emphasis>uint16_t<emphasis role="keyword">&gt;</emphasis>(execTime);
<anchor xml:id="_FsmOS_8cpp_source_1l01226"/>01226 
<anchor xml:id="_FsmOS_8cpp_source_1l01227"/>01227 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Update&#32;run&#32;count</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01228"/>01228 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(task-&gt;<link linkend="_classTask_1a48485325ce407372474c73982690a0cc">runCount</link>&#32;&lt;&#32;65535)
<anchor xml:id="_FsmOS_8cpp_source_1l01229"/>01229 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01230"/>01230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;task-&gt;<link linkend="_classTask_1a48485325ce407372474c73982690a0cc">runCount</link>++;
<anchor xml:id="_FsmOS_8cpp_source_1l01231"/>01231 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01232"/>01232 
<anchor xml:id="_FsmOS_8cpp_source_1l01233"/>01233 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Update&#32;max&#32;execution&#32;time</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01234"/>01234 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(execTime16&#32;&gt;&#32;task-&gt;<link linkend="_classTask_1ad464cac8faf232328c59600a70bfa11c">maxExecTimeUs</link>)
<anchor xml:id="_FsmOS_8cpp_source_1l01235"/>01235 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01236"/>01236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;task-&gt;<link linkend="_classTask_1ad464cac8faf232328c59600a70bfa11c">maxExecTimeUs</link>&#32;=&#32;execTime16;
<anchor xml:id="_FsmOS_8cpp_source_1l01237"/>01237 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01238"/>01238 
<anchor xml:id="_FsmOS_8cpp_source_1l01239"/>01239 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Update&#32;average&#32;execution&#32;time</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01240"/>01240 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(task-&gt;<link linkend="_classTask_1a48485325ce407372474c73982690a0cc">runCount</link>&#32;==&#32;1)
<anchor xml:id="_FsmOS_8cpp_source_1l01241"/>01241 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01242"/>01242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;task-&gt;<link linkend="_classTask_1a54935dc05e1ff8ba284d18b84a057ac6">avgExecTimeUs</link>&#32;=&#32;execTime16;
<anchor xml:id="_FsmOS_8cpp_source_1l01243"/>01243 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01244"/>01244 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(task-&gt;<link linkend="_classTask_1a48485325ce407372474c73982690a0cc">runCount</link>&#32;==&#32;65535)
<anchor xml:id="_FsmOS_8cpp_source_1l01245"/>01245 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01246"/>01246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Exponential&#32;moving&#32;average&#32;to&#32;avoid&#32;overflow</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01247"/>01247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint32_t&#32;diff&#32;=&#32;execTime16&#32;-&#32;task-&gt;<link linkend="_classTask_1a54935dc05e1ff8ba284d18b84a057ac6">avgExecTimeUs</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l01248"/>01248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;int32_t&#32;adjustment&#32;=&#32;diff&#32;/&#32;1000;&#32;&#32;<emphasis role="comment">//&#32;Slow&#32;adaptation</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01249"/>01249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;int32_t&#32;newAvg&#32;=&#32;task-&gt;<link linkend="_classTask_1a54935dc05e1ff8ba284d18b84a057ac6">avgExecTimeUs</link>&#32;+&#32;adjustment;
<anchor xml:id="_FsmOS_8cpp_source_1l01250"/>01250 
<anchor xml:id="_FsmOS_8cpp_source_1l01251"/>01251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Clamp&#32;to&#32;valid&#32;range</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01252"/>01252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(newAvg&#32;&lt;&#32;0)
<anchor xml:id="_FsmOS_8cpp_source_1l01253"/>01253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01254"/>01254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;newAvg&#32;=&#32;0;
<anchor xml:id="_FsmOS_8cpp_source_1l01255"/>01255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01256"/>01256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(newAvg&#32;&gt;&#32;65535)
<anchor xml:id="_FsmOS_8cpp_source_1l01257"/>01257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01258"/>01258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;newAvg&#32;=&#32;65535;
<anchor xml:id="_FsmOS_8cpp_source_1l01259"/>01259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01260"/>01260 
<anchor xml:id="_FsmOS_8cpp_source_1l01261"/>01261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;task-&gt;<link linkend="_classTask_1a54935dc05e1ff8ba284d18b84a057ac6">avgExecTimeUs</link>&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>uint16_t<emphasis role="keyword">&gt;</emphasis>(newAvg);
<anchor xml:id="_FsmOS_8cpp_source_1l01262"/>01262 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01263"/>01263 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01264"/>01264 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01265"/>01265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Simple&#32;moving&#32;average</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01266"/>01266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint32_t&#32;newAvg&#32;=&#32;((uint32_t)task-&gt;<link linkend="_classTask_1a54935dc05e1ff8ba284d18b84a057ac6">avgExecTimeUs</link>&#32;*&#32;(task-&gt;<link linkend="_classTask_1a48485325ce407372474c73982690a0cc">runCount</link>&#32;-&#32;1)&#32;+&#32;execTime16)&#32;/&#32;task-&gt;<link linkend="_classTask_1a48485325ce407372474c73982690a0cc">runCount</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l01267"/>01267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;task-&gt;<link linkend="_classTask_1a54935dc05e1ff8ba284d18b84a057ac6">avgExecTimeUs</link>&#32;=&#32;(newAvg&#32;&gt;&#32;65535)&#32;?&#32;65535&#32;:&#32;<emphasis role="keyword">static_cast&lt;</emphasis>uint16_t<emphasis role="keyword">&gt;</emphasis>(newAvg);
<anchor xml:id="_FsmOS_8cpp_source_1l01268"/>01268 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01269"/>01269 }
<anchor xml:id="_FsmOS_8cpp_source_1l01270"/>01270 
<anchor xml:id="_FsmOS_8cpp_source_1l01271"/><link linkend="_classScheduler_1a6ee466fc5e47301d6101c246c691c131">01271</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classScheduler_1a6ee466fc5e47301d6101c246c691c131">Scheduler::updateTimingVariables</link>(<link linkend="_classTask">Task</link>&#32;*task)
<anchor xml:id="_FsmOS_8cpp_source_1l01272"/>01272 {
<anchor xml:id="_FsmOS_8cpp_source_1l01273"/>01273 &#32;&#32;&#32;&#32;<link linkend="_classScheduler_1ac44741f6b01d7d8f914851b72f538617">lastExecutedTaskId</link>&#32;=&#32;task-&gt;<link linkend="_classTask_1a548d620b8f5d7490b8cdc235dbfdf6eb">getId</link>();
<anchor xml:id="_FsmOS_8cpp_source_1l01274"/>01274 &#32;&#32;&#32;&#32;<link linkend="_classScheduler_1a4e2da8da4d0ca8ce7da09e92fcc04ffc">lastTaskEndTime</link>&#32;=&#32;<link linkend="_classScheduler_1ac66364f021223ea49e76680b6dbcb56a">systemTime</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l01275"/>01275 }
<anchor xml:id="_FsmOS_8cpp_source_1l01276"/>01276 
<anchor xml:id="_FsmOS_8cpp_source_1l01277"/><link linkend="_classScheduler_1af423092ed6af17160b11a8fab79c2eab">01277</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classScheduler_1af423092ed6af17160b11a8fab79c2eab">Scheduler::checkForTerminatedTask</link>(<link linkend="_classTask">Task</link>&#32;*task)
<anchor xml:id="_FsmOS_8cpp_source_1l01278"/>01278 {
<anchor xml:id="_FsmOS_8cpp_source_1l01279"/>01279 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(task-&gt;<link linkend="_classTask_1acccd11864edfa1abbb15ff43008a17ec">getState</link>()&#32;==&#32;<link linkend="_classTask_1afa88d99eb2a58c8f078a53f1195c53a8a7a6d8686d5e5ecffdf01fdd137d7713e">Task::TERMINATED</link>)
<anchor xml:id="_FsmOS_8cpp_source_1l01280"/>01280 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01281"/>01281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classScheduler_1a303a5bd8d44b55803e6da7b4108401c2">remove</link>(task);
<anchor xml:id="_FsmOS_8cpp_source_1l01282"/>01282 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01283"/>01283 }
<anchor xml:id="_FsmOS_8cpp_source_1l01284"/>01284 
<anchor xml:id="_FsmOS_8cpp_source_1l01285"/><link linkend="_classScheduler_1a40371a166759f310c2223ef082526829">01285</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classScheduler_1a40371a166759f310c2223ef082526829">Scheduler::logTaskDelay</link>(<link linkend="_classTask">Task</link>&#32;*task,&#32;uint16_t&#32;delayMs,&#32;uint8_t&#32;causingTaskId)
<anchor xml:id="_FsmOS_8cpp_source_1l01286"/>01286 {
<anchor xml:id="_FsmOS_8cpp_source_1l01287"/>01287 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Task&#32;delay&#32;logging&#32;disabled&#32;to&#32;save&#32;ROM</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01288"/>01288 &#32;&#32;&#32;&#32;(void)task;
<anchor xml:id="_FsmOS_8cpp_source_1l01289"/>01289 &#32;&#32;&#32;&#32;(void)delayMs;
<anchor xml:id="_FsmOS_8cpp_source_1l01290"/>01290 &#32;&#32;&#32;&#32;(void)causingTaskId;
<anchor xml:id="_FsmOS_8cpp_source_1l01291"/>01291 }
<anchor xml:id="_FsmOS_8cpp_source_1l01292"/>01292 
<anchor xml:id="_FsmOS_8cpp_source_1l01293"/>01293 <emphasis role="comment">//&#32;Task&#32;iteration&#32;template&#32;methods</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01294"/>01294 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;Func&gt;
<anchor xml:id="_FsmOS_8cpp_source_1l01295"/><link linkend="_classScheduler_1a3c9f6290c6ae7231b96c9ba6da36382b">01295</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classScheduler_1a3c9f6290c6ae7231b96c9ba6da36382b">Scheduler::forEachTask</link>(Func&#32;func)
<anchor xml:id="_FsmOS_8cpp_source_1l01296"/>01296 {
<anchor xml:id="_FsmOS_8cpp_source_1l01297"/>01297 &#32;&#32;&#32;&#32;<link linkend="_structTaskNode">TaskNode</link>&#32;*current&#32;=&#32;<link linkend="_classScheduler_1a9eb682b2716a34e7c3eb742782aa42e2">taskHead</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l01298"/>01298 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(current&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>)
<anchor xml:id="_FsmOS_8cpp_source_1l01299"/>01299 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01300"/>01300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(current-&gt;<link linkend="_structTaskNode_1a04f109a440464fd95c18d0f3758ee0af">task</link>)
<anchor xml:id="_FsmOS_8cpp_source_1l01301"/>01301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01302"/>01302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;func(current-&gt;<link linkend="_structTaskNode_1a04f109a440464fd95c18d0f3758ee0af">task</link>);
<anchor xml:id="_FsmOS_8cpp_source_1l01303"/>01303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01304"/>01304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;current&#32;=&#32;current-&gt;<link linkend="_structTaskNode_1af6f74dbb5d2baa80d10dabc43b593ffd">next</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l01305"/>01305 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01306"/>01306 }
<anchor xml:id="_FsmOS_8cpp_source_1l01307"/>01307 
<anchor xml:id="_FsmOS_8cpp_source_1l01308"/>01308 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;Func&gt;
<anchor xml:id="_FsmOS_8cpp_source_1l01309"/><link linkend="_classScheduler_1ad2b77c7b7e929aad03ce0034f992d876">01309</link> <link linkend="_classTask">Task</link>&#32;*<link linkend="_classScheduler_1ad2b77c7b7e929aad03ce0034f992d876">Scheduler::findTask</link>(Func&#32;predicate)
<anchor xml:id="_FsmOS_8cpp_source_1l01310"/>01310 {
<anchor xml:id="_FsmOS_8cpp_source_1l01311"/>01311 &#32;&#32;&#32;&#32;<link linkend="_structTaskNode">TaskNode</link>&#32;*current&#32;=&#32;<link linkend="_classScheduler_1a9eb682b2716a34e7c3eb742782aa42e2">taskHead</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l01312"/>01312 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(current&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>)
<anchor xml:id="_FsmOS_8cpp_source_1l01313"/>01313 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01314"/>01314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(current-&gt;<link linkend="_structTaskNode_1a04f109a440464fd95c18d0f3758ee0af">task</link>&#32;&amp;&amp;&#32;predicate(current-&gt;<link linkend="_structTaskNode_1a04f109a440464fd95c18d0f3758ee0af">task</link>))
<anchor xml:id="_FsmOS_8cpp_source_1l01315"/>01315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01316"/>01316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;current-&gt;<link linkend="_structTaskNode_1a04f109a440464fd95c18d0f3758ee0af">task</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l01317"/>01317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01318"/>01318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;current&#32;=&#32;current-&gt;<link linkend="_structTaskNode_1af6f74dbb5d2baa80d10dabc43b593ffd">next</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l01319"/>01319 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01320"/>01320 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l01321"/>01321 }
<anchor xml:id="_FsmOS_8cpp_source_1l01322"/>01322 
<anchor xml:id="_FsmOS_8cpp_source_1l01323"/>01323 <emphasis role="comment">//&#32;Explicit&#32;template&#32;instantiations&#32;for&#32;common&#32;use&#32;cases</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01324"/>01324 <emphasis role="keyword">template</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;Scheduler::forEachTask&lt;void(*)(Task&#32;*)&gt;(<emphasis role="keywordtype">void</emphasis>(*)(<link linkend="_classTask">Task</link>&#32;*));
<anchor xml:id="_FsmOS_8cpp_source_1l01325"/>01325 <emphasis role="keyword">template</emphasis>&#32;<link linkend="_classTask">Task</link>&#32;*Scheduler::findTask&lt;bool(*)(Task&#32;*)&gt;(<emphasis role="keywordtype">bool</emphasis>(*)(<link linkend="_classTask">Task</link>&#32;*));
<anchor xml:id="_FsmOS_8cpp_source_1l01326"/>01326 
<anchor xml:id="_FsmOS_8cpp_source_1l01327"/>01327 <emphasis role="comment">//&#32;Memory&#32;management&#32;helpers</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01328"/><link linkend="_classScheduler_1a38cf4a79d14bd68514a26946b19d3d53">01328</link> <link linkend="_structTaskNode">TaskNode</link>&#32;*<link linkend="_classScheduler_1a38cf4a79d14bd68514a26946b19d3d53">Scheduler::allocateTaskNode</link>(<link linkend="_classTask">Task</link>&#32;*task)
<anchor xml:id="_FsmOS_8cpp_source_1l01329"/>01329 {
<anchor xml:id="_FsmOS_8cpp_source_1l01330"/>01330 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_classScheduler_1a6f21f46d36e9c56a43fadfa6cc32aad7">taskNodePoolInitialized</link>&#32;&amp;&amp;&#32;!<link linkend="_classScheduler_1aaa8cc86207802e4a457202396b2f7441">initializeTaskNodePool</link>())
<anchor xml:id="_FsmOS_8cpp_source_1l01331"/>01331 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01332"/>01332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l01333"/>01333 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01334"/>01334 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_classScheduler_1ae4384c1ec8e5ef486776d6dc255a501a">freeTaskNodeHead</link>)
<anchor xml:id="_FsmOS_8cpp_source_1l01335"/>01335 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01336"/>01336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Try&#32;to&#32;expand&#32;by&#32;one</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01337"/>01337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structTaskNode">TaskNode</link>&#32;*node&#32;=&#32;(<link linkend="_structTaskNode">TaskNode</link>&#32;*)malloc(<emphasis role="keyword">sizeof</emphasis>(<link linkend="_structTaskNode">TaskNode</link>));
<anchor xml:id="_FsmOS_8cpp_source_1l01338"/>01338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!node)
<anchor xml:id="_FsmOS_8cpp_source_1l01339"/>01339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01340"/>01340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l01341"/>01341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01342"/>01342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node-&gt;<link linkend="_structTaskNode_1a04f109a440464fd95c18d0f3758ee0af">task</link>&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l01343"/>01343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node-&gt;<link linkend="_structTaskNode_1af6f74dbb5d2baa80d10dabc43b593ffd">next</link>&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l01344"/>01344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classScheduler_1ae4384c1ec8e5ef486776d6dc255a501a">freeTaskNodeHead</link>&#32;=&#32;node;
<anchor xml:id="_FsmOS_8cpp_source_1l01345"/>01345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classScheduler_1a72d0e1044f04173955e8783b8c1c9bb0">taskNodePoolCapacity</link>++;
<anchor xml:id="_FsmOS_8cpp_source_1l01346"/>01346 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01347"/>01347 &#32;&#32;&#32;&#32;<link linkend="_structTaskNode">TaskNode</link>&#32;*node&#32;=&#32;<link linkend="_classScheduler_1ae4384c1ec8e5ef486776d6dc255a501a">freeTaskNodeHead</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l01348"/>01348 &#32;&#32;&#32;&#32;<link linkend="_classScheduler_1ae4384c1ec8e5ef486776d6dc255a501a">freeTaskNodeHead</link>&#32;=&#32;<link linkend="_classScheduler_1ae4384c1ec8e5ef486776d6dc255a501a">freeTaskNodeHead</link>-&gt;<link linkend="_structTaskNode_1af6f74dbb5d2baa80d10dabc43b593ffd">next</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l01349"/>01349 &#32;&#32;&#32;&#32;node-&gt;<link linkend="_structTaskNode_1a04f109a440464fd95c18d0f3758ee0af">task</link>&#32;=&#32;task;
<anchor xml:id="_FsmOS_8cpp_source_1l01350"/>01350 &#32;&#32;&#32;&#32;node-&gt;<link linkend="_structTaskNode_1af6f74dbb5d2baa80d10dabc43b593ffd">next</link>&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l01351"/>01351 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;node;
<anchor xml:id="_FsmOS_8cpp_source_1l01352"/>01352 }
<anchor xml:id="_FsmOS_8cpp_source_1l01353"/>01353 
<anchor xml:id="_FsmOS_8cpp_source_1l01354"/><link linkend="_classScheduler_1a419ac926b5685ea804fe7eae086066e3">01354</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classScheduler_1a419ac926b5685ea804fe7eae086066e3">Scheduler::deallocateTaskNode</link>(<link linkend="_structTaskNode">TaskNode</link>&#32;*node)
<anchor xml:id="_FsmOS_8cpp_source_1l01355"/>01355 {
<anchor xml:id="_FsmOS_8cpp_source_1l01356"/>01356 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!node)
<anchor xml:id="_FsmOS_8cpp_source_1l01357"/>01357 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01358"/>01358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l01359"/>01359 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01360"/>01360 &#32;&#32;&#32;&#32;node-&gt;<link linkend="_structTaskNode_1a04f109a440464fd95c18d0f3758ee0af">task</link>&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l01361"/>01361 &#32;&#32;&#32;&#32;node-&gt;<link linkend="_structTaskNode_1af6f74dbb5d2baa80d10dabc43b593ffd">next</link>&#32;=&#32;<link linkend="_classScheduler_1ae4384c1ec8e5ef486776d6dc255a501a">freeTaskNodeHead</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l01362"/>01362 &#32;&#32;&#32;&#32;<link linkend="_classScheduler_1ae4384c1ec8e5ef486776d6dc255a501a">freeTaskNodeHead</link>&#32;=&#32;node;
<anchor xml:id="_FsmOS_8cpp_source_1l01363"/>01363 }
<anchor xml:id="_FsmOS_8cpp_source_1l01364"/>01364 
<anchor xml:id="_FsmOS_8cpp_source_1l01365"/><link linkend="_classScheduler_1a45b70d5aed26ed5bf7c4d99d9df12966">01365</link> <link linkend="_structScheduler_1_1MsgNode">Scheduler::MsgNode</link>&#32;*<link linkend="_classScheduler_1a45b70d5aed26ed5bf7c4d99d9df12966">Scheduler::allocateMsgNode</link>()
<anchor xml:id="_FsmOS_8cpp_source_1l01366"/>01366 {
<anchor xml:id="_FsmOS_8cpp_source_1l01367"/>01367 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_classScheduler_1a59fa5a068cd9a36672b39362982c2e97">freeHead</link>)
<anchor xml:id="_FsmOS_8cpp_source_1l01368"/>01368 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01369"/>01369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_classScheduler_1ad767f69dc7aab8c8bd0f15720693d1c2">allocateMsgNodesChunk</link>())
<anchor xml:id="_FsmOS_8cpp_source_1l01370"/>01370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01371"/>01371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l01372"/>01372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01373"/>01373 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01374"/>01374 
<anchor xml:id="_FsmOS_8cpp_source_1l01375"/>01375 &#32;&#32;&#32;&#32;<link linkend="_structScheduler_1_1MsgNode">MsgNode</link>&#32;*node&#32;=&#32;<link linkend="_classScheduler_1a59fa5a068cd9a36672b39362982c2e97">freeHead</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l01376"/>01376 &#32;&#32;&#32;&#32;<link linkend="_classScheduler_1a59fa5a068cd9a36672b39362982c2e97">freeHead</link>&#32;=&#32;<link linkend="_classScheduler_1a59fa5a068cd9a36672b39362982c2e97">freeHead</link>-&gt;<link linkend="_structScheduler_1_1MsgNode_1a91702c9faa02b67ac24d3924be9fdaee">next</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l01377"/>01377 &#32;&#32;&#32;&#32;node-&gt;<link linkend="_structScheduler_1_1MsgNode_1a91702c9faa02b67ac24d3924be9fdaee">next</link>&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l01378"/>01378 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;node;
<anchor xml:id="_FsmOS_8cpp_source_1l01379"/>01379 }
<anchor xml:id="_FsmOS_8cpp_source_1l01380"/>01380 
<anchor xml:id="_FsmOS_8cpp_source_1l01381"/><link linkend="_classScheduler_1a4d40d84c82a4b3f5366d1a7fe5fd9307">01381</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classScheduler_1a4d40d84c82a4b3f5366d1a7fe5fd9307">Scheduler::deallocateMsgNode</link>(<link linkend="_structScheduler_1_1MsgNode">Scheduler::MsgNode</link>&#32;*node)
<anchor xml:id="_FsmOS_8cpp_source_1l01382"/>01382 {
<anchor xml:id="_FsmOS_8cpp_source_1l01383"/>01383 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!node)
<anchor xml:id="_FsmOS_8cpp_source_1l01384"/>01384 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01385"/>01385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l01386"/>01386 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01387"/>01387 
<anchor xml:id="_FsmOS_8cpp_source_1l01388"/>01388 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Free&#32;the&#32;buffer&#32;if&#32;it&#32;exists</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01389"/>01389 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(node-&gt;<link linkend="_structScheduler_1_1MsgNode_1ab2623f2b15be317f6b54848af08ce97c">payload</link>.<link linkend="_structScheduler_1_1QueuedMessage_1aa23777039e9446ad21fb93a6ec1e7e65">buffer</link>)
<anchor xml:id="_FsmOS_8cpp_source_1l01390"/>01390 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01391"/>01391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;free(node-&gt;<link linkend="_structScheduler_1_1MsgNode_1ab2623f2b15be317f6b54848af08ce97c">payload</link>.<link linkend="_structScheduler_1_1QueuedMessage_1aa23777039e9446ad21fb93a6ec1e7e65">buffer</link>);
<anchor xml:id="_FsmOS_8cpp_source_1l01392"/>01392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node-&gt;<link linkend="_structScheduler_1_1MsgNode_1ab2623f2b15be317f6b54848af08ce97c">payload</link>.<link linkend="_structScheduler_1_1QueuedMessage_1aa23777039e9446ad21fb93a6ec1e7e65">buffer</link>&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l01393"/>01393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node-&gt;<link linkend="_structScheduler_1_1MsgNode_1ab2623f2b15be317f6b54848af08ce97c">payload</link>.<link linkend="_structScheduler_1_1QueuedMessage_1a79ba2cf8a493da73c1b64f9aa2549938">capacity</link>&#32;=&#32;0;
<anchor xml:id="_FsmOS_8cpp_source_1l01394"/>01394 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01395"/>01395 
<anchor xml:id="_FsmOS_8cpp_source_1l01396"/>01396 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Reset&#32;message&#32;data</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01397"/>01397 &#32;&#32;&#32;&#32;node-&gt;<link linkend="_structScheduler_1_1MsgNode_1ab2623f2b15be317f6b54848af08ce97c">payload</link>.<link linkend="_structScheduler_1_1QueuedMessage_1ab2d20d6197328866badf5e94f048255c">targetTaskId</link>&#32;=&#32;0;
<anchor xml:id="_FsmOS_8cpp_source_1l01398"/>01398 &#32;&#32;&#32;&#32;node-&gt;<link linkend="_structScheduler_1_1MsgNode_1ab2623f2b15be317f6b54848af08ce97c">payload</link>.<link linkend="_structScheduler_1_1QueuedMessage_1a4920af5804a48c59719261484553f169">msg</link>.type&#32;=&#32;0;
<anchor xml:id="_FsmOS_8cpp_source_1l01399"/>01399 &#32;&#32;&#32;&#32;node-&gt;<link linkend="_structScheduler_1_1MsgNode_1ab2623f2b15be317f6b54848af08ce97c">payload</link>.<link linkend="_structScheduler_1_1QueuedMessage_1a4920af5804a48c59719261484553f169">msg</link>.topic&#32;=&#32;0;
<anchor xml:id="_FsmOS_8cpp_source_1l01400"/>01400 &#32;&#32;&#32;&#32;node-&gt;<link linkend="_structScheduler_1_1MsgNode_1ab2623f2b15be317f6b54848af08ce97c">payload</link>.<link linkend="_structScheduler_1_1QueuedMessage_1a4920af5804a48c59719261484553f169">msg</link>.arg&#32;=&#32;0;
<anchor xml:id="_FsmOS_8cpp_source_1l01401"/>01401 &#32;&#32;&#32;&#32;node-&gt;<link linkend="_structScheduler_1_1MsgNode_1ab2623f2b15be317f6b54848af08ce97c">payload</link>.<link linkend="_structScheduler_1_1QueuedMessage_1a4920af5804a48c59719261484553f169">msg</link>.refCount&#32;=&#32;0;
<anchor xml:id="_FsmOS_8cpp_source_1l01402"/>01402 
<anchor xml:id="_FsmOS_8cpp_source_1l01403"/>01403 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Return&#32;to&#32;free&#32;list</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01404"/>01404 &#32;&#32;&#32;&#32;node-&gt;<link linkend="_structScheduler_1_1MsgNode_1a91702c9faa02b67ac24d3924be9fdaee">next</link>&#32;=&#32;<link linkend="_classScheduler_1a59fa5a068cd9a36672b39362982c2e97">freeHead</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l01405"/>01405 &#32;&#32;&#32;&#32;<link linkend="_classScheduler_1a59fa5a068cd9a36672b39362982c2e97">freeHead</link>&#32;=&#32;node;
<anchor xml:id="_FsmOS_8cpp_source_1l01406"/>01406 }
<anchor xml:id="_FsmOS_8cpp_source_1l01407"/>01407 
<anchor xml:id="_FsmOS_8cpp_source_1l01408"/>01408 <emphasis role="comment">//&#32;Logging&#32;system&#32;helpers</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01409"/><link linkend="_classScheduler_1a1c6dd608a209d55e1925a4dbf5fb4344">01409</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classScheduler_1a1c6dd608a209d55e1925a4dbf5fb4344">Scheduler::logSystemEvent</link>(<link linkend="_classScheduler_1ab2bd6aa333e3f108343fedb022eaca79">LogLevel</link>&#32;level,&#32;<emphasis role="keyword">const</emphasis>&#32;__FlashStringHelper&#32;*msg)
<anchor xml:id="_FsmOS_8cpp_source_1l01410"/>01410 {
<anchor xml:id="_FsmOS_8cpp_source_1l01411"/>01411 &#32;&#32;&#32;&#32;<link linkend="_classScheduler_1acaab28b4949d5a175212d134c04cf406">logMessage</link>(<emphasis role="keyword">nullptr</emphasis>,&#32;level,&#32;msg);
<anchor xml:id="_FsmOS_8cpp_source_1l01412"/>01412 }
<anchor xml:id="_FsmOS_8cpp_source_1l01413"/>01413 
<anchor xml:id="_FsmOS_8cpp_source_1l01414"/><link linkend="_classScheduler_1a46f4a6ce080b281fd2941aa35450c3c0">01414</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classScheduler_1a46f4a6ce080b281fd2941aa35450c3c0">Scheduler::logTaskExecution</link>(<link linkend="_classTask">Task</link>&#32;*task,&#32;uint32_t&#32;execTime)
<anchor xml:id="_FsmOS_8cpp_source_1l01415"/>01415 {
<anchor xml:id="_FsmOS_8cpp_source_1l01416"/>01416 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Execution&#32;time&#32;logging&#32;disabled&#32;to&#32;save&#32;ROM</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01417"/>01417 &#32;&#32;&#32;&#32;(void)task;
<anchor xml:id="_FsmOS_8cpp_source_1l01418"/>01418 &#32;&#32;&#32;&#32;(void)execTime;
<anchor xml:id="_FsmOS_8cpp_source_1l01419"/>01419 }
<anchor xml:id="_FsmOS_8cpp_source_1l01420"/>01420 
<anchor xml:id="_FsmOS_8cpp_source_1l01421"/>01421 <emphasis role="comment">/*&#32;==================&#32;Additional&#32;Scheduler&#32;Methods&#32;==================&#32;*/</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01422"/><link linkend="_classScheduler_1acd30d51a85bda0b42d8ee5253a42e9f4">01422</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classScheduler_1acd30d51a85bda0b42d8ee5253a42e9f4">Scheduler::getResetInfo</link>(<link linkend="_structResetInfo">ResetInfo</link>&#32;&amp;info)
<anchor xml:id="_FsmOS_8cpp_source_1l01423"/>01423 {
<anchor xml:id="_FsmOS_8cpp_source_1l01424"/>01424 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Basic&#32;reset&#32;info</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01425"/>01425 &#32;&#32;&#32;&#32;info.<link linkend="_structResetInfo_1a4a91d356cc432144cd170d8e26e33a44">resetReason</link>&#32;=&#32;0;
<anchor xml:id="_FsmOS_8cpp_source_1l01426"/>01426 &#32;&#32;&#32;&#32;info.<link linkend="_structResetInfo_1ae2c739e645762e75b0137ecf4edcaea8">resetTime</link>&#32;=&#32;<link linkend="_classScheduler_1ac66364f021223ea49e76680b6dbcb56a">systemTime</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l01427"/>01427 &#32;&#32;&#32;&#32;info.<link linkend="_structResetInfo_1a99e40fbce39ff24b43a4fc1c2d44a81c">watchdogTimeout</link>&#32;=&#32;0;
<anchor xml:id="_FsmOS_8cpp_source_1l01428"/>01428 &#32;&#32;&#32;&#32;info.<link linkend="_structResetInfo_1a8969cb34a6ef24088d2e647a121cd878">lastTaskId</link>&#32;=&#32;0;
<anchor xml:id="_FsmOS_8cpp_source_1l01429"/>01429 
<anchor xml:id="_FsmOS_8cpp_source_1l01430"/>01430 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Get&#32;reset&#32;cause&#32;information</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01431"/>01431 &#32;&#32;&#32;&#32;info.<link linkend="_structResetInfo_1ad979eaae9cfc3f1cf959811b090194b5">optibootResetFlags</link>&#32;=&#32;<link linkend="_classScheduler_1a06438be1e9b5f2e9441b9c8c7c0d696e">getResetCauseFlags</link>();
<anchor xml:id="_FsmOS_8cpp_source_1l01432"/>01432 &#32;&#32;&#32;&#32;info.<link linkend="_structResetInfo_1a05874fdc762c1aa26bd60d8d16e2cc7b">optibootResetCause</link>&#32;=&#32;<link linkend="_classScheduler_1a3d51992ab99d1b8e7055ac1b5b6445ea">getResetCause</link>();
<anchor xml:id="_FsmOS_8cpp_source_1l01433"/>01433 
<anchor xml:id="_FsmOS_8cpp_source_1l01434"/>01434 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l01435"/>01435 }
<anchor xml:id="_FsmOS_8cpp_source_1l01436"/>01436 
<anchor xml:id="_FsmOS_8cpp_source_1l01437"/><link linkend="_classScheduler_1a3d51992ab99d1b8e7055ac1b5b6445ea">01437</link> <link linkend="_group__fsmos_1gaf0e4bd86b7877a41cdb3452dec42904d">ResetCause</link>&#32;<link linkend="_classScheduler_1a3d51992ab99d1b8e7055ac1b5b6445ea">Scheduler::getResetCause</link>()
<anchor xml:id="_FsmOS_8cpp_source_1l01438"/>01438 {
<anchor xml:id="_FsmOS_8cpp_source_1l01439"/>01439 &#32;&#32;&#32;&#32;uint8_t&#32;flags&#32;=&#32;<link linkend="_classScheduler_1a06438be1e9b5f2e9441b9c8c7c0d696e">getResetCauseFlags</link>();
<anchor xml:id="_FsmOS_8cpp_source_1l01440"/>01440 
<anchor xml:id="_FsmOS_8cpp_source_1l01441"/>01441 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(flags&#32;==&#32;0)
<anchor xml:id="_FsmOS_8cpp_source_1l01442"/>01442 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01443"/>01443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group__fsmos_1ggaf0e4bd86b7877a41cdb3452dec42904da8bf9995e300055d0078c4a09dfe0c883">RESET_UNKNOWN</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l01444"/>01444 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01445"/>01445 
<anchor xml:id="_FsmOS_8cpp_source_1l01446"/>01446 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;for&#32;multiple&#32;causes</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01447"/>01447 &#32;&#32;&#32;&#32;uint8_t&#32;count&#32;=&#32;0;
<anchor xml:id="_FsmOS_8cpp_source_1l01448"/>01448 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(flags&#32;&amp;&#32;<link linkend="_FsmOS_8h_1a0fe30f99377de57d909e461a560dee78">RESET_CAUSE_POWER_ON</link>)
<anchor xml:id="_FsmOS_8cpp_source_1l01449"/>01449 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01450"/>01450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;count++;
<anchor xml:id="_FsmOS_8cpp_source_1l01451"/>01451 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01452"/>01452 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(flags&#32;&amp;&#32;<link linkend="_group__fsmos_1gad69a300f3356c3ac65410bbafd9a0dfb">RESET_CAUSE_EXTERNAL</link>)
<anchor xml:id="_FsmOS_8cpp_source_1l01453"/>01453 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01454"/>01454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;count++;
<anchor xml:id="_FsmOS_8cpp_source_1l01455"/>01455 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01456"/>01456 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(flags&#32;&amp;&#32;<link linkend="_FsmOS_8h_1a1725fe610295be64608f3418032d83cf">RESET_CAUSE_BROWN_OUT</link>)
<anchor xml:id="_FsmOS_8cpp_source_1l01457"/>01457 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01458"/>01458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;count++;
<anchor xml:id="_FsmOS_8cpp_source_1l01459"/>01459 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01460"/>01460 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(flags&#32;&amp;&#32;<link linkend="_FsmOS_8h_1a8ddfa282a94d5f071d6b99b875d220b7">RESET_CAUSE_WATCHDOG</link>)
<anchor xml:id="_FsmOS_8cpp_source_1l01461"/>01461 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01462"/>01462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;count++;
<anchor xml:id="_FsmOS_8cpp_source_1l01463"/>01463 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01464"/>01464 
<anchor xml:id="_FsmOS_8cpp_source_1l01465"/>01465 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(count&#32;&gt;&#32;1)
<anchor xml:id="_FsmOS_8cpp_source_1l01466"/>01466 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01467"/>01467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group__fsmos_1ggaf0e4bd86b7877a41cdb3452dec42904dac94fa96c03ded460233a532ab79a089b">RESET_MULTIPLE</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l01468"/>01468 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01469"/>01469 
<anchor xml:id="_FsmOS_8cpp_source_1l01470"/>01470 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Single&#32;cause</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01471"/>01471 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(flags&#32;&amp;&#32;<link linkend="_FsmOS_8h_1a0fe30f99377de57d909e461a560dee78">RESET_CAUSE_POWER_ON</link>)
<anchor xml:id="_FsmOS_8cpp_source_1l01472"/>01472 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01473"/>01473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group__fsmos_1ggaf0e4bd86b7877a41cdb3452dec42904da37c7f4bc95e2b9679583655a8090880e">RESET_POWER_ON</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l01474"/>01474 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01475"/>01475 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(flags&#32;&amp;&#32;<link linkend="_group__fsmos_1gad69a300f3356c3ac65410bbafd9a0dfb">RESET_CAUSE_EXTERNAL</link>)
<anchor xml:id="_FsmOS_8cpp_source_1l01476"/>01476 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01477"/>01477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group__fsmos_1ggaf0e4bd86b7877a41cdb3452dec42904da187c6b01e1cfc544ee25193f43790323">RESET_EXTERNAL</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l01478"/>01478 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01479"/>01479 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(flags&#32;&amp;&#32;<link linkend="_FsmOS_8h_1a1725fe610295be64608f3418032d83cf">RESET_CAUSE_BROWN_OUT</link>)
<anchor xml:id="_FsmOS_8cpp_source_1l01480"/>01480 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01481"/>01481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group__fsmos_1ggaf0e4bd86b7877a41cdb3452dec42904da3ab8379425c9a63d5a64c2687968d3a1">RESET_BROWN_OUT</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l01482"/>01482 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01483"/>01483 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(flags&#32;&amp;&#32;<link linkend="_FsmOS_8h_1a8ddfa282a94d5f071d6b99b875d220b7">RESET_CAUSE_WATCHDOG</link>)
<anchor xml:id="_FsmOS_8cpp_source_1l01484"/>01484 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01485"/>01485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group__fsmos_1ggaf0e4bd86b7877a41cdb3452dec42904da9777f5f16727a14c3ccd7601fb09da6d">RESET_WATCHDOG</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l01486"/>01486 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01487"/>01487 
<anchor xml:id="_FsmOS_8cpp_source_1l01488"/>01488 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group__fsmos_1ggaf0e4bd86b7877a41cdb3452dec42904da8bf9995e300055d0078c4a09dfe0c883">RESET_UNKNOWN</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l01489"/>01489 }
<anchor xml:id="_FsmOS_8cpp_source_1l01490"/>01490 
<anchor xml:id="_FsmOS_8cpp_source_1l01491"/><link linkend="_classScheduler_1a06438be1e9b5f2e9441b9c8c7c0d696e">01491</link> uint8_t&#32;<link linkend="_classScheduler_1a06438be1e9b5f2e9441b9c8c7c0d696e">Scheduler::getResetCauseFlags</link>()
<anchor xml:id="_FsmOS_8cpp_source_1l01492"/>01492 {
<anchor xml:id="_FsmOS_8cpp_source_1l01493"/>01493 <emphasis role="preprocessor">#if&#32;defined(__AVR__)</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01494"/>01494 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;GPIOR0;
<anchor xml:id="_FsmOS_8cpp_source_1l01495"/>01495 <emphasis role="preprocessor">#else</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01496"/>01496 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;&#32;<emphasis role="comment">//&#32;Not&#32;available&#32;on&#32;non-AVR&#32;platforms</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01497"/>01497 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01498"/>01498 }
<anchor xml:id="_FsmOS_8cpp_source_1l01499"/>01499 
<anchor xml:id="_FsmOS_8cpp_source_1l01500"/><link linkend="_classScheduler_1a1ad7c1772cfa11033b280e9b5de86d35">01500</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classScheduler_1a1ad7c1772cfa11033b280e9b5de86d35">Scheduler::wasResetCause</link>(<link linkend="_group__fsmos_1gaf0e4bd86b7877a41cdb3452dec42904d">ResetCause</link>&#32;cause)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classScheduler_1a3d51992ab99d1b8e7055ac1b5b6445ea">getResetCause</link>()&#32;==&#32;cause;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01501"/>01501 
<anchor xml:id="_FsmOS_8cpp_source_1l01502"/><link linkend="_classScheduler_1a4a491d929e3bee5c1bb5db4ad9a13dc3">01502</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classScheduler_1a4a491d929e3bee5c1bb5db4ad9a13dc3">Scheduler::getTaskStats</link>(uint8_t&#32;task_id,&#32;<link linkend="_structTaskStats">TaskStats</link>&#32;&amp;stats)
<anchor xml:id="_FsmOS_8cpp_source_1l01503"/>01503 {
<anchor xml:id="_FsmOS_8cpp_source_1l01504"/>01504 &#32;&#32;&#32;&#32;<link linkend="_classTask">Task</link>&#32;*task&#32;=&#32;<link linkend="_classScheduler_1aabf3840938cc797555cdee88f5d19dd2">getTask</link>(task_id);
<anchor xml:id="_FsmOS_8cpp_source_1l01505"/>01505 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!task)
<anchor xml:id="_FsmOS_8cpp_source_1l01506"/>01506 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01507"/>01507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l01508"/>01508 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01509"/>01509 
<anchor xml:id="_FsmOS_8cpp_source_1l01510"/>01510 &#32;&#32;&#32;&#32;stats.<link linkend="_structTaskStats_1a1fc9ad09023166819ea34a6c9e00a956">taskId</link>&#32;=&#32;task-&gt;<link linkend="_classTask_1a548d620b8f5d7490b8cdc235dbfdf6eb">getId</link>();
<anchor xml:id="_FsmOS_8cpp_source_1l01511"/>01511 &#32;&#32;&#32;&#32;stats.<link linkend="_structTaskStats_1acee85734ca75baa7fe01cad1c24fc34b">name</link>&#32;=&#32;task-&gt;<link linkend="_classTask_1aae9b70f6c6542469cd8c3c122536964c">getName</link>();
<anchor xml:id="_FsmOS_8cpp_source_1l01512"/>01512 &#32;&#32;&#32;&#32;stats.<link linkend="_structTaskStats_1ad14bdd478708018fae0f1bbceb19d2d0">state</link>&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>uint8_t<emphasis role="keyword">&gt;</emphasis>(task-&gt;<link linkend="_classTask_1acccd11864edfa1abbb15ff43008a17ec">getState</link>());
<anchor xml:id="_FsmOS_8cpp_source_1l01513"/>01513 &#32;&#32;&#32;&#32;stats.<link linkend="_structTaskStats_1a28271d6c20d6bfccfea9f21fcdb7dd63">periodMs</link>&#32;=&#32;task-&gt;<link linkend="_classTask_1aa096c58dddc4fb8f7f8d5f40e1815d2d">getPeriod</link>();
<anchor xml:id="_FsmOS_8cpp_source_1l01514"/>01514 &#32;&#32;&#32;&#32;stats.<link linkend="_structTaskStats_1a434524846cef9e3a82b15d7f7b5d439d">priority</link>&#32;=&#32;task-&gt;<link linkend="_classTask_1aef8cf69a9b677977003d8b72d66d36d8">getPriority</link>();
<anchor xml:id="_FsmOS_8cpp_source_1l01515"/>01515 &#32;&#32;&#32;&#32;stats.<link linkend="_structTaskStats_1afb9812d3db56b4a74e3534a0b1046b8c">runCount</link>&#32;=&#32;task-&gt;<link linkend="_classTask_1a48485325ce407372474c73982690a0cc">runCount</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l01516"/>01516 &#32;&#32;&#32;&#32;stats.<link linkend="_structTaskStats_1a922dffb9309c234de882457919f7cb66">maxExecTimeUs</link>&#32;=&#32;task-&gt;<link linkend="_classTask_1ad464cac8faf232328c59600a70bfa11c">maxExecTimeUs</link>;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;16-bit&#32;max&#32;execution&#32;time</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01517"/>01517 &#32;&#32;&#32;&#32;stats.<link linkend="_structTaskStats_1a68e1e0b13b6fc7e48ac77f22bc338492">totalExecTimeUs</link>&#32;=&#32;task-&gt;<link linkend="_classTask_1a48485325ce407372474c73982690a0cc">runCount</link>&#32;*&#32;task-&gt;<link linkend="_classTask_1a54935dc05e1ff8ba284d18b84a057ac6">avgExecTimeUs</link>;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Calculate&#32;total&#32;from&#32;avg&#32;*&#32;count</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01518"/>01518 &#32;&#32;&#32;&#32;stats.<link linkend="_structTaskStats_1ab319b8455c244af5111b6c2e395ffad9">stackUsage</link>&#32;=&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Still&#32;placeholder&#32;-&#32;requires&#32;stack&#32;monitoring</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01519"/>01519 &#32;&#32;&#32;&#32;stats.<link linkend="_structTaskStats_1abbf27ee4cb7f8272b150152df12c3da0">delayCount</link>&#32;=&#32;task-&gt;<link linkend="_classTask_1aaf791abc71bca2ca62d29d2e155dc82c">delayCount</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Task&#32;delay&#32;count</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01520"/>01520 &#32;&#32;&#32;&#32;stats.<link linkend="_structTaskStats_1ac2ef063a104bca4c81457a8db057a51a">maxDelayMs</link>&#32;=&#32;task-&gt;<link linkend="_classTask_1a82389ea58680f2ce8a0ffada921c3b6c">maxDelayMs</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Maximum&#32;delay&#32;experienced</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01521"/>01521 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l01522"/>01522 }
<anchor xml:id="_FsmOS_8cpp_source_1l01523"/>01523 
<anchor xml:id="_FsmOS_8cpp_source_1l01524"/><link linkend="_classScheduler_1a7c61b8b908a19416283e66c0fb076a40">01524</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classScheduler_1a7c61b8b908a19416283e66c0fb076a40">Scheduler::getSystemMemoryInfo</link>(<link linkend="_structSystemMemoryInfo">SystemMemoryInfo</link>&#32;&amp;info)
<anchor xml:id="_FsmOS_8cpp_source_1l01525"/>01525 {
<anchor xml:id="_FsmOS_8cpp_source_1l01526"/>01526 &#32;&#32;&#32;&#32;info.<link linkend="_structSystemMemoryInfo_1a3fead35bc0c51a87ca8cb5630eea2fe6">freeRam</link>&#32;=&#32;<link linkend="_classScheduler_1a56c3c1a776927eeb7917e7b636a2e3ab">getFreeMemory</link>();
<anchor xml:id="_FsmOS_8cpp_source_1l01527"/>01527 &#32;&#32;&#32;&#32;info.<link linkend="_structSystemMemoryInfo_1a74fd6f112cb2a361579343bc609ba3bd">totalRam</link>&#32;=&#32;2048;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;AVR&#32;typical</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01528"/>01528 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Heap&#32;size&#32;(bytes)&#32;from&#32;end&#32;of&#32;.bss&#32;to&#32;current&#32;break&#32;value&#32;(if&#32;any)</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01529"/>01529 <emphasis role="preprocessor">#if&#32;defined(__AVR__)</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01530"/>01530 &#32;&#32;&#32;&#32;<emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;__bss_end;
<anchor xml:id="_FsmOS_8cpp_source_1l01531"/>01531 &#32;&#32;&#32;&#32;<emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*__brkval;
<anchor xml:id="_FsmOS_8cpp_source_1l01532"/>01532 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(__brkval)
<anchor xml:id="_FsmOS_8cpp_source_1l01533"/>01533 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01534"/>01534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;info.<link linkend="_structSystemMemoryInfo_1ab46e008190c5d4dc58a098653fc96e21">heapSize</link>&#32;=&#32;(uint16_t)((uint16_t)__brkval&#32;-&#32;(uint16_t)&amp;__bss_end);
<anchor xml:id="_FsmOS_8cpp_source_1l01535"/>01535 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01536"/>01536 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01537"/>01537 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01538"/>01538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;info.<link linkend="_structSystemMemoryInfo_1ab46e008190c5d4dc58a098653fc96e21">heapSize</link>&#32;=&#32;0;
<anchor xml:id="_FsmOS_8cpp_source_1l01539"/>01539 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01540"/>01540 <emphasis role="preprocessor">#else</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01541"/>01541 &#32;&#32;&#32;&#32;info.<link linkend="_structSystemMemoryInfo_1ab46e008190c5d4dc58a098653fc96e21">heapSize</link>&#32;=&#32;0;
<anchor xml:id="_FsmOS_8cpp_source_1l01542"/>01542 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01543"/>01543 &#32;&#32;&#32;&#32;info.<link linkend="_structSystemMemoryInfo_1aafc733c82678f25b4579ac80ff3f3416">largestBlock</link>&#32;=&#32;0;&#32;&#32;&#32;<emphasis role="comment">//&#32;Not&#32;tracked</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01544"/>01544 &#32;&#32;&#32;&#32;info.<link linkend="_structSystemMemoryInfo_1aa49fcb6068c10bdab13a7cfa97241c27">heapFragments</link>&#32;=&#32;0;&#32;&#32;<emphasis role="comment">//&#32;Not&#32;tracked</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01545"/>01545 <emphasis role="preprocessor">#if&#32;defined(__AVR__)</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01546"/>01546 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Approximate&#32;stack&#32;usage&#32;based&#32;on&#32;canary&#32;region</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01547"/>01547 &#32;&#32;&#32;&#32;<emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;__bss_end;
<anchor xml:id="_FsmOS_8cpp_source_1l01548"/>01548 &#32;&#32;&#32;&#32;<emphasis role="keyword">extern</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*__brkval;
<anchor xml:id="_FsmOS_8cpp_source_1l01549"/>01549 &#32;&#32;&#32;&#32;uint16_t&#32;lower&#32;=&#32;(uint16_t)(__brkval&#32;?&#32;__brkval&#32;:&#32;&amp;__bss_end);
<anchor xml:id="_FsmOS_8cpp_source_1l01550"/>01550 &#32;&#32;&#32;&#32;uint16_t&#32;upper&#32;=&#32;(uint16_t)RAMEND;
<anchor xml:id="_FsmOS_8cpp_source_1l01551"/>01551 &#32;&#32;&#32;&#32;uint16_t&#32;approxUsed&#32;=&#32;measure_stack_used();
<anchor xml:id="_FsmOS_8cpp_source_1l01552"/>01552 &#32;&#32;&#32;&#32;<emphasis role="keyword">extern</emphasis>&#32;uint8_t&#32;*g_canary_start;&#32;<emphasis role="keyword">extern</emphasis>&#32;uint8_t&#32;*g_canary_end;
<anchor xml:id="_FsmOS_8cpp_source_1l01553"/>01553 &#32;&#32;&#32;&#32;uint16_t&#32;windowSize&#32;=&#32;0;
<anchor xml:id="_FsmOS_8cpp_source_1l01554"/>01554 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(g_canary_start&#32;&amp;&amp;&#32;g_canary_end&#32;&amp;&amp;&#32;g_canary_end&#32;&gt;=&#32;g_canary_start)
<anchor xml:id="_FsmOS_8cpp_source_1l01555"/>01555 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01556"/>01556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;windowSize&#32;=&#32;(uint16_t)(g_canary_end&#32;-&#32;g_canary_start&#32;+&#32;1);
<anchor xml:id="_FsmOS_8cpp_source_1l01557"/>01557 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01558"/>01558 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01559"/>01559 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01560"/>01560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;windowSize&#32;=&#32;(upper&#32;&gt;=&#32;lower)&#32;?&#32;(upper&#32;-&#32;lower&#32;+&#32;1)&#32;:&#32;0;
<anchor xml:id="_FsmOS_8cpp_source_1l01561"/>01561 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01562"/>01562 &#32;&#32;&#32;&#32;info.<link linkend="_structSystemMemoryInfo_1a12ed83e6ef3ab65b2e708eb7634ae3d9">stackSize</link>&#32;=&#32;windowSize;
<anchor xml:id="_FsmOS_8cpp_source_1l01563"/>01563 &#32;&#32;&#32;&#32;info.<link linkend="_structSystemMemoryInfo_1a23c2b52b7aa05bdd6c8316280fafb35e">stackUsed</link>&#32;=&#32;(approxUsed&#32;&gt;&#32;windowSize)&#32;?&#32;windowSize&#32;:&#32;approxUsed;
<anchor xml:id="_FsmOS_8cpp_source_1l01564"/>01564 &#32;&#32;&#32;&#32;info.<link linkend="_structSystemMemoryInfo_1aa09da446795f6a14640ac228f8775332">stackFree</link>&#32;=&#32;(info.<link linkend="_structSystemMemoryInfo_1a23c2b52b7aa05bdd6c8316280fafb35e">stackUsed</link>&#32;&gt;=&#32;info.<link linkend="_structSystemMemoryInfo_1a12ed83e6ef3ab65b2e708eb7634ae3d9">stackSize</link>)&#32;?&#32;0&#32;:&#32;(info.<link linkend="_structSystemMemoryInfo_1a12ed83e6ef3ab65b2e708eb7634ae3d9">stackSize</link>&#32;-&#32;info.<link linkend="_structSystemMemoryInfo_1a23c2b52b7aa05bdd6c8316280fafb35e">stackUsed</link>);
<anchor xml:id="_FsmOS_8cpp_source_1l01565"/>01565 <emphasis role="preprocessor">#else</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01566"/>01566 &#32;&#32;&#32;&#32;info.<link linkend="_structSystemMemoryInfo_1a12ed83e6ef3ab65b2e708eb7634ae3d9">stackSize</link>&#32;=&#32;0;
<anchor xml:id="_FsmOS_8cpp_source_1l01567"/>01567 &#32;&#32;&#32;&#32;info.<link linkend="_structSystemMemoryInfo_1a23c2b52b7aa05bdd6c8316280fafb35e">stackUsed</link>&#32;=&#32;0;
<anchor xml:id="_FsmOS_8cpp_source_1l01568"/>01568 &#32;&#32;&#32;&#32;info.<link linkend="_structSystemMemoryInfo_1aa09da446795f6a14640ac228f8775332">stackFree</link>&#32;=&#32;0;
<anchor xml:id="_FsmOS_8cpp_source_1l01569"/>01569 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01570"/>01570 &#32;&#32;&#32;&#32;info.<link linkend="_structSystemMemoryInfo_1ab4646e94bacfe136033551f29c88127f">totalTasks</link>&#32;=&#32;<link linkend="_classScheduler_1a3e1f741da7d85ea80bb2f226d6457ab6">taskCount</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l01571"/>01571 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Sum&#32;estimated&#32;task&#32;memory&#32;(struct&#32;size&#32;+&#32;subscription&#32;bitfield)</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01572"/>01572 &#32;&#32;&#32;&#32;uint16_t&#32;taskMem&#32;=&#32;0;
<anchor xml:id="_FsmOS_8cpp_source_1l01573"/>01573 &#32;&#32;&#32;&#32;<link linkend="_structTaskNode">TaskNode</link>&#32;*tn&#32;=&#32;<link linkend="_classScheduler_1a9eb682b2716a34e7c3eb742782aa42e2">taskHead</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l01574"/>01574 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(tn)
<anchor xml:id="_FsmOS_8cpp_source_1l01575"/>01575 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01576"/>01576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(tn-&gt;<link linkend="_structTaskNode_1a04f109a440464fd95c18d0f3758ee0af">task</link>)
<anchor xml:id="_FsmOS_8cpp_source_1l01577"/>01577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01578"/>01578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;taskMem&#32;+=&#32;tn-&gt;<link linkend="_structTaskNode_1a04f109a440464fd95c18d0f3758ee0af">task</link>-&gt;<link linkend="_classTask_1aea07a4be09d08cb8b1afa1914ddc988c">getTaskStructSize</link>();
<anchor xml:id="_FsmOS_8cpp_source_1l01579"/>01579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;taskMem&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(tn-&gt;<link linkend="_structTaskNode_1a04f109a440464fd95c18d0f3758ee0af">task</link>-&gt;<link linkend="_classTask_1acae0e3e69ae99fa0f3ca9298e74c7236">subscribedTopics</link>);
<anchor xml:id="_FsmOS_8cpp_source_1l01580"/>01580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01581"/>01581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tn&#32;=&#32;tn-&gt;<link linkend="_structTaskNode_1af6f74dbb5d2baa80d10dabc43b593ffd">next</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l01582"/>01582 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01583"/>01583 &#32;&#32;&#32;&#32;info.<link linkend="_structSystemMemoryInfo_1ad53218d4a3a0bd2bf27ee57618c502f9">taskMemory</link>&#32;=&#32;taskMem;
<anchor xml:id="_FsmOS_8cpp_source_1l01584"/>01584 &#32;&#32;&#32;&#32;info.<link linkend="_structSystemMemoryInfo_1af922c19a62e2db75d2d35abc96282760">activeMessages</link>&#32;=&#32;<link linkend="_classScheduler_1a13367b7d53dc7bf804d9158e57bff5f7">msgCount</link>;&#32;&#32;<emphasis role="comment">//&#32;Provide&#32;actual&#32;active&#32;message&#32;count</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01585"/>01585 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Approximate&#32;message&#32;memory:&#32;nodes&#32;+&#32;buffers&#32;across&#32;queue&#32;and&#32;free&#32;lists</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01586"/>01586 &#32;&#32;&#32;&#32;uint16_t&#32;msgMem&#32;=&#32;0;
<anchor xml:id="_FsmOS_8cpp_source_1l01587"/>01587 &#32;&#32;&#32;&#32;<link linkend="_structScheduler_1_1MsgNode">MsgNode</link>&#32;*mn&#32;=&#32;<link linkend="_classScheduler_1afc800a55be0f3da82ef2e79dad96496d">msgHead</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l01588"/>01588 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(mn)
<anchor xml:id="_FsmOS_8cpp_source_1l01589"/>01589 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01590"/>01590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;msgMem&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_structScheduler_1_1MsgNode">MsgNode</link>);
<anchor xml:id="_FsmOS_8cpp_source_1l01591"/>01591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;msgMem&#32;+=&#32;mn-&gt;<link linkend="_structScheduler_1_1MsgNode_1ab2623f2b15be317f6b54848af08ce97c">payload</link>.<link linkend="_structScheduler_1_1QueuedMessage_1a79ba2cf8a493da73c1b64f9aa2549938">capacity</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l01592"/>01592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mn&#32;=&#32;mn-&gt;<link linkend="_structScheduler_1_1MsgNode_1a91702c9faa02b67ac24d3924be9fdaee">next</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l01593"/>01593 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01594"/>01594 &#32;&#32;&#32;&#32;mn&#32;=&#32;<link linkend="_classScheduler_1a59fa5a068cd9a36672b39362982c2e97">freeHead</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l01595"/>01595 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(mn)
<anchor xml:id="_FsmOS_8cpp_source_1l01596"/>01596 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01597"/>01597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;msgMem&#32;+=&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_structScheduler_1_1MsgNode">MsgNode</link>);
<anchor xml:id="_FsmOS_8cpp_source_1l01598"/>01598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;msgMem&#32;+=&#32;mn-&gt;<link linkend="_structScheduler_1_1MsgNode_1ab2623f2b15be317f6b54848af08ce97c">payload</link>.<link linkend="_structScheduler_1_1QueuedMessage_1a79ba2cf8a493da73c1b64f9aa2549938">capacity</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l01599"/>01599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mn&#32;=&#32;mn-&gt;<link linkend="_structScheduler_1_1MsgNode_1a91702c9faa02b67ac24d3924be9fdaee">next</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l01600"/>01600 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01601"/>01601 &#32;&#32;&#32;&#32;info.<link linkend="_structSystemMemoryInfo_1a76bfcb475e0cfe6757e0fbbc04ad371e">messageMemory</link>&#32;=&#32;msgMem;
<anchor xml:id="_FsmOS_8cpp_source_1l01602"/>01602 
<anchor xml:id="_FsmOS_8cpp_source_1l01603"/>01603 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Flash&#32;usage&#32;from&#32;build-time&#32;constants</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01604"/>01604 <emphasis role="preprocessor">#ifdef&#32;BUILD_FLASH_USED</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01605"/>01605 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Use&#32;real&#32;build-time&#32;values&#32;injected&#32;by&#32;build&#32;script</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01606"/>01606 &#32;&#32;&#32;&#32;info.<link linkend="_structSystemMemoryInfo_1ae527fbdfcb22a4136b2f6f24d60c895a">flashUsed</link>&#32;=&#32;BUILD_FLASH_USED;
<anchor xml:id="_FsmOS_8cpp_source_1l01607"/>01607 &#32;&#32;&#32;&#32;info.<link linkend="_structSystemMemoryInfo_1abdbd97bb0a5a2fece0b70320ccedffc4">flashFree</link>&#32;=&#32;BUILD_FLASH_FREE;
<anchor xml:id="_FsmOS_8cpp_source_1l01608"/>01608 <emphasis role="preprocessor">#else</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01609"/>01609 &#32;&#32;&#32;&#32;info.<link linkend="_structSystemMemoryInfo_1ae527fbdfcb22a4136b2f6f24d60c895a">flashUsed</link>&#32;=&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Not&#32;available&#32;at&#32;runtime</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01610"/>01610 &#32;&#32;&#32;&#32;info.<link linkend="_structSystemMemoryInfo_1abdbd97bb0a5a2fece0b70320ccedffc4">flashFree</link>&#32;=&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Not&#32;available&#32;at&#32;runtime</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01611"/>01611 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01612"/>01612 
<anchor xml:id="_FsmOS_8cpp_source_1l01613"/>01613 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;EEPROM&#32;usage&#32;(approximate&#32;based&#32;on&#32;known&#32;usage)</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01614"/>01614 <emphasis role="preprocessor">#ifdef&#32;FSMOS_EEPROM_SIZE</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01615"/>01615 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Estimate&#32;EEPROM&#32;usage&#32;based&#32;on&#32;known&#32;variables&#32;stored</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01616"/>01616 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;LightTask&#32;saves&#32;dim&#32;level&#32;(1&#32;byte),&#32;other&#32;tasks&#32;may&#32;use&#32;EEPROM</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01617"/>01617 &#32;&#32;&#32;&#32;uint16_t&#32;eepromUsed&#32;=&#32;1;&#32;&#32;<emphasis role="comment">//&#32;Conservative&#32;estimate</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01618"/>01618 &#32;&#32;&#32;&#32;info.<link linkend="_structSystemMemoryInfo_1a863feffbb30f9ba2b8bf031421830f31">eepromUsed</link>&#32;=&#32;eepromUsed;
<anchor xml:id="_FsmOS_8cpp_source_1l01619"/>01619 &#32;&#32;&#32;&#32;info.<link linkend="_structSystemMemoryInfo_1afbf8d2df35ecd00576f480561255f04d">eepromFree</link>&#32;=&#32;FSMOS_EEPROM_SIZE&#32;-&#32;eepromUsed;
<anchor xml:id="_FsmOS_8cpp_source_1l01620"/>01620 <emphasis role="preprocessor">#else</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01621"/>01621 &#32;&#32;&#32;&#32;info.<link linkend="_structSystemMemoryInfo_1a863feffbb30f9ba2b8bf031421830f31">eepromUsed</link>&#32;=&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Not&#32;available&#32;at&#32;runtime</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01622"/>01622 &#32;&#32;&#32;&#32;info.<link linkend="_structSystemMemoryInfo_1afbf8d2df35ecd00576f480561255f04d">eepromFree</link>&#32;=&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Not&#32;available&#32;at&#32;runtime</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01623"/>01623 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01624"/>01624 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l01625"/>01625 }
<anchor xml:id="_FsmOS_8cpp_source_1l01626"/>01626 
<anchor xml:id="_FsmOS_8cpp_source_1l01627"/><link linkend="_classScheduler_1a7170da5c7dfd33bd0a5bd6509538d84f">01627</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classScheduler_1a7170da5c7dfd33bd0a5bd6509538d84f">Scheduler::getTaskMemoryInfo</link>(uint8_t&#32;task_id,&#32;<link linkend="_structTaskMemoryInfo">TaskMemoryInfo</link>&#32;&amp;info)
<anchor xml:id="_FsmOS_8cpp_source_1l01628"/>01628 {
<anchor xml:id="_FsmOS_8cpp_source_1l01629"/>01629 &#32;&#32;&#32;&#32;<link linkend="_classTask">Task</link>&#32;*task&#32;=&#32;<link linkend="_classScheduler_1aabf3840938cc797555cdee88f5d19dd2">getTask</link>(task_id);
<anchor xml:id="_FsmOS_8cpp_source_1l01630"/>01630 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!task)
<anchor xml:id="_FsmOS_8cpp_source_1l01631"/>01631 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01632"/>01632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l01633"/>01633 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01634"/>01634 
<anchor xml:id="_FsmOS_8cpp_source_1l01635"/>01635 &#32;&#32;&#32;&#32;info.<link linkend="_structTaskMemoryInfo_1a6ccb06721fe721014762215555523d65">task_id</link>&#32;=&#32;task-&gt;<link linkend="_classTask_1a548d620b8f5d7490b8cdc235dbfdf6eb">getId</link>();
<anchor xml:id="_FsmOS_8cpp_source_1l01636"/>01636 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Derive&#32;struct&#32;size&#32;via&#32;virtual&#32;API;&#32;if&#32;not&#32;implemented&#32;by&#32;a&#32;task,&#32;it&#32;won&apos;t&#32;link.</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01637"/>01637 &#32;&#32;&#32;&#32;info.<link linkend="_structTaskMemoryInfo_1a455ea7f69c1a9c3b898d5c8d40e0fac7">task_struct_size</link>&#32;=&#32;task-&gt;<link linkend="_classTask_1aea07a4be09d08cb8b1afa1914ddc988c">getTaskStructSize</link>();
<anchor xml:id="_FsmOS_8cpp_source_1l01638"/>01638 &#32;&#32;&#32;&#32;info.<link linkend="_structTaskMemoryInfo_1a33936208344182c0cb2040787efaf117">subscription_size</link>&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(task-&gt;<link linkend="_classTask_1acae0e3e69ae99fa0f3ca9298e74c7236">subscribedTopics</link>);
<anchor xml:id="_FsmOS_8cpp_source_1l01639"/>01639 &#32;&#32;&#32;&#32;info.<link linkend="_structTaskMemoryInfo_1afc06164ff4977316ba80890f78771b91">queue_size</link>&#32;=&#32;0;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;No&#32;per-task&#32;queue&#32;in&#32;current&#32;design</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01640"/>01640 &#32;&#32;&#32;&#32;info.<link linkend="_structTaskMemoryInfo_1ae365acfa19af10f054aee062cfe3b824">total_allocated</link>&#32;=&#32;info.<link linkend="_structTaskMemoryInfo_1a455ea7f69c1a9c3b898d5c8d40e0fac7">task_struct_size</link>&#32;+&#32;info.<link linkend="_structTaskMemoryInfo_1a33936208344182c0cb2040787efaf117">subscription_size</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l01641"/>01641 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l01642"/>01642 }
<anchor xml:id="_FsmOS_8cpp_source_1l01643"/>01643 
<anchor xml:id="_FsmOS_8cpp_source_1l01644"/><link linkend="_classScheduler_1a69444823d403c8c84670eda2c0d594a4">01644</link> uint8_t&#32;<link linkend="_classScheduler_1a69444823d403c8c84670eda2c0d594a4">Scheduler::getHeapFragmentation</link>()
<anchor xml:id="_FsmOS_8cpp_source_1l01645"/>01645 {
<anchor xml:id="_FsmOS_8cpp_source_1l01646"/>01646 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;&#32;<emphasis role="comment">//&#32;Placeholder</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01647"/>01647 }
<anchor xml:id="_FsmOS_8cpp_source_1l01648"/>01648 
<anchor xml:id="_FsmOS_8cpp_source_1l01649"/><link linkend="_classScheduler_1a26f332614d3126f5efdc42092138b0e6">01649</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classScheduler_1a26f332614d3126f5efdc42092138b0e6">Scheduler::getMemoryLeakStats</link>(<link linkend="_structMemoryStats">MemoryStats</link>&#32;&amp;stats)
<anchor xml:id="_FsmOS_8cpp_source_1l01650"/>01650 {
<anchor xml:id="_FsmOS_8cpp_source_1l01651"/>01651 &#32;&#32;&#32;&#32;stats&#32;=&#32;<link linkend="_FsmOS_8cpp_1a4b161d5fdd35540a17153452e7c6af01">fsmos_memory_stats</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l01652"/>01652 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l01653"/>01653 }
<anchor xml:id="_FsmOS_8cpp_source_1l01654"/>01654 
<anchor xml:id="_FsmOS_8cpp_source_1l01655"/>01655 <emphasis role="comment">/*&#32;==================&#32;Additional&#32;Logging&#32;Functions&#32;==================&#32;*/</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01656"/>01656 <emphasis role="comment">//&#32;Internal&#32;helpers&#32;to&#32;reuse&#32;formatted&#32;logging&#32;logic</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01657"/><link linkend="_FsmOS_8cpp_1ade20b4a6bf510c7319a727cdf86ebe37">01657</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_FsmOS_8cpp_1ade20b4a6bf510c7319a727cdf86ebe37">printLogHeader</link>(<link linkend="_classScheduler_1ab2bd6aa333e3f108343fedb022eaca79">Scheduler::LogLevel</link>&#32;level)
<anchor xml:id="_FsmOS_8cpp_source_1l01658"/>01658 {
<anchor xml:id="_FsmOS_8cpp_source_1l01659"/>01659 <emphasis role="preprocessor">#if&#32;defined(__AVR__)</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01660"/>01660 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*level_str&#32;=&#32;<emphasis role="stringliteral">&quot;DEBUG&quot;</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l01661"/>01661 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(level)
<anchor xml:id="_FsmOS_8cpp_source_1l01662"/>01662 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01663"/>01663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_classScheduler_1ab2bd6aa333e3f108343fedb022eaca79ac50a6d9344241d486cea80292b5ba327">Scheduler::LOG_INFO</link>:
<anchor xml:id="_FsmOS_8cpp_source_1l01664"/>01664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;level_str&#32;=&#32;<emphasis role="stringliteral">&quot;INFO&quot;</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l01665"/>01665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l01666"/>01666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_classScheduler_1ab2bd6aa333e3f108343fedb022eaca79a43ae65cd6d87b4c15b8ddb2e1a110286">Scheduler::LOG_WARN</link>:
<anchor xml:id="_FsmOS_8cpp_source_1l01667"/>01667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;level_str&#32;=&#32;<emphasis role="stringliteral">&quot;WARN&quot;</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l01668"/>01668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l01669"/>01669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_classScheduler_1ab2bd6aa333e3f108343fedb022eaca79aa56e45ee8b2ce204989dcede4bfa7805">Scheduler::LOG_ERROR</link>:
<anchor xml:id="_FsmOS_8cpp_source_1l01670"/>01670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;level_str&#32;=&#32;<emphasis role="stringliteral">&quot;ERROR&quot;</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l01671"/>01671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l01672"/>01672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
<anchor xml:id="_FsmOS_8cpp_source_1l01673"/>01673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l01674"/>01674 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01675"/>01675 &#32;&#32;&#32;&#32;Serial.print(F(<emphasis role="stringliteral">&quot;[&quot;</emphasis>));
<anchor xml:id="_FsmOS_8cpp_source_1l01676"/>01676 &#32;&#32;&#32;&#32;Serial.print(level_str);
<anchor xml:id="_FsmOS_8cpp_source_1l01677"/>01677 &#32;&#32;&#32;&#32;Serial.print(F(<emphasis role="stringliteral">&quot;]&#32;&quot;</emphasis>));
<anchor xml:id="_FsmOS_8cpp_source_1l01678"/>01678 <emphasis role="preprocessor">#else</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01679"/>01679 &#32;&#32;&#32;&#32;(void)level;
<anchor xml:id="_FsmOS_8cpp_source_1l01680"/>01680 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01681"/>01681 }
<anchor xml:id="_FsmOS_8cpp_source_1l01682"/>01682 
<anchor xml:id="_FsmOS_8cpp_source_1l01683"/><link linkend="_FsmOS_8cpp_1a239a4328ae320786411ee555c3a20250">01683</link> <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_FsmOS_8cpp_1a239a4328ae320786411ee555c3a20250">logFormattedV</link>(<link linkend="_classScheduler_1ab2bd6aa333e3f108343fedb022eaca79">Scheduler::LogLevel</link>&#32;level,&#32;<emphasis role="keyword">const</emphasis>&#32;__FlashStringHelper&#32;*format,&#32;va_list&#32;args)
<anchor xml:id="_FsmOS_8cpp_source_1l01684"/>01684 {
<anchor xml:id="_FsmOS_8cpp_source_1l01685"/>01685 <emphasis role="preprocessor">#if&#32;defined(__AVR__)</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01686"/>01686 &#32;&#32;&#32;&#32;<link linkend="_FsmOS_8cpp_1ade20b4a6bf510c7319a727cdf86ebe37">printLogHeader</link>(level);
<anchor xml:id="_FsmOS_8cpp_source_1l01687"/>01687 &#32;&#32;&#32;&#32;vfprintf_P(stdout,&#32;(PGM_P)format,&#32;args);
<anchor xml:id="_FsmOS_8cpp_source_1l01688"/>01688 &#32;&#32;&#32;&#32;Serial.println();
<anchor xml:id="_FsmOS_8cpp_source_1l01689"/>01689 <emphasis role="preprocessor">#else</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01690"/>01690 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;formatted[128];
<anchor xml:id="_FsmOS_8cpp_source_1l01691"/>01691 &#32;&#32;&#32;&#32;vsnprintf(formatted,&#32;<emphasis role="keyword">sizeof</emphasis>(formatted),&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*)format,&#32;args);
<anchor xml:id="_FsmOS_8cpp_source_1l01692"/>01692 &#32;&#32;&#32;&#32;<link linkend="_group__fsmos_1ga990d37c1e9d0a35fead6ab92e0da955e">OS</link>.<link linkend="_classScheduler_1acaab28b4949d5a175212d134c04cf406">logMessage</link>(<emphasis role="keyword">nullptr</emphasis>,&#32;level,&#32;formatted);
<anchor xml:id="_FsmOS_8cpp_source_1l01693"/>01693 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01694"/>01694 }
<anchor xml:id="_FsmOS_8cpp_source_1l01695"/><link linkend="_group__fsmos_1gac6c8dbf1f133ab906d0f3490e0de5d74">01695</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_group__fsmos_1gac6c8dbf1f133ab906d0f3490e0de5d74">logDebugf</link>(<emphasis role="keyword">const</emphasis>&#32;__FlashStringHelper&#32;*format,&#32;...)
<anchor xml:id="_FsmOS_8cpp_source_1l01696"/>01696 {
<anchor xml:id="_FsmOS_8cpp_source_1l01697"/>01697 &#32;&#32;&#32;&#32;va_list&#32;args;
<anchor xml:id="_FsmOS_8cpp_source_1l01698"/>01698 &#32;&#32;&#32;&#32;va_start(args,&#32;format);
<anchor xml:id="_FsmOS_8cpp_source_1l01699"/>01699 &#32;&#32;&#32;&#32;<link linkend="_FsmOS_8cpp_1a239a4328ae320786411ee555c3a20250">logFormattedV</link>(<link linkend="_classScheduler_1ab2bd6aa333e3f108343fedb022eaca79ae533a07bf1ba23e55ae9769602ac74a7">Scheduler::LOG_DEBUG</link>,&#32;format,&#32;args);
<anchor xml:id="_FsmOS_8cpp_source_1l01700"/>01700 &#32;&#32;&#32;&#32;va_end(args);
<anchor xml:id="_FsmOS_8cpp_source_1l01701"/>01701 }
<anchor xml:id="_FsmOS_8cpp_source_1l01702"/>01702 
<anchor xml:id="_FsmOS_8cpp_source_1l01703"/><link linkend="_group__fsmos_1ga0fd80592a7d1d2fd9b1b52081a8d69cb">01703</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_group__fsmos_1ga0fd80592a7d1d2fd9b1b52081a8d69cb">logInfof</link>(<emphasis role="keyword">const</emphasis>&#32;__FlashStringHelper&#32;*format,&#32;...)
<anchor xml:id="_FsmOS_8cpp_source_1l01704"/>01704 {
<anchor xml:id="_FsmOS_8cpp_source_1l01705"/>01705 &#32;&#32;&#32;&#32;va_list&#32;args;
<anchor xml:id="_FsmOS_8cpp_source_1l01706"/>01706 &#32;&#32;&#32;&#32;va_start(args,&#32;format);
<anchor xml:id="_FsmOS_8cpp_source_1l01707"/>01707 &#32;&#32;&#32;&#32;<link linkend="_FsmOS_8cpp_1a239a4328ae320786411ee555c3a20250">logFormattedV</link>(<link linkend="_classScheduler_1ab2bd6aa333e3f108343fedb022eaca79ac50a6d9344241d486cea80292b5ba327">Scheduler::LOG_INFO</link>,&#32;format,&#32;args);
<anchor xml:id="_FsmOS_8cpp_source_1l01708"/>01708 &#32;&#32;&#32;&#32;va_end(args);
<anchor xml:id="_FsmOS_8cpp_source_1l01709"/>01709 }
<anchor xml:id="_FsmOS_8cpp_source_1l01710"/>01710 
<anchor xml:id="_FsmOS_8cpp_source_1l01711"/><link linkend="_group__fsmos_1ga58264bc1f779d2cd6cb6a8c733a17a21">01711</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_group__fsmos_1ga58264bc1f779d2cd6cb6a8c733a17a21">logWarnf</link>(<emphasis role="keyword">const</emphasis>&#32;__FlashStringHelper&#32;*format,&#32;...)
<anchor xml:id="_FsmOS_8cpp_source_1l01712"/>01712 {
<anchor xml:id="_FsmOS_8cpp_source_1l01713"/>01713 &#32;&#32;&#32;&#32;va_list&#32;args;
<anchor xml:id="_FsmOS_8cpp_source_1l01714"/>01714 &#32;&#32;&#32;&#32;va_start(args,&#32;format);
<anchor xml:id="_FsmOS_8cpp_source_1l01715"/>01715 &#32;&#32;&#32;&#32;<link linkend="_FsmOS_8cpp_1a239a4328ae320786411ee555c3a20250">logFormattedV</link>(<link linkend="_classScheduler_1ab2bd6aa333e3f108343fedb022eaca79a43ae65cd6d87b4c15b8ddb2e1a110286">Scheduler::LOG_WARN</link>,&#32;format,&#32;args);
<anchor xml:id="_FsmOS_8cpp_source_1l01716"/>01716 &#32;&#32;&#32;&#32;va_end(args);
<anchor xml:id="_FsmOS_8cpp_source_1l01717"/>01717 }
<anchor xml:id="_FsmOS_8cpp_source_1l01718"/>01718 
<anchor xml:id="_FsmOS_8cpp_source_1l01719"/><link linkend="_group__fsmos_1gade3c130d653bf887af5b2f6120f388ad">01719</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_group__fsmos_1gade3c130d653bf887af5b2f6120f388ad">logErrorf</link>(<emphasis role="keyword">const</emphasis>&#32;__FlashStringHelper&#32;*format,&#32;...)
<anchor xml:id="_FsmOS_8cpp_source_1l01720"/>01720 {
<anchor xml:id="_FsmOS_8cpp_source_1l01721"/>01721 &#32;&#32;&#32;&#32;va_list&#32;args;
<anchor xml:id="_FsmOS_8cpp_source_1l01722"/>01722 &#32;&#32;&#32;&#32;va_start(args,&#32;format);
<anchor xml:id="_FsmOS_8cpp_source_1l01723"/>01723 &#32;&#32;&#32;&#32;<link linkend="_FsmOS_8cpp_1a239a4328ae320786411ee555c3a20250">logFormattedV</link>(<link linkend="_classScheduler_1ab2bd6aa333e3f108343fedb022eaca79aa56e45ee8b2ce204989dcede4bfa7805">Scheduler::LOG_ERROR</link>,&#32;format,&#32;args);
<anchor xml:id="_FsmOS_8cpp_source_1l01724"/>01724 &#32;&#32;&#32;&#32;va_end(args);
<anchor xml:id="_FsmOS_8cpp_source_1l01725"/>01725 }
<anchor xml:id="_FsmOS_8cpp_source_1l01726"/>01726 
<anchor xml:id="_FsmOS_8cpp_source_1l01727"/>01727 <emphasis role="comment">/*&#32;==================&#32;Additional&#32;Scheduler&#32;System&#32;Methods&#32;==================&#32;*/</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01728"/>01728 
<anchor xml:id="_FsmOS_8cpp_source_1l01729"/><link linkend="_classScheduler_1aaba5575657eb6345d1da5442be50f29c">01729</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classScheduler_1aaba5575657eb6345d1da5442be50f29c">Scheduler::enableWatchdog</link>(uint8_t&#32;timeout)
<anchor xml:id="_FsmOS_8cpp_source_1l01730"/>01730 {
<anchor xml:id="_FsmOS_8cpp_source_1l01731"/>01731 <emphasis role="preprocessor">#if&#32;defined(__AVR__)</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01732"/>01732 &#32;&#32;&#32;&#32;wdt_enable(timeout);
<anchor xml:id="_FsmOS_8cpp_source_1l01733"/>01733 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01734"/>01734 }
<anchor xml:id="_FsmOS_8cpp_source_1l01735"/>01735 
<anchor xml:id="_FsmOS_8cpp_source_1l01736"/><link linkend="_classScheduler_1aa541036ba6db4765a2270d39f74c8758">01736</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classScheduler_1aa541036ba6db4765a2270d39f74c8758">Scheduler::feedWatchdog</link>()
<anchor xml:id="_FsmOS_8cpp_source_1l01737"/>01737 {
<anchor xml:id="_FsmOS_8cpp_source_1l01738"/>01738 <emphasis role="preprocessor">#if&#32;defined(__AVR__)</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01739"/>01739 &#32;&#32;&#32;&#32;wdt_reset();
<anchor xml:id="_FsmOS_8cpp_source_1l01740"/>01740 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01741"/>01741 }
<anchor xml:id="_FsmOS_8cpp_source_1l01742"/>01742 
<anchor xml:id="_FsmOS_8cpp_source_1l01743"/><link linkend="_classScheduler_1a1ded1b3c0e167dde6574bc8b4a0aca63">01743</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classScheduler_1a1ded1b3c0e167dde6574bc8b4a0aca63">Scheduler::logFormatted</link>(<link linkend="_classTask">Task</link>&#32;*task,&#32;<link linkend="_classScheduler_1ab2bd6aa333e3f108343fedb022eaca79">LogLevel</link>&#32;level,&#32;<emphasis role="keyword">const</emphasis>&#32;__FlashStringHelper&#32;*format,&#32;...)
<anchor xml:id="_FsmOS_8cpp_source_1l01744"/>01744 {
<anchor xml:id="_FsmOS_8cpp_source_1l01745"/>01745 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Simplified&#32;implementation&#32;-&#32;just&#32;log&#32;the&#32;format&#32;string</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01746"/>01746 &#32;&#32;&#32;&#32;<link linkend="_classScheduler_1acaab28b4949d5a175212d134c04cf406">logMessage</link>(task,&#32;level,&#32;format);
<anchor xml:id="_FsmOS_8cpp_source_1l01747"/>01747 }
<anchor xml:id="_FsmOS_8cpp_source_1l01748"/>01748 
<anchor xml:id="_FsmOS_8cpp_source_1l01749"/><link linkend="_classScheduler_1a86ddccd30b5b2af61d3cb76d53ca1b4b">01749</link> uint8_t&#32;<link linkend="_classScheduler_1a86ddccd30b5b2af61d3cb76d53ca1b4b">Scheduler::getFreeQueueSlots</link>()<emphasis role="keyword">&#32;const</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01750"/>01750 <emphasis role="keyword"></emphasis>{
<anchor xml:id="_FsmOS_8cpp_source_1l01751"/>01751 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>uint8_t<emphasis role="keyword">&gt;</emphasis>(<link linkend="_FsmOS_8h_1addd900ed12192f9ff21848d61476d5f2">MAX_MESSAGE_POOL_SIZE</link>&#32;-&#32;<link linkend="_classScheduler_1a13367b7d53dc7bf804d9158e57bff5f7">msgCount</link>);
<anchor xml:id="_FsmOS_8cpp_source_1l01752"/>01752 }
<anchor xml:id="_FsmOS_8cpp_source_1l01753"/>01753 
<anchor xml:id="_FsmOS_8cpp_source_1l01754"/><link linkend="_classScheduler_1a2ccde4ea0d8e9a6996c4a897aee709e9">01754</link> uint8_t&#32;<link linkend="_classScheduler_1a2ccde4ea0d8e9a6996c4a897aee709e9">Scheduler::getMostDelayingTask</link>()<emphasis role="keyword">&#32;const</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01755"/>01755 <emphasis role="keyword"></emphasis>{
<anchor xml:id="_FsmOS_8cpp_source_1l01756"/>01756 &#32;&#32;&#32;&#32;uint8_t&#32;mostDelayingTaskId&#32;=&#32;0;
<anchor xml:id="_FsmOS_8cpp_source_1l01757"/>01757 &#32;&#32;&#32;&#32;uint16_t&#32;maxDelayCount&#32;=&#32;0;
<anchor xml:id="_FsmOS_8cpp_source_1l01758"/>01758 
<anchor xml:id="_FsmOS_8cpp_source_1l01759"/>01759 &#32;&#32;&#32;&#32;<link linkend="_structTaskNode">TaskNode</link>&#32;*current&#32;=&#32;<link linkend="_classScheduler_1a9eb682b2716a34e7c3eb742782aa42e2">taskHead</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l01760"/>01760 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(current&#32;!=&#32;<emphasis role="keyword">nullptr</emphasis>)
<anchor xml:id="_FsmOS_8cpp_source_1l01761"/>01761 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01762"/>01762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(current-&gt;<link linkend="_structTaskNode_1a04f109a440464fd95c18d0f3758ee0af">task</link>&#32;&amp;&amp;&#32;current-&gt;<link linkend="_structTaskNode_1a04f109a440464fd95c18d0f3758ee0af">task</link>-&gt;<link linkend="_classTask_1ac5ab04209706d6b3a0fdd5266dc0d97f">getDelayCount</link>()&#32;&gt;&#32;maxDelayCount)
<anchor xml:id="_FsmOS_8cpp_source_1l01763"/>01763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01764"/>01764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;maxDelayCount&#32;=&#32;current-&gt;<link linkend="_structTaskNode_1a04f109a440464fd95c18d0f3758ee0af">task</link>-&gt;<link linkend="_classTask_1ac5ab04209706d6b3a0fdd5266dc0d97f">getDelayCount</link>();
<anchor xml:id="_FsmOS_8cpp_source_1l01765"/>01765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mostDelayingTaskId&#32;=&#32;current-&gt;<link linkend="_structTaskNode_1a04f109a440464fd95c18d0f3758ee0af">task</link>-&gt;<link linkend="_classTask_1a548d620b8f5d7490b8cdc235dbfdf6eb">getId</link>();
<anchor xml:id="_FsmOS_8cpp_source_1l01766"/>01766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01767"/>01767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;current&#32;=&#32;current-&gt;<link linkend="_structTaskNode_1af6f74dbb5d2baa80d10dabc43b593ffd">next</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l01768"/>01768 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01769"/>01769 
<anchor xml:id="_FsmOS_8cpp_source_1l01770"/>01770 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;mostDelayingTaskId;
<anchor xml:id="_FsmOS_8cpp_source_1l01771"/>01771 }
<anchor xml:id="_FsmOS_8cpp_source_1l01772"/>01772 
<anchor xml:id="_FsmOS_8cpp_source_1l01773"/><link linkend="_classScheduler_1ad767f69dc7aab8c8bd0f15720693d1c2">01773</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classScheduler_1ad767f69dc7aab8c8bd0f15720693d1c2">Scheduler::allocateMsgNodesChunk</link>()
<anchor xml:id="_FsmOS_8cpp_source_1l01774"/>01774 {
<anchor xml:id="_FsmOS_8cpp_source_1l01775"/>01775 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classScheduler_1a15bd5f3410a22f750d9cc40579e11084">totalNodes</link>&#32;&gt;=&#32;<link linkend="_FsmOS_8h_1addd900ed12192f9ff21848d61476d5f2">MAX_MESSAGE_POOL_SIZE</link>)
<anchor xml:id="_FsmOS_8cpp_source_1l01776"/>01776 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01777"/>01777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l01778"/>01778 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01779"/>01779 
<anchor xml:id="_FsmOS_8cpp_source_1l01780"/>01780 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Allocate&#32;up&#32;to&#32;4&#32;nodes,&#32;but&#32;don’t&#32;exceed&#32;hard&#32;cap</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01781"/>01781 &#32;&#32;&#32;&#32;uint8_t&#32;canAdd&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>uint8_t<emphasis role="keyword">&gt;</emphasis>(<link linkend="_FsmOS_8h_1addd900ed12192f9ff21848d61476d5f2">MAX_MESSAGE_POOL_SIZE</link>&#32;-&#32;<link linkend="_classScheduler_1a15bd5f3410a22f750d9cc40579e11084">totalNodes</link>);
<anchor xml:id="_FsmOS_8cpp_source_1l01782"/>01782 &#32;&#32;&#32;&#32;uint8_t&#32;toAdd&#32;=&#32;(canAdd&#32;&gt;=&#32;4)&#32;?&#32;4&#32;:&#32;canAdd;
<anchor xml:id="_FsmOS_8cpp_source_1l01783"/>01783 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(uint8_t&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;toAdd;&#32;i++)
<anchor xml:id="_FsmOS_8cpp_source_1l01784"/>01784 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01785"/>01785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structScheduler_1_1MsgNode">MsgNode</link>&#32;*n&#32;=&#32;(<link linkend="_structScheduler_1_1MsgNode">MsgNode</link>&#32;*)malloc(<emphasis role="keyword">sizeof</emphasis>(<link linkend="_structScheduler_1_1MsgNode">MsgNode</link>));
<anchor xml:id="_FsmOS_8cpp_source_1l01786"/>01786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!n)
<anchor xml:id="_FsmOS_8cpp_source_1l01787"/>01787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01788"/>01788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Allocation&#32;failed;&#32;stop&#32;early</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01789"/>01789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l01790"/>01790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01791"/>01791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Initialize&#32;node&#32;payload&#32;to&#32;safe&#32;defaults</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01792"/>01792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n-&gt;<link linkend="_structScheduler_1_1MsgNode_1a91702c9faa02b67ac24d3924be9fdaee">next</link>&#32;=&#32;<link linkend="_classScheduler_1a59fa5a068cd9a36672b39362982c2e97">freeHead</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l01793"/>01793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n-&gt;<link linkend="_structScheduler_1_1MsgNode_1ab2623f2b15be317f6b54848af08ce97c">payload</link>.<link linkend="_structScheduler_1_1QueuedMessage_1ab2d20d6197328866badf5e94f048255c">targetTaskId</link>&#32;=&#32;0;
<anchor xml:id="_FsmOS_8cpp_source_1l01794"/>01794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n-&gt;<link linkend="_structScheduler_1_1MsgNode_1ab2623f2b15be317f6b54848af08ce97c">payload</link>.<link linkend="_structScheduler_1_1QueuedMessage_1a4920af5804a48c59719261484553f169">msg</link>.type&#32;=&#32;0;
<anchor xml:id="_FsmOS_8cpp_source_1l01795"/>01795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n-&gt;<link linkend="_structScheduler_1_1MsgNode_1ab2623f2b15be317f6b54848af08ce97c">payload</link>.<link linkend="_structScheduler_1_1QueuedMessage_1a4920af5804a48c59719261484553f169">msg</link>.topic&#32;=&#32;0;
<anchor xml:id="_FsmOS_8cpp_source_1l01796"/>01796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n-&gt;<link linkend="_structScheduler_1_1MsgNode_1ab2623f2b15be317f6b54848af08ce97c">payload</link>.<link linkend="_structScheduler_1_1QueuedMessage_1a4920af5804a48c59719261484553f169">msg</link>.arg&#32;=&#32;0;
<anchor xml:id="_FsmOS_8cpp_source_1l01797"/>01797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n-&gt;<link linkend="_structScheduler_1_1MsgNode_1ab2623f2b15be317f6b54848af08ce97c">payload</link>.<link linkend="_structScheduler_1_1QueuedMessage_1a4920af5804a48c59719261484553f169">msg</link>.refCount&#32;=&#32;0;
<anchor xml:id="_FsmOS_8cpp_source_1l01798"/>01798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n-&gt;<link linkend="_structScheduler_1_1MsgNode_1ab2623f2b15be317f6b54848af08ce97c">payload</link>.<link linkend="_structScheduler_1_1QueuedMessage_1aa23777039e9446ad21fb93a6ec1e7e65">buffer</link>&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l01799"/>01799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n-&gt;<link linkend="_structScheduler_1_1MsgNode_1ab2623f2b15be317f6b54848af08ce97c">payload</link>.<link linkend="_structScheduler_1_1QueuedMessage_1a79ba2cf8a493da73c1b64f9aa2549938">capacity</link>&#32;=&#32;0;
<anchor xml:id="_FsmOS_8cpp_source_1l01800"/>01800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classScheduler_1a59fa5a068cd9a36672b39362982c2e97">freeHead</link>&#32;=&#32;n;
<anchor xml:id="_FsmOS_8cpp_source_1l01801"/>01801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classScheduler_1a15bd5f3410a22f750d9cc40579e11084">totalNodes</link>++;
<anchor xml:id="_FsmOS_8cpp_source_1l01802"/>01802 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01803"/>01803 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l01804"/>01804 }
<anchor xml:id="_FsmOS_8cpp_source_1l01805"/>01805 
<anchor xml:id="_FsmOS_8cpp_source_1l01806"/><link linkend="_classScheduler_1acb1eb89034fcb709b8769ff9060063e5">01806</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classScheduler_1acb1eb89034fcb709b8769ff9060063e5">Scheduler::enqueueQueuedMessage</link>(uint8_t&#32;targetTaskId,&#32;uint8_t&#32;topic,&#32;uint8_t&#32;type,&#32;uint16_t&#32;arg)
<anchor xml:id="_FsmOS_8cpp_source_1l01807"/>01807 {
<anchor xml:id="_FsmOS_8cpp_source_1l01808"/>01808 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classScheduler_1a13367b7d53dc7bf804d9158e57bff5f7">msgCount</link>&#32;&gt;=&#32;<link linkend="_FsmOS_8h_1addd900ed12192f9ff21848d61476d5f2">MAX_MESSAGE_POOL_SIZE</link>)
<anchor xml:id="_FsmOS_8cpp_source_1l01809"/>01809 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01810"/>01810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l01811"/>01811 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01812"/>01812 
<anchor xml:id="_FsmOS_8cpp_source_1l01813"/>01813 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_classScheduler_1a59fa5a068cd9a36672b39362982c2e97">freeHead</link>)
<anchor xml:id="_FsmOS_8cpp_source_1l01814"/>01814 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01815"/>01815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classScheduler_1ad767f69dc7aab8c8bd0f15720693d1c2">allocateMsgNodesChunk</link>();
<anchor xml:id="_FsmOS_8cpp_source_1l01816"/>01816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_classScheduler_1a59fa5a068cd9a36672b39362982c2e97">freeHead</link>)
<anchor xml:id="_FsmOS_8cpp_source_1l01817"/>01817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01818"/>01818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l01819"/>01819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01820"/>01820 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01821"/>01821 
<anchor xml:id="_FsmOS_8cpp_source_1l01822"/>01822 &#32;&#32;&#32;&#32;<link linkend="_structScheduler_1_1MsgNode">MsgNode</link>&#32;*node&#32;=&#32;<link linkend="_classScheduler_1a59fa5a068cd9a36672b39362982c2e97">freeHead</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l01823"/>01823 &#32;&#32;&#32;&#32;<link linkend="_classScheduler_1a59fa5a068cd9a36672b39362982c2e97">freeHead</link>&#32;=&#32;<link linkend="_classScheduler_1a59fa5a068cd9a36672b39362982c2e97">freeHead</link>-&gt;<link linkend="_structScheduler_1_1MsgNode_1a91702c9faa02b67ac24d3924be9fdaee">next</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l01824"/>01824 
<anchor xml:id="_FsmOS_8cpp_source_1l01825"/>01825 &#32;&#32;&#32;&#32;<link linkend="_structScheduler_1_1QueuedMessage">QueuedMessage</link>&#32;&amp;slot&#32;=&#32;node-&gt;<link linkend="_structScheduler_1_1MsgNode_1ab2623f2b15be317f6b54848af08ce97c">payload</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l01826"/>01826 &#32;&#32;&#32;&#32;slot.<link linkend="_structScheduler_1_1QueuedMessage_1ab2d20d6197328866badf5e94f048255c">targetTaskId</link>&#32;=&#32;targetTaskId;
<anchor xml:id="_FsmOS_8cpp_source_1l01827"/>01827 &#32;&#32;&#32;&#32;slot.<link linkend="_structScheduler_1_1QueuedMessage_1a4920af5804a48c59719261484553f169">msg</link>.type&#32;=&#32;type;
<anchor xml:id="_FsmOS_8cpp_source_1l01828"/>01828 &#32;&#32;&#32;&#32;slot.<link linkend="_structScheduler_1_1QueuedMessage_1a4920af5804a48c59719261484553f169">msg</link>.topic&#32;=&#32;topic;
<anchor xml:id="_FsmOS_8cpp_source_1l01829"/>01829 &#32;&#32;&#32;&#32;slot.<link linkend="_structScheduler_1_1QueuedMessage_1a4920af5804a48c59719261484553f169">msg</link>.arg&#32;=&#32;arg;
<anchor xml:id="_FsmOS_8cpp_source_1l01830"/>01830 &#32;&#32;&#32;&#32;slot.<link linkend="_structScheduler_1_1QueuedMessage_1a4920af5804a48c59719261484553f169">msg</link>.refCount&#32;=&#32;0;
<anchor xml:id="_FsmOS_8cpp_source_1l01831"/>01831 
<anchor xml:id="_FsmOS_8cpp_source_1l01832"/>01832 &#32;&#32;&#32;&#32;node-&gt;<link linkend="_structScheduler_1_1MsgNode_1a91702c9faa02b67ac24d3924be9fdaee">next</link>&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l01833"/>01833 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classScheduler_1a2503ab5f7acb13a3bd46f35036af3c02">msgTail</link>)
<anchor xml:id="_FsmOS_8cpp_source_1l01834"/>01834 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01835"/>01835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classScheduler_1a2503ab5f7acb13a3bd46f35036af3c02">msgTail</link>-&gt;<link linkend="_structScheduler_1_1MsgNode_1a91702c9faa02b67ac24d3924be9fdaee">next</link>&#32;=&#32;node;
<anchor xml:id="_FsmOS_8cpp_source_1l01836"/>01836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classScheduler_1a2503ab5f7acb13a3bd46f35036af3c02">msgTail</link>&#32;=&#32;node;
<anchor xml:id="_FsmOS_8cpp_source_1l01837"/>01837 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01838"/>01838 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01839"/>01839 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01840"/>01840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classScheduler_1afc800a55be0f3da82ef2e79dad96496d">msgHead</link>&#32;=&#32;<link linkend="_classScheduler_1a2503ab5f7acb13a3bd46f35036af3c02">msgTail</link>&#32;=&#32;node;
<anchor xml:id="_FsmOS_8cpp_source_1l01841"/>01841 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01842"/>01842 &#32;&#32;&#32;&#32;<link linkend="_classScheduler_1a13367b7d53dc7bf804d9158e57bff5f7">msgCount</link>++;
<anchor xml:id="_FsmOS_8cpp_source_1l01843"/>01843 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l01844"/>01844 }
<anchor xml:id="_FsmOS_8cpp_source_1l01845"/>01845 
<anchor xml:id="_FsmOS_8cpp_source_1l01846"/><link linkend="_classScheduler_1a13c5cff92aab0d7516c469cb7196c1ba">01846</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classScheduler_1a13c5cff92aab0d7516c469cb7196c1ba">Scheduler::dequeueQueuedMessage</link>(<link linkend="_structScheduler_1_1QueuedMessage">QueuedMessage</link>&#32;&amp;out)
<anchor xml:id="_FsmOS_8cpp_source_1l01847"/>01847 {
<anchor xml:id="_FsmOS_8cpp_source_1l01848"/>01848 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classScheduler_1a13367b7d53dc7bf804d9158e57bff5f7">msgCount</link>&#32;==&#32;0)
<anchor xml:id="_FsmOS_8cpp_source_1l01849"/>01849 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01850"/>01850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l01851"/>01851 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01852"/>01852 &#32;&#32;&#32;&#32;<link linkend="_structScheduler_1_1MsgNode">MsgNode</link>&#32;*node&#32;=&#32;<link linkend="_classScheduler_1afc800a55be0f3da82ef2e79dad96496d">msgHead</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l01853"/>01853 &#32;&#32;&#32;&#32;<link linkend="_classScheduler_1afc800a55be0f3da82ef2e79dad96496d">msgHead</link>&#32;=&#32;node-&gt;<link linkend="_structScheduler_1_1MsgNode_1a91702c9faa02b67ac24d3924be9fdaee">next</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l01854"/>01854 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_classScheduler_1afc800a55be0f3da82ef2e79dad96496d">msgHead</link>)
<anchor xml:id="_FsmOS_8cpp_source_1l01855"/>01855 &#32;&#32;&#32;&#32;{
<anchor xml:id="_FsmOS_8cpp_source_1l01856"/>01856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classScheduler_1a2503ab5f7acb13a3bd46f35036af3c02">msgTail</link>&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l01857"/>01857 &#32;&#32;&#32;&#32;}
<anchor xml:id="_FsmOS_8cpp_source_1l01858"/>01858 &#32;&#32;&#32;&#32;out&#32;=&#32;node-&gt;<link linkend="_structScheduler_1_1MsgNode_1ab2623f2b15be317f6b54848af08ce97c">payload</link>;
<anchor xml:id="_FsmOS_8cpp_source_1l01859"/>01859 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Node&#32;is&#32;not&#32;recycled&#32;here&#32;to&#32;avoid&#32;in-flight&#32;overwrite;&#32;caller&#32;should&#32;recycle</emphasis>
<anchor xml:id="_FsmOS_8cpp_source_1l01860"/>01860 &#32;&#32;&#32;&#32;<link linkend="_classScheduler_1a13367b7d53dc7bf804d9158e57bff5f7">msgCount</link>--;
<anchor xml:id="_FsmOS_8cpp_source_1l01861"/>01861 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_FsmOS_8cpp_source_1l01862"/>01862 }
</programlisting></section>
