<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="FsmOS_8cpp" kind="file" language="C++">
    <compoundname>FsmOS.cpp</compoundname>
    <includes refid="FsmOS_8h" local="yes">FsmOS.h</includes>
    <includes local="no">stdarg.h</includes>
    <includes local="yes">../../src/BuildMemoryInfo.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">stdlib.h</includes>
    <incdepgraph>
      <node id="8">
        <label>../../src/BuildMemoryInfo.h</label>
      </node>
      <node id="1">
        <label>FsmOS.cpp</label>
        <link refid="FsmOS_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>FsmOS.h</label>
        <link refid="FsmOS_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>Arduino.h</label>
      </node>
      <node id="7">
        <label>new</label>
      </node>
      <node id="4">
        <label>stdarg.h</label>
      </node>
      <node id="5">
        <label>stdint.h</label>
      </node>
      <node id="9">
        <label>stdio.h</label>
      </node>
      <node id="11">
        <label>stdlib.h</label>
      </node>
      <node id="10">
        <label>string.h</label>
      </node>
      <node id="6">
        <label>util/atomic.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="var">
      <member refid="group__fsmos_1ga990d37c1e9d0a35fead6ab92e0da955e" kind="variable"><name>OS</name></member>
      <memberdef kind="variable" id="FsmOS_8cpp_1a4b161d5fdd35540a17153452e7c6af01" prot="public" static="no" mutable="no">
        <type><ref refid="structMemoryStats" kindref="compound">MemoryStats</ref></type>
        <definition>MemoryStats fsmos_memory_stats</definition>
        <argsstring></argsstring>
        <name>fsmos_memory_stats</name>
        <initializer>= {0, 0, 0, 0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="FsmOS.cpp" line="50" column="13" bodyfile="FsmOS.cpp" bodystart="50" bodyend="50"/>
        <referencedby refid="classMsgDataPool_1a5249e1c96225998fac71ba67c691740d" compoundref="FsmOS_8cpp" startline="199" endline="234">MsgDataPool::allocate</referencedby>
        <referencedby refid="classMsgDataPool_1a9b78a83be33a8a2a938f576eee7a98ee" compoundref="FsmOS_8cpp" startline="236" endline="256">MsgDataPool::deallocate</referencedby>
        <referencedby refid="classScheduler_1a26f332614d3126f5efdc42092138b0e6" compoundref="FsmOS_8cpp" startline="1649" endline="1653">Scheduler::getMemoryLeakStats</referencedby>
        <referencedby refid="classMsgDataPool_1aed7f37c999de507b0441f863a4942f2a" compoundref="FsmOS_8cpp" startline="278" endline="306">MsgDataPool::initialize</referencedby>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="FsmOS_8cpp_1ade20b4a6bf510c7319a727cdf86ebe37" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void printLogHeader</definition>
        <argsstring>(Scheduler::LogLevel level)</argsstring>
        <name>printLogHeader</name>
        <param>
          <type><ref refid="classScheduler_1ab2bd6aa333e3f108343fedb022eaca79" kindref="member">Scheduler::LogLevel</ref></type>
          <declname>level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="FsmOS.cpp" line="1657" column="13" bodyfile="FsmOS.cpp" bodystart="1657" bodyend="1681"/>
        <references refid="classScheduler_1ab2bd6aa333e3f108343fedb022eaca79aa56e45ee8b2ce204989dcede4bfa7805" compoundref="FsmOS_8h" startline="1200">Scheduler::LOG_ERROR</references>
        <references refid="classScheduler_1ab2bd6aa333e3f108343fedb022eaca79ac50a6d9344241d486cea80292b5ba327" compoundref="FsmOS_8h" startline="1198">Scheduler::LOG_INFO</references>
        <references refid="classScheduler_1ab2bd6aa333e3f108343fedb022eaca79a43ae65cd6d87b4c15b8ddb2e1a110286" compoundref="FsmOS_8h" startline="1199">Scheduler::LOG_WARN</references>
        <referencedby refid="FsmOS_8cpp_1a239a4328ae320786411ee555c3a20250" compoundref="FsmOS_8cpp" startline="1683" endline="1694">logFormattedV</referencedby>
      </memberdef>
      <memberdef kind="function" id="FsmOS_8cpp_1a239a4328ae320786411ee555c3a20250" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void logFormattedV</definition>
        <argsstring>(Scheduler::LogLevel level, const __FlashStringHelper *format, va_list args)</argsstring>
        <name>logFormattedV</name>
        <param>
          <type><ref refid="classScheduler_1ab2bd6aa333e3f108343fedb022eaca79" kindref="member">Scheduler::LogLevel</ref></type>
          <declname>level</declname>
        </param>
        <param>
          <type>const __FlashStringHelper *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="FsmOS.cpp" line="1683" column="13" bodyfile="FsmOS.cpp" bodystart="1683" bodyend="1694"/>
        <references refid="classScheduler_1acaab28b4949d5a175212d134c04cf406" compoundref="FsmOS_8cpp" startline="1001" endline="1036">Scheduler::logMessage</references>
        <references refid="group__fsmos_1ga990d37c1e9d0a35fead6ab92e0da955e" compoundref="FsmOS_8cpp" startline="48">OS</references>
        <references refid="FsmOS_8cpp_1ade20b4a6bf510c7319a727cdf86ebe37" compoundref="FsmOS_8cpp" startline="1657" endline="1681">printLogHeader</references>
        <referencedby refid="group__fsmos_1gac6c8dbf1f133ab906d0f3490e0de5d74" compoundref="FsmOS_8cpp" startline="1695" endline="1701">logDebugf</referencedby>
        <referencedby refid="group__fsmos_1gade3c130d653bf887af5b2f6120f388ad" compoundref="FsmOS_8cpp" startline="1719" endline="1725">logErrorf</referencedby>
        <referencedby refid="group__fsmos_1ga0fd80592a7d1d2fd9b1b52081a8d69cb" compoundref="FsmOS_8cpp" startline="1703" endline="1709">logInfof</referencedby>
        <referencedby refid="group__fsmos_1ga58264bc1f779d2cd6cb6a8c733a17a21" compoundref="FsmOS_8cpp" startline="1711" endline="1717">logWarnf</referencedby>
      </memberdef>
      <member refid="group__fsmos_1gac6c8dbf1f133ab906d0f3490e0de5d74" kind="function"><name>logDebugf</name></member>
      <member refid="group__fsmos_1ga0fd80592a7d1d2fd9b1b52081a8d69cb" kind="function"><name>logInfof</name></member>
      <member refid="group__fsmos_1ga58264bc1f779d2cd6cb6a8c733a17a21" kind="function"><name>logWarnf</name></member>
      <member refid="group__fsmos_1gade3c130d653bf887af5b2f6120f388ad" kind="function"><name>logErrorf</name></member>
    </sectiondef>
    <briefdescription>
<para>Implementation of the FsmOS cooperative task scheduler. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Aykut Ã–zdemir <ulink url="mailto:aykutozdemirgyte@gmail.com">aykutozdemirgyte@gmail.com</ulink> </para>
</simplesect>
<simplesect kind="date"><para>2025-10-02</para>
</simplesect>
This file contains the implementation of the FsmOS scheduler and task management system. It provides:</para>
<para><itemizedlist>
<listitem><para><ref refid="classTask" kindref="compound">Task</ref> scheduling and execution</para>
</listitem><listitem><para>Message passing and event handling</para>
</listitem><listitem><para>Memory management and monitoring</para>
</listitem><listitem><para>System diagnostics and profiling</para>
</listitem><listitem><para>Hardware watchdog integration</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="version"><para>1.3.0 - Major refactoring and code organization </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="FsmOS_8h" kindref="compound">FsmOS.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdarg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../../src/BuildMemoryInfo.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__AVR__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Stream<sp/>stdio<sp/>directly<sp/>to<sp/>Serial<sp/>to<sp/>allow<sp/>vfprintf_P<sp/>without<sp/>intermediate<sp/>buffers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>serial_putc(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c,<sp/>FILE<sp/>*)</highlight></codeline>
<codeline lineno="29"><highlight class="normal">{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.write(c);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="32"><highlight class="normal">}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>FILE<sp/>serial_stdout;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init_stdio_to_serial()</highlight></codeline>
<codeline lineno="35"><highlight class="normal">{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>inited<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inited)</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>inited<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>fdev_setup_stream(&amp;serial_stdout,<sp/>serial_putc,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>_FDEV_SETUP_WRITE);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>stdout<sp/>=<sp/>&amp;serial_stdout;</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>==================<sp/>Global<sp/>Variables<sp/>==================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="group__fsmos_1ga990d37c1e9d0a35fead6ab92e0da955e" refkind="member"><highlight class="normal"><ref refid="classScheduler" kindref="compound">Scheduler</ref><sp/><ref refid="group__fsmos_1ga990d37c1e9d0a35fead6ab92e0da955e" kindref="member">OS</ref>;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="FsmOS_8cpp_1a4b161d5fdd35540a17153452e7c6af01" refkind="member"><highlight class="normal"><ref refid="structMemoryStats" kindref="compound">MemoryStats</ref><sp/><ref refid="FsmOS_8cpp_1a4b161d5fdd35540a17153452e7c6af01" kindref="member">fsmos_memory_stats</ref><sp/>=<sp/>{0,<sp/>0,<sp/>0,<sp/>0};</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>==================<sp/>TimerT<sp/>Implementation<sp/>==================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TimerT&lt;T&gt;::startTimer(T<sp/>d)</highlight></codeline>
<codeline lineno="55"><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>startMs<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="group__fsmos_1ga990d37c1e9d0a35fead6ab92e0da955e" kindref="member">OS</ref>.<ref refid="classScheduler_1afe202befb3d6eac9dbb6acd1a4b09401" kindref="member">now</ref>());</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>durationMs<sp/>=<sp/>d;</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TimerT&lt;T&gt;::isExpired()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="62"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(durationMs<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>current_time<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="group__fsmos_1ga990d37c1e9d0a35fead6ab92e0da955e" kindref="member">OS</ref>.<ref refid="classScheduler_1afe202befb3d6eac9dbb6acd1a4b09401" kindref="member">now</ref>());</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Handle<sp/>timer<sp/>overflow<sp/>correctly<sp/>using<sp/>safer<sp/>arithmetic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current_time<sp/>&gt;=<sp/>startMs)</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>overflow<sp/>case<sp/>-<sp/>simple<sp/>subtraction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(current_time<sp/>-<sp/>startMs)<sp/>&gt;=<sp/>durationMs;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Timer<sp/>overflow<sp/>occurred<sp/>-<sp/>calculate<sp/>elapsed<sp/>time<sp/>correctly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>max_value<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(~static_cast&lt;T&gt;(0));</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>elapsed<sp/>time:<sp/>time<sp/>before<sp/>overflow<sp/>+<sp/>time<sp/>after<sp/>overflow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>elapsed_before_overflow<sp/>=<sp/>max_value<sp/>-<sp/>startMs<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>elapsed_after_overflow<sp/>=<sp/>current_time;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>total_elapsed<sp/>=<sp/>elapsed_before_overflow<sp/>+<sp/>elapsed_after_overflow;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>overflow<sp/>in<sp/>the<sp/>addition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(total_elapsed<sp/>&lt;<sp/>elapsed_before_overflow)</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Addition<sp/>overflowed,<sp/>timer<sp/>definitely<sp/>expired</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>total_elapsed<sp/>&gt;=<sp/>durationMs;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Explicit<sp/>template<sp/>instantiations<sp/>for<sp/>common<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TimerT&lt;uint8_t&gt;;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TimerT&lt;uint16_t&gt;;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TimerT&lt;uint32_t&gt;;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>==================<sp/>SharedMsg<sp/>Implementation<sp/>==================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="classSharedMsg_1a71c37ab34ce77dcdf80c756635b68ff2" refkind="member"><highlight class="normal"><ref refid="classSharedMsg_1a71c37ab34ce77dcdf80c756635b68ff2" kindref="member">SharedMsg::SharedMsg</ref>()<sp/>:<sp/>msgData(nullptr)<sp/>{}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105" refid="classSharedMsg_1a432ceb0eefbe4e0affadab97f3fd2c36" refkind="member"><highlight class="normal"><ref refid="classSharedMsg_1a71c37ab34ce77dcdf80c756635b68ff2" kindref="member">SharedMsg::SharedMsg</ref>(MsgData<sp/>*msg)<sp/>:<sp/>msgData(msg)</highlight></codeline>
<codeline lineno="106"><highlight class="normal">{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classSharedMsg_1a53039c707f1dc8a52c05f33af2cb24ea" kindref="member">msgData</ref>)</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="FsmOS_8h_1aaaea265b31dabcfb3098bec7685c39e4" kindref="member">ATOMIC_BLOCK</ref>(<ref refid="FsmOS_8h_1a362c18b15a09703e42e1c246c47420ef" kindref="member">ATOMIC_RESTORESTATE</ref>)<sp/>{<sp/><ref refid="classSharedMsg_1a53039c707f1dc8a52c05f33af2cb24ea" kindref="member">msgData</ref>-&gt;refCount++;<sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113" refid="classSharedMsg_1a46d80a6afd7326ea7e692e14d2cbc6b8" refkind="member"><highlight class="normal"><ref refid="classSharedMsg_1a71c37ab34ce77dcdf80c756635b68ff2" kindref="member">SharedMsg::SharedMsg</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classSharedMsg" kindref="compound">SharedMsg</ref><sp/>&amp;other)<sp/>:<sp/>msgData(other.msgData)</highlight></codeline>
<codeline lineno="114"><highlight class="normal">{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classSharedMsg_1a53039c707f1dc8a52c05f33af2cb24ea" kindref="member">msgData</ref>)</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="FsmOS_8h_1aaaea265b31dabcfb3098bec7685c39e4" kindref="member">ATOMIC_BLOCK</ref>(<ref refid="FsmOS_8h_1a362c18b15a09703e42e1c246c47420ef" kindref="member">ATOMIC_RESTORESTATE</ref>)<sp/>{<sp/><ref refid="classSharedMsg_1a53039c707f1dc8a52c05f33af2cb24ea" kindref="member">msgData</ref>-&gt;refCount++;<sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121" refid="classSharedMsg_1ad7ce8df960b49c88f0d4264c23c93f81" refkind="member"><highlight class="normal"><ref refid="classSharedMsg" kindref="compound">SharedMsg</ref><sp/>&amp;<ref refid="classSharedMsg_1ad7ce8df960b49c88f0d4264c23c93f81" kindref="member">SharedMsg::operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classSharedMsg" kindref="compound">SharedMsg</ref><sp/>&amp;other)</highlight></codeline>
<codeline lineno="122"><highlight class="normal">{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>!=<sp/>&amp;other)</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Avoid<sp/>nested<sp/>atomic<sp/>blocks<sp/>by<sp/>doing<sp/>the<sp/>work<sp/>outside<sp/>atomic<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MsgData<sp/>*oldData<sp/>=<sp/><ref refid="classSharedMsg_1a53039c707f1dc8a52c05f33af2cb24ea" kindref="member">msgData</ref>;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MsgData<sp/>*newData<sp/>=<sp/>other.<ref refid="classSharedMsg_1a53039c707f1dc8a52c05f33af2cb24ea" kindref="member">msgData</ref>;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MsgData<sp/>*toDeallocate<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Single<sp/>atomic<sp/>block<sp/>for<sp/>the<sp/>entire<sp/>operation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="FsmOS_8h_1aaaea265b31dabcfb3098bec7685c39e4" kindref="member">ATOMIC_BLOCK</ref>(<ref refid="FsmOS_8h_1a362c18b15a09703e42e1c246c47420ef" kindref="member">ATOMIC_RESTORESTATE</ref>)</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newData)</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newData-&gt;refCount++;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classSharedMsg_1a53039c707f1dc8a52c05f33af2cb24ea" kindref="member">msgData</ref><sp/>=<sp/>newData;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oldData)</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oldData-&gt;refCount--;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oldData-&gt;refCount<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>toDeallocate<sp/>=<sp/>oldData;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Deallocate<sp/>outside<sp/>atomic<sp/>block<sp/>if<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(toDeallocate)</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__fsmos_1ga990d37c1e9d0a35fead6ab92e0da955e" kindref="member">OS</ref>.<ref refid="classScheduler_1a4025d35f57b05649764c44f3583fc2b6" kindref="member">msgPool</ref>.<ref refid="classMsgDataPool_1a9b78a83be33a8a2a938f576eee7a98ee" kindref="member">deallocate</ref>(toDeallocate);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="156"><highlight class="normal">}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158" refid="classSharedMsg_1a1819d3340c3fa3d00950eb087cd97131" refkind="member"><highlight class="normal"><ref refid="classSharedMsg_1a1819d3340c3fa3d00950eb087cd97131" kindref="member">SharedMsg::~SharedMsg</ref>()</highlight></codeline>
<codeline lineno="159"><highlight class="normal">{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="FsmOS_8h_1aaaea265b31dabcfb3098bec7685c39e4" kindref="member">ATOMIC_BLOCK</ref>(<ref refid="FsmOS_8h_1a362c18b15a09703e42e1c246c47420ef" kindref="member">ATOMIC_RESTORESTATE</ref>)<sp/>{<sp/><ref refid="classSharedMsg_1a458f5ccc07be87e716ef117e2eb0bce9" kindref="member">release</ref>();<sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163" refid="classSharedMsg_1a458f5ccc07be87e716ef117e2eb0bce9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classSharedMsg_1a458f5ccc07be87e716ef117e2eb0bce9" kindref="member">SharedMsg::release</ref>()</highlight></codeline>
<codeline lineno="164"><highlight class="normal">{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classSharedMsg_1a53039c707f1dc8a52c05f33af2cb24ea" kindref="member">msgData</ref>)</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classSharedMsg_1a53039c707f1dc8a52c05f33af2cb24ea" kindref="member">msgData</ref>-&gt;refCount--;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classSharedMsg_1a53039c707f1dc8a52c05f33af2cb24ea" kindref="member">msgData</ref>-&gt;refCount<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__fsmos_1ga990d37c1e9d0a35fead6ab92e0da955e" kindref="member">OS</ref>.<ref refid="classScheduler_1a4025d35f57b05649764c44f3583fc2b6" kindref="member">msgPool</ref>.<ref refid="classMsgDataPool_1a9b78a83be33a8a2a938f576eee7a98ee" kindref="member">deallocate</ref>(<ref refid="classSharedMsg_1a53039c707f1dc8a52c05f33af2cb24ea" kindref="member">msgData</ref>);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classSharedMsg_1a53039c707f1dc8a52c05f33af2cb24ea" kindref="member">msgData</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176" refid="classSharedMsg_1aa20f39d8440882aa6260e5802833e67e" refkind="member"><highlight class="normal">MsgData<sp/>*<ref refid="classSharedMsg_1aa20f39d8440882aa6260e5802833e67e" kindref="member">SharedMsg::getData</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classSharedMsg_1a53039c707f1dc8a52c05f33af2cb24ea" kindref="member">msgData</ref>;<sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178" refid="classSharedMsg_1ae7a947149acda480996050de99ee1b88" refkind="member"><highlight class="normal">MsgData<sp/>*<ref refid="classSharedMsg_1ae7a947149acda480996050de99ee1b88" kindref="member">SharedMsg::operator-&gt;</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classSharedMsg_1a53039c707f1dc8a52c05f33af2cb24ea" kindref="member">msgData</ref>;<sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180" refid="classSharedMsg_1aaba8448183f8a5204bd8bc887c7b4ec3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classSharedMsg_1aaba8448183f8a5204bd8bc887c7b4ec3" kindref="member">SharedMsg::isValid</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classSharedMsg_1a53039c707f1dc8a52c05f33af2cb24ea" kindref="member">msgData</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>==================<sp/>MsgDataPool<sp/>Implementation<sp/>==================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183" refid="classMsgDataPool_1a72b29d6cb8320d81b5b0d7304cf5dce2" refkind="member"><highlight class="normal"><ref refid="classMsgDataPool_1a72b29d6cb8320d81b5b0d7304cf5dce2" kindref="member">MsgDataPool::MsgDataPool</ref>()</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>pool(nullptr),<sp/>poolSize(0),<sp/>poolLimit(<ref refid="FsmOS_8h_1addd900ed12192f9ff21848d61476d5f2" kindref="member">MAX_MESSAGE_POOL_SIZE</ref>),<sp/>currentInUse(0),<sp/>nextFree(0)</highlight></codeline>
<codeline lineno="185"><highlight class="normal">{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>allocate<sp/>memory<sp/>during<sp/>static<sp/>initialization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Memory<sp/>will<sp/>be<sp/>allocated<sp/>lazily<sp/>when<sp/>first<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190" refid="classMsgDataPool_1af2acf581af3a23b651a8985191415f4b" refkind="member"><highlight class="normal"><ref refid="classMsgDataPool_1af2acf581af3a23b651a8985191415f4b" kindref="member">MsgDataPool::~MsgDataPool</ref>()</highlight></codeline>
<codeline lineno="191"><highlight class="normal">{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classMsgDataPool_1af8a8bed0618d0d7acccaf8f6c5256851" kindref="member">pool</ref>)</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/><ref refid="classMsgDataPool_1af8a8bed0618d0d7acccaf8f6c5256851" kindref="member">pool</ref>;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classMsgDataPool_1af8a8bed0618d0d7acccaf8f6c5256851" kindref="member">pool</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal">}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199" refid="classMsgDataPool_1a5249e1c96225998fac71ba67c691740d" refkind="member"><highlight class="normal">MsgData<sp/>*<ref refid="classMsgDataPool_1a5249e1c96225998fac71ba67c691740d" kindref="member">MsgDataPool::allocate</ref>()</highlight></codeline>
<codeline lineno="200"><highlight class="normal">{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Lazy<sp/>initialization<sp/>-<sp/>allocate<sp/>pool<sp/>if<sp/>not<sp/>already<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classMsgDataPool_1af8a8bed0618d0d7acccaf8f6c5256851" kindref="member">pool</ref><sp/>&amp;&amp;<sp/>!<ref refid="classMsgDataPool_1aed7f37c999de507b0441f863a4942f2a" kindref="member">initialize</ref>())</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="FsmOS_8cpp_1a4b161d5fdd35540a17153452e7c6af01" kindref="member">fsmos_memory_stats</ref>.<ref refid="structMemoryStats_1ad400667b2264e48d954b2feee8833f4a" kindref="member">total_allocated</ref><sp/>+=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="classMsgDataPool_1a0a148d6bfd58376877a0529f217ed33c" kindref="member">MsgData</ref>)<sp/>*<sp/><ref refid="classMsgDataPool_1a25c6c977b1a8a1682d63b4d5e0281ee2" kindref="member">poolLimit</ref>;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classMsgDataPool_1a0a148d6bfd58376877a0529f217ed33c" kindref="member">currentInUse</ref><sp/>&gt;=<sp/><ref refid="classMsgDataPool_1aca5724c9ea65b870035798e3cca1149d" kindref="member">poolSize</ref>)</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classMsgDataPool_1a0a148d6bfd58376877a0529f217ed33c" kindref="member">MsgData</ref><sp/>*msg<sp/>=<sp/>&amp;<ref refid="classMsgDataPool_1af8a8bed0618d0d7acccaf8f6c5256851" kindref="member">pool</ref>[<ref refid="classMsgDataPool_1a371ad52b35bd9e2e397abf1dabacc24e" kindref="member">nextFree</ref>];</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>message<sp/>to<sp/>initial<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>msg-&gt;refCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>msg-&gt;type<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>msg-&gt;topic<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>msg-&gt;arg<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classMsgDataPool_1a0a148d6bfd58376877a0529f217ed33c" kindref="member">currentInUse</ref>++;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classMsgDataPool_1a371ad52b35bd9e2e397abf1dabacc24e" kindref="member">nextFree</ref><sp/>=<sp/>(<ref refid="classMsgDataPool_1a371ad52b35bd9e2e397abf1dabacc24e" kindref="member">nextFree</ref><sp/>+<sp/>1)<sp/>%<sp/><ref refid="classMsgDataPool_1aca5724c9ea65b870035798e3cca1149d" kindref="member">poolSize</ref>;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="FsmOS_8cpp_1a4b161d5fdd35540a17153452e7c6af01" kindref="member">fsmos_memory_stats</ref>.<ref refid="structMemoryStats_1a66c3d8d757e4fcd55403c904fa4cb0d5" kindref="member">current_usage</ref><sp/>+=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="classMsgDataPool_1a0a148d6bfd58376877a0529f217ed33c" kindref="member">MsgData</ref>);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="FsmOS_8cpp_1a4b161d5fdd35540a17153452e7c6af01" kindref="member">fsmos_memory_stats</ref>.<ref refid="structMemoryStats_1a66c3d8d757e4fcd55403c904fa4cb0d5" kindref="member">current_usage</ref><sp/>&gt;<sp/><ref refid="FsmOS_8cpp_1a4b161d5fdd35540a17153452e7c6af01" kindref="member">fsmos_memory_stats</ref>.<ref refid="structMemoryStats_1ab27f5b00f150919cd24828e4f3136357" kindref="member">peak_usage</ref>)</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="FsmOS_8cpp_1a4b161d5fdd35540a17153452e7c6af01" kindref="member">fsmos_memory_stats</ref>.<ref refid="structMemoryStats_1ab27f5b00f150919cd24828e4f3136357" kindref="member">peak_usage</ref><sp/>=<sp/><ref refid="FsmOS_8cpp_1a4b161d5fdd35540a17153452e7c6af01" kindref="member">fsmos_memory_stats</ref>.<ref refid="structMemoryStats_1a66c3d8d757e4fcd55403c904fa4cb0d5" kindref="member">current_usage</ref>;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>adaptive<sp/>limit<sp/>based<sp/>on<sp/>usage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classMsgDataPool_1aec9292e845c522cd14c90764b8bfc054" kindref="member">updateAdaptiveLimit</ref>();</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>msg;</highlight></codeline>
<codeline lineno="234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236" refid="classMsgDataPool_1a9b78a83be33a8a2a938f576eee7a98ee" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classMsgDataPool_1a9b78a83be33a8a2a938f576eee7a98ee" kindref="member">MsgDataPool::deallocate</ref>(MsgData<sp/>*msg)</highlight></codeline>
<codeline lineno="237"><highlight class="normal">{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!msg<sp/>||<sp/>!<ref refid="classMsgDataPool_1af8a8bed0618d0d7acccaf8f6c5256851" kindref="member">pool</ref>)</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>message<sp/>to<sp/>initial<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>msg-&gt;refCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>msg-&gt;type<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>msg-&gt;topic<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>msg-&gt;arg<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classMsgDataPool_1a0a148d6bfd58376877a0529f217ed33c" kindref="member">currentInUse</ref>--;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="FsmOS_8cpp_1a4b161d5fdd35540a17153452e7c6af01" kindref="member">fsmos_memory_stats</ref>.<ref refid="structMemoryStats_1a66c3d8d757e4fcd55403c904fa4cb0d5" kindref="member">current_usage</ref><sp/>-=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="classMsgDataPool_1a0a148d6bfd58376877a0529f217ed33c" kindref="member">MsgData</ref>);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="FsmOS_8cpp_1a4b161d5fdd35540a17153452e7c6af01" kindref="member">fsmos_memory_stats</ref>.<ref refid="structMemoryStats_1aaefab979deb1c98218e9267d198de4fe" kindref="member">total_freed</ref><sp/>+=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="classMsgDataPool_1a0a148d6bfd58376877a0529f217ed33c" kindref="member">MsgData</ref>);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>adaptive<sp/>limit<sp/>based<sp/>on<sp/>usage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classMsgDataPool_1aec9292e845c522cd14c90764b8bfc054" kindref="member">updateAdaptiveLimit</ref>();</highlight></codeline>
<codeline lineno="256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258" refid="classMsgDataPool_1aec9292e845c522cd14c90764b8bfc054" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classMsgDataPool_1aec9292e845c522cd14c90764b8bfc054" kindref="member">MsgDataPool::updateAdaptiveLimit</ref>()</highlight></codeline>
<codeline lineno="259"><highlight class="normal">{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Simple<sp/>adaptive<sp/>algorithm:<sp/>increase<sp/>limit<sp/>if<sp/>we&apos;re<sp/>using<sp/>most<sp/>of<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classMsgDataPool_1a0a148d6bfd58376877a0529f217ed33c" kindref="member">currentInUse</ref><sp/>&gt;<sp/>(<ref refid="classMsgDataPool_1aca5724c9ea65b870035798e3cca1149d" kindref="member">poolSize</ref><sp/>*<sp/>3)<sp/>/<sp/>4<sp/>&amp;&amp;<sp/><ref refid="classMsgDataPool_1aca5724c9ea65b870035798e3cca1149d" kindref="member">poolSize</ref><sp/>&lt;<sp/><ref refid="classMsgDataPool_1a25c6c977b1a8a1682d63b4d5e0281ee2" kindref="member">poolLimit</ref>)</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classMsgDataPool_1aca5724c9ea65b870035798e3cca1149d" kindref="member">poolSize</ref>++;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Decrease<sp/>limit<sp/>if<sp/>we&apos;re<sp/>using<sp/>very<sp/>little</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classMsgDataPool_1a0a148d6bfd58376877a0529f217ed33c" kindref="member">currentInUse &lt; poolSize / 4 &amp;&amp; poolSize &gt;</ref><sp/>4)</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classMsgDataPool_1aca5724c9ea65b870035798e3cca1149d" kindref="member">poolSize</ref>--;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal">}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272" refid="classMsgDataPool_1a8d57ebaaeb9f6907fd2a6844d8611a68" refkind="member"><highlight class="normal">uint8_t<sp/><ref refid="classMsgDataPool_1a8d57ebaaeb9f6907fd2a6844d8611a68" kindref="member">MsgDataPool::getPoolSize</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classMsgDataPool_1aca5724c9ea65b870035798e3cca1149d" kindref="member">poolSize</ref>;<sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274" refid="classMsgDataPool_1a78472476fea071173c12900e76bb5525" refkind="member"><highlight class="normal">uint8_t<sp/><ref refid="classMsgDataPool_1a78472476fea071173c12900e76bb5525" kindref="member">MsgDataPool::getPoolLimit</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classMsgDataPool_1a25c6c977b1a8a1682d63b4d5e0281ee2" kindref="member">poolLimit</ref>;<sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276" refid="classMsgDataPool_1ab68fab96e5ad24d2879c0c852391d25e" refkind="member"><highlight class="normal">uint8_t<sp/><ref refid="classMsgDataPool_1ab68fab96e5ad24d2879c0c852391d25e" kindref="member">MsgDataPool::getCurrentInUse</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classMsgDataPool_1a0a148d6bfd58376877a0529f217ed33c" kindref="member">currentInUse</ref>;<sp/>}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278" refid="classMsgDataPool_1aed7f37c999de507b0441f863a4942f2a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classMsgDataPool_1aed7f37c999de507b0441f863a4942f2a" kindref="member">MsgDataPool::initialize</ref>()</highlight></codeline>
<codeline lineno="279"><highlight class="normal">{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>already<sp/>initialized,<sp/>return<sp/>true</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classMsgDataPool_1af8a8bed0618d0d7acccaf8f6c5256851" kindref="member">pool</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Try<sp/>to<sp/>allocate<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classMsgDataPool_1af8a8bed0618d0d7acccaf8f6c5256851" kindref="member">pool</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classMsgDataPool_1a0a148d6bfd58376877a0529f217ed33c" kindref="member">MsgData</ref>[<ref refid="classMsgDataPool_1a25c6c977b1a8a1682d63b4d5e0281ee2" kindref="member">poolLimit</ref>];</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classMsgDataPool_1af8a8bed0618d0d7acccaf8f6c5256851" kindref="member">pool</ref>)</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classMsgDataPool_1aca5724c9ea65b870035798e3cca1149d" kindref="member">poolSize</ref><sp/>=<sp/><ref refid="classMsgDataPool_1a25c6c977b1a8a1682d63b4d5e0281ee2" kindref="member">poolLimit</ref>;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>all<sp/>messages<sp/>as<sp/>free</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="classMsgDataPool_1a0a148d6bfd58376877a0529f217ed33c" kindref="member">uint8_t</ref><sp/><ref refid="classMsgDataPool_1a0a148d6bfd58376877a0529f217ed33c" kindref="member">i</ref><sp/>=<sp/>0;<sp/><ref refid="classMsgDataPool_1a0a148d6bfd58376877a0529f217ed33c" kindref="member">i</ref><sp/>&lt;<sp/><ref refid="classMsgDataPool_1aca5724c9ea65b870035798e3cca1149d" kindref="member">poolSize</ref>;<sp/><ref refid="classMsgDataPool_1a0a148d6bfd58376877a0529f217ed33c" kindref="member">i</ref>++)</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classMsgDataPool_1af8a8bed0618d0d7acccaf8f6c5256851" kindref="member">pool</ref>[<ref refid="classMsgDataPool_1a0a148d6bfd58376877a0529f217ed33c" kindref="member">i</ref>].refCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classMsgDataPool_1af8a8bed0618d0d7acccaf8f6c5256851" kindref="member">pool</ref>[<ref refid="classMsgDataPool_1a0a148d6bfd58376877a0529f217ed33c" kindref="member">i</ref>].type<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classMsgDataPool_1af8a8bed0618d0d7acccaf8f6c5256851" kindref="member">pool</ref>[<ref refid="classMsgDataPool_1a0a148d6bfd58376877a0529f217ed33c" kindref="member">i</ref>].topic<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classMsgDataPool_1af8a8bed0618d0d7acccaf8f6c5256851" kindref="member">pool</ref>[<ref refid="classMsgDataPool_1a0a148d6bfd58376877a0529f217ed33c" kindref="member">i</ref>].arg<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="FsmOS_8cpp_1a4b161d5fdd35540a17153452e7c6af01" kindref="member">fsmos_memory_stats</ref>.<ref refid="structMemoryStats_1ad400667b2264e48d954b2feee8833f4a" kindref="member">total_allocated</ref><sp/>+=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="classMsgDataPool_1a0a148d6bfd58376877a0529f217ed33c" kindref="member">MsgData</ref>)<sp/>*<sp/><ref refid="classMsgDataPool_1a25c6c977b1a8a1682d63b4d5e0281ee2" kindref="member">poolLimit</ref>;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Log<sp/>error<sp/>if<sp/>memory<sp/>allocation<sp/>fails</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__fsmos_1ga990d37c1e9d0a35fead6ab92e0da955e" kindref="member">OS</ref>.<ref refid="classScheduler_1acaab28b4949d5a175212d134c04cf406" kindref="member">logMessage</ref>(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/><ref refid="classScheduler_1ab2bd6aa333e3f108343fedb022eaca79aa56e45ee8b2ce204989dcede4bfa7805" kindref="member">Scheduler::LOG_ERROR</ref>,<sp/><ref refid="classMsgDataPool_1a0a148d6bfd58376877a0529f217ed33c" kindref="member">F</ref>(</highlight><highlight class="stringliteral">&quot;Msg<sp/>pool<sp/>alloc<sp/>failed&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="306"><highlight class="normal">}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>==================<sp/>LinkedQueue<sp/>Implementation<sp/>==================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="310" refid="classLinkedQueue_1a4983be0b269558e5bb0f93d2ce084345" refkind="member"><highlight class="normal"><ref refid="classLinkedQueue_1a4983be0b269558e5bb0f93d2ce084345" kindref="member">LinkedQueue&lt;T&gt;::LinkedQueue</ref>()<sp/>:<sp/>head(nullptr),<sp/>tail(nullptr),<sp/>count(0)<sp/>{}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="313" refid="classLinkedQueue_1ad84250d452864b16e000f4d1ee6295f6" refkind="member"><highlight class="normal"><ref refid="classLinkedQueue_1ad84250d452864b16e000f4d1ee6295f6" kindref="member">LinkedQueue&lt;T&gt;::~LinkedQueue</ref>()</highlight></codeline>
<codeline lineno="314"><highlight class="normal">{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(head)</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structLinkedQueue_1_1Node" kindref="compound">Node</ref><sp/>*temp<sp/>=<sp/>head;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>head<sp/>=<sp/>head-&gt;<ref refid="structLinkedQueue_1_1Node_1a105896e21861dcb1bb7bcb5af3e5c9b2" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>temp;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="321"><highlight class="normal">}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="324" refid="classLinkedQueue_1a8c5a6ea35be6ffaf35f76098e8bc89f9" refkind="member"><highlight class="normal"><ref refid="classLinkedQueue_1a4983be0b269558e5bb0f93d2ce084345" kindref="member">LinkedQueue&lt;T&gt;::LinkedQueue</ref>(<ref refid="classLinkedQueue" kindref="compound">LinkedQueue</ref><sp/>&amp;&amp;other)<sp/>noexcept<sp/>:<sp/>head(other.head),<sp/>tail(other.tail),<sp/>count(other.count)</highlight></codeline>
<codeline lineno="325"><highlight class="normal">{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>other.head<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>other.tail<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>other.count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="329"><highlight class="normal">}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="332" refid="classLinkedQueue_1ab2bb64be832ea8f62e76dc7fcbe1e9fb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classLinkedQueue_1ab2bb64be832ea8f62e76dc7fcbe1e9fb" kindref="member">LinkedQueue&lt;T&gt;::push</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;item)</highlight></codeline>
<codeline lineno="333"><highlight class="normal">{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structLinkedQueue_1_1Node" kindref="compound">Node</ref><sp/>*new_node<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="structLinkedQueue_1_1Node" kindref="compound">Node</ref>;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!new_node)</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Memory<sp/>allocation<sp/>failed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>new_node-&gt;<ref refid="structLinkedQueue_1_1Node_1abfc1309426317b5ec46b96ad93fa3615" kindref="member">data</ref><sp/>=<sp/>item;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>new_node-&gt;<ref refid="structLinkedQueue_1_1Node_1a105896e21861dcb1bb7bcb5af3e5c9b2" kindref="member">next</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tail)</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tail-&gt;<ref refid="structLinkedQueue_1_1Node_1a105896e21861dcb1bb7bcb5af3e5c9b2" kindref="member">next</ref><sp/>=<sp/>new_node;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>head<sp/>=<sp/>new_node;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>tail<sp/>=<sp/>new_node;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>count++;</highlight></codeline>
<codeline lineno="353"><highlight class="normal">}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="356" refid="classLinkedQueue_1ae54fefdc687852e0465e414bbfadd138" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classLinkedQueue_1ae54fefdc687852e0465e414bbfadd138" kindref="member">LinkedQueue&lt;T&gt;::pop</ref>(T<sp/>&amp;item)</highlight></codeline>
<codeline lineno="357"><highlight class="normal">{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!head)</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structLinkedQueue_1_1Node" kindref="compound">Node</ref><sp/>*temp<sp/>=<sp/>head;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>item<sp/>=<sp/>temp-&gt;<ref refid="structLinkedQueue_1_1Node_1abfc1309426317b5ec46b96ad93fa3615" kindref="member">data</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>properly<sp/>handles<sp/>SharedMsg<sp/>reference<sp/>counting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>head<sp/>=<sp/>head-&gt;next;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!head)</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tail<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>temp;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>count--;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="375"><highlight class="normal">}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="378" refid="classLinkedQueue_1af4554d6d9ca422c9332217fbbe054c06" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classLinkedQueue_1af4554d6d9ca422c9332217fbbe054c06" kindref="member">LinkedQueue&lt;T&gt;::isEmpty</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="379"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>head<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="381"><highlight class="normal">}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="384" refid="classLinkedQueue_1a81123eba59f05b7218b756740cfb3fa6" refkind="member"><highlight class="normal">uint8_t<sp/><ref refid="classLinkedQueue_1a81123eba59f05b7218b756740cfb3fa6" kindref="member">LinkedQueue&lt;T&gt;::getSize</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="385"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>count;</highlight></codeline>
<codeline lineno="387"><highlight class="normal">}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Explicit<sp/>template<sp/>instantiations<sp/>for<sp/>common<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classLinkedQueue" kindref="compound">LinkedQueue&lt;SharedMsg&gt;</ref>;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>==================<sp/>Mutex<sp/>Implementation<sp/>==================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393" refid="classMutex_1a593423d868daf926c7b0d63a833ae29a" refkind="member"><highlight class="normal"><ref refid="classMutex_1a593423d868daf926c7b0d63a833ae29a" kindref="member">Mutex::Mutex</ref>()<sp/>:<sp/>locked(false),<sp/>owner_id(0)<sp/>{}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395" refid="classMutex_1a25133a881d7392b966786263d41bde79" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classMutex_1a25133a881d7392b966786263d41bde79" kindref="member">Mutex::tryLock</ref>(uint8_t<sp/>task_id)</highlight></codeline>
<codeline lineno="396"><highlight class="normal">{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="FsmOS_8h_1aaaea265b31dabcfb3098bec7685c39e4" kindref="member">ATOMIC_BLOCK</ref>(<ref refid="FsmOS_8h_1a362c18b15a09703e42e1c246c47420ef" kindref="member">ATOMIC_RESTORESTATE</ref>)</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classMutex_1a833a30ffb34001c68aa2a37570dbf56e" kindref="member">locked</ref>)</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classMutex_1a833a30ffb34001c68aa2a37570dbf56e" kindref="member">locked</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classMutex_1ae818e65daf468eed3d03a3aad59e1281" kindref="member">owner_id</ref><sp/>=<sp/>task_id;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="407"><highlight class="normal">}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409" refid="classMutex_1ac72a20fa83ef3beb121bb11bb452e9cd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classMutex_1ac72a20fa83ef3beb121bb11bb452e9cd" kindref="member">Mutex::unlock</ref>(uint8_t<sp/>task_id)</highlight></codeline>
<codeline lineno="410"><highlight class="normal">{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="FsmOS_8h_1aaaea265b31dabcfb3098bec7685c39e4" kindref="member">ATOMIC_BLOCK</ref>(<ref refid="FsmOS_8h_1a362c18b15a09703e42e1c246c47420ef" kindref="member">ATOMIC_RESTORESTATE</ref>)</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classMutex_1a833a30ffb34001c68aa2a37570dbf56e" kindref="member">locked</ref><sp/>&amp;&amp;<sp/><ref refid="classMutex_1ae818e65daf468eed3d03a3aad59e1281" kindref="member">owner_id</ref><sp/>==<sp/>task_id)</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classMutex_1a833a30ffb34001c68aa2a37570dbf56e" kindref="member">locked</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classMutex_1ae818e65daf468eed3d03a3aad59e1281" kindref="member">owner_id</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="419"><highlight class="normal">}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421" refid="classMutex_1ac54a451ca9a856271f5f434f1aaee3d5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classMutex_1ac54a451ca9a856271f5f434f1aaee3d5" kindref="member">Mutex::isLocked</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classMutex_1a833a30ffb34001c68aa2a37570dbf56e" kindref="member">locked</ref>;<sp/>}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423" refid="classMutex_1ae155c790be1a23e17700cd8b8c2636b4" refkind="member"><highlight class="normal">uint8_t<sp/><ref refid="classMutex_1ae155c790be1a23e17700cd8b8c2636b4" kindref="member">Mutex::getOwner</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classMutex_1ae818e65daf468eed3d03a3aad59e1281" kindref="member">owner_id</ref>;<sp/>}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>==================<sp/>Semaphore<sp/>Implementation<sp/>==================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426" refid="classSemaphore_1a9f8febef61d91a380337f05e3fc0678c" refkind="member"><highlight class="normal"><ref refid="classSemaphore_1a9f8febef61d91a380337f05e3fc0678c" kindref="member">Semaphore::Semaphore</ref>(uint8_t<sp/>initial_count,<sp/>uint8_t<sp/>max_count)<sp/>:<sp/>count(initial_count),<sp/>max_count(max_count)<sp/>{}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428" refid="classSemaphore_1ab733c9bf26e7dd7e007c68ca27b8c06e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classSemaphore_1ab733c9bf26e7dd7e007c68ca27b8c06e" kindref="member">Semaphore::wait</ref>(uint8_t<sp/>task_id)</highlight></codeline>
<codeline lineno="429"><highlight class="normal">{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)task_id;<sp/><sp/></highlight><highlight class="comment">//<sp/>Unused<sp/>parameter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="FsmOS_8h_1aaaea265b31dabcfb3098bec7685c39e4" kindref="member">ATOMIC_BLOCK</ref>(<ref refid="FsmOS_8h_1a362c18b15a09703e42e1c246c47420ef" kindref="member">ATOMIC_RESTORESTATE</ref>)</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classSemaphore_1a3a416166d840dc83b6283b20bccd072a" kindref="member">count</ref><sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classSemaphore_1a3a416166d840dc83b6283b20bccd072a" kindref="member">count</ref>--;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="440"><highlight class="normal">}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442" refid="classSemaphore_1a1d7c51da55f9ac913a6a711cb6d6e52a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classSemaphore_1a1d7c51da55f9ac913a6a711cb6d6e52a" kindref="member">Semaphore::signal</ref>()</highlight></codeline>
<codeline lineno="443"><highlight class="normal">{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="FsmOS_8h_1aaaea265b31dabcfb3098bec7685c39e4" kindref="member">ATOMIC_BLOCK</ref>(<ref refid="FsmOS_8h_1a362c18b15a09703e42e1c246c47420ef" kindref="member">ATOMIC_RESTORESTATE</ref>)</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classSemaphore_1a3a416166d840dc83b6283b20bccd072a" kindref="member">count</ref><sp/>&lt;<sp/><ref refid="classSemaphore_1a1851b2b206e6fe2fe6711bd8469e157e" kindref="member">max_count</ref>)</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classSemaphore_1a3a416166d840dc83b6283b20bccd072a" kindref="member">count</ref>++;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="451"><highlight class="normal">}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453" refid="classSemaphore_1a0c65b57daf4e089e6e6241f4669d6f1f" refkind="member"><highlight class="normal">uint8_t<sp/><ref refid="classSemaphore_1a0c65b57daf4e089e6e6241f4669d6f1f" kindref="member">Semaphore::getCount</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classSemaphore_1a3a416166d840dc83b6283b20bccd072a" kindref="member">count</ref>;<sp/>}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455" refid="classSemaphore_1a5dc46274b490015edf89edf3048512a8" refkind="member"><highlight class="normal">uint8_t<sp/><ref refid="classSemaphore_1a5dc46274b490015edf89edf3048512a8" kindref="member">Semaphore::getMaxCount</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classSemaphore_1a1851b2b206e6fe2fe6711bd8469e157e" kindref="member">max_count</ref>;<sp/>}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>==================<sp/>Task<sp/>Implementation<sp/>==================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Initialize<sp/>static<sp/>counter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal">uint16_t<sp/><ref refid="classTask_1abf8be7ba74ec27e72e25d2f2cd531d14" kindref="member">Task::createdInstanceCount</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="460" refid="classTask_1ac801f055a69f1bbbca495cfcaa93940a" refkind="member"><highlight class="normal"><ref refid="classTask_1ac801f055a69f1bbbca495cfcaa93940a" kindref="member">Task::Task</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>__FlashStringHelper<sp/>*task_name)</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>remainingTime(0),</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>periodMs(<ref refid="group__fsmos_1gac154c550db4c5b7fed1b1fd1e31a63ee" kindref="member">DEFAULT_TASK_PERIOD</ref>),</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>taskId(0),</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stateAndPriority(PRIORITY_NORMAL<sp/>&lt;&lt;<sp/>4),<sp/></highlight><highlight class="comment">//<sp/>INACTIVE<sp/>state,<sp/>PRIORITY_NORMAL<sp/>priority</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>name(task_name)</highlight></codeline>
<codeline lineno="466"><highlight class="normal">{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Bitfield<sp/>is<sp/>already<sp/>initialized<sp/>to<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classTask_1abf8be7ba74ec27e72e25d2f2cd531d14" kindref="member">createdInstanceCount</ref>++;</highlight></codeline>
<codeline lineno="469"><highlight class="normal">}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471" refid="classTask_1a3ecf499ea35fb4a96853969a1e1cbbce" refkind="member"><highlight class="normal"><ref refid="classTask_1a3ecf499ea35fb4a96853969a1e1cbbce" kindref="member">Task::~Task</ref>()</highlight></codeline>
<codeline lineno="472"><highlight class="normal">{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classTask_1abf8be7ba74ec27e72e25d2f2cd531d14" kindref="member">createdInstanceCount</ref><sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classTask_1abf8be7ba74ec27e72e25d2f2cd531d14" kindref="member">createdInstanceCount</ref>--;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="477"><highlight class="normal">}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479" refid="classTask_1a5d6a1d3c6cd5b587d2414737fab9f3ed" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTask_1a5d6a1d3c6cd5b587d2414737fab9f3ed" kindref="member">Task::start</ref>()</highlight></codeline>
<codeline lineno="480"><highlight class="normal">{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classTask_1acccd11864edfa1abbb15ff43008a17ec" kindref="member">getState</ref>()<sp/>==<sp/><ref refid="classTask_1afa88d99eb2a58c8f078a53f1195c53a8a3ca0a562f7e0ec849ab64f47164b552e" kindref="member">INACTIVE</ref>)</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classTask_1a7a79169eed523ffdafa76f3c9d07ff27" kindref="member">setState</ref>(<ref refid="classTask_1afa88d99eb2a58c8f078a53f1195c53a8a5c1b2aafd7b0d425608d0481620e0827" kindref="member">ACTIVE</ref>);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classTask_1a69b0d2b2a7231d2e2a2880b7cca136e1" kindref="member">remainingTime</ref><sp/>=<sp/><ref refid="classTask_1ab3ed971b7edebf924e2f1e06c4ce20d2" kindref="member">periodMs</ref>;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classTask_1a05ad697fe4c99793e7af4dade75bad64" kindref="member">on_start</ref>();</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="487"><highlight class="normal">}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489" refid="classTask_1aba5eb3d6c2a034aa0e319383fbec68c4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTask_1aba5eb3d6c2a034aa0e319383fbec68c4" kindref="member">Task::stop</ref>()</highlight></codeline>
<codeline lineno="490"><highlight class="normal">{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classTask_1acccd11864edfa1abbb15ff43008a17ec" kindref="member">getState</ref>()<sp/>==<sp/><ref refid="classTask_1afa88d99eb2a58c8f078a53f1195c53a8a5c1b2aafd7b0d425608d0481620e0827" kindref="member">ACTIVE</ref><sp/>||<sp/><ref refid="classTask_1acccd11864edfa1abbb15ff43008a17ec" kindref="member">getState</ref>()<sp/>==<sp/><ref refid="classTask_1afa88d99eb2a58c8f078a53f1195c53a8a695d6ccd154b43d39b21ff6c6848db53" kindref="member">SUSPENDED</ref>)</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classTask_1a7a79169eed523ffdafa76f3c9d07ff27" kindref="member">setState</ref>(<ref refid="classTask_1afa88d99eb2a58c8f078a53f1195c53a8a3ca0a562f7e0ec849ab64f47164b552e" kindref="member">INACTIVE</ref>);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classTask_1a7eccc77f654e53524d3a07b1ef73c83c" kindref="member">on_stop</ref>();</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="496"><highlight class="normal">}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498" refid="classTask_1ae95f8af6f74b4c956b82698b98454cd2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTask_1ae95f8af6f74b4c956b82698b98454cd2" kindref="member">Task::suspend</ref>()</highlight></codeline>
<codeline lineno="499"><highlight class="normal">{</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classTask_1acccd11864edfa1abbb15ff43008a17ec" kindref="member">getState</ref>()<sp/>==<sp/><ref refid="classTask_1afa88d99eb2a58c8f078a53f1195c53a8a5c1b2aafd7b0d425608d0481620e0827" kindref="member">ACTIVE</ref>)</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classTask_1a7a79169eed523ffdafa76f3c9d07ff27" kindref="member">setState</ref>(<ref refid="classTask_1afa88d99eb2a58c8f078a53f1195c53a8a695d6ccd154b43d39b21ff6c6848db53" kindref="member">SUSPENDED</ref>);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="504"><highlight class="normal">}</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506" refid="classTask_1a8fc7f3a2f5ebd910f22d1134d0dfcb2f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTask_1a8fc7f3a2f5ebd910f22d1134d0dfcb2f" kindref="member">Task::resume</ref>()</highlight></codeline>
<codeline lineno="507"><highlight class="normal">{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classTask_1acccd11864edfa1abbb15ff43008a17ec" kindref="member">getState</ref>()<sp/>==<sp/><ref refid="classTask_1afa88d99eb2a58c8f078a53f1195c53a8a695d6ccd154b43d39b21ff6c6848db53" kindref="member">SUSPENDED</ref>)</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classTask_1a7a79169eed523ffdafa76f3c9d07ff27" kindref="member">setState</ref>(<ref refid="classTask_1afa88d99eb2a58c8f078a53f1195c53a8a5c1b2aafd7b0d425608d0481620e0827" kindref="member">ACTIVE</ref>);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classTask_1a69b0d2b2a7231d2e2a2880b7cca136e1" kindref="member">remainingTime</ref><sp/>=<sp/><ref refid="classTask_1ab3ed971b7edebf924e2f1e06c4ce20d2" kindref="member">periodMs</ref>;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="513"><highlight class="normal">}</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515" refid="classTask_1a4401622acef8826077250b6b9e24e477" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTask_1a4401622acef8826077250b6b9e24e477" kindref="member">Task::terminate</ref>()<sp/>{<sp/><ref refid="classTask_1a7a79169eed523ffdafa76f3c9d07ff27" kindref="member">setState</ref>(<ref refid="classTask_1afa88d99eb2a58c8f078a53f1195c53a8a7a6d8686d5e5ecffdf01fdd137d7713e" kindref="member">TERMINATED</ref>);<sp/>}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517" refid="classTask_1a77d95e30aaab4ef098b94724c278ecd1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTask_1a77d95e30aaab4ef098b94724c278ecd1" kindref="member">Task::setPeriod</ref>(uint16_t<sp/>period)</highlight></codeline>
<codeline lineno="518"><highlight class="normal">{</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classTask_1ab3ed971b7edebf924e2f1e06c4ce20d2" kindref="member">periodMs</ref><sp/>=<sp/>(period<sp/>&lt;<sp/><ref refid="group__fsmos_1ga13157fca65016a2c6c913eff0119cf5c" kindref="member">MIN_TASK_PERIOD</ref>)<sp/>?<sp/><ref refid="group__fsmos_1ga13157fca65016a2c6c913eff0119cf5c" kindref="member">MIN_TASK_PERIOD</ref><sp/>:<sp/>((period<sp/>&gt;<sp/><ref refid="group__fsmos_1gab0cd97b1506816b7e089447cd3430e65" kindref="member">MAX_TASK_PERIOD</ref>)<sp/>?<sp/><ref refid="group__fsmos_1gab0cd97b1506816b7e089447cd3430e65" kindref="member">MAX_TASK_PERIOD</ref><sp/>:<sp/>period);</highlight></codeline>
<codeline lineno="520"><highlight class="normal">}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522" refid="classTask_1aa096c58dddc4fb8f7f8d5f40e1815d2d" refkind="member"><highlight class="normal">uint16_t<sp/><ref refid="classTask_1aa096c58dddc4fb8f7f8d5f40e1815d2d" kindref="member">Task::getPeriod</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classTask_1ab3ed971b7edebf924e2f1e06c4ce20d2" kindref="member">periodMs</ref>;<sp/>}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524" refid="classTask_1ae7a47875b478833d9dae1b5117661ed4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTask_1ae7a47875b478833d9dae1b5117661ed4" kindref="member">Task::setPriority</ref>(<ref refid="classTask_1a698d2efb6569ff0ae099fff3e661592a" kindref="member">Priority</ref><sp/>priority)<sp/>{<sp/><ref refid="classTask_1a57497b2437a803730f0e5adc8656fe97" kindref="member">stateAndPriority</ref><sp/>=<sp/>(<ref refid="classTask_1a57497b2437a803730f0e5adc8656fe97" kindref="member">stateAndPriority</ref><sp/>&amp;<sp/>0x0F)<sp/>|<sp/>((</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(priority)<sp/>&amp;<sp/>0x0F)<sp/>&lt;&lt;<sp/>4);<sp/>}</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526" refid="classTask_1aaa220be4e5007ede0bd3e5349d36eae9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTask_1ae7a47875b478833d9dae1b5117661ed4" kindref="member">Task::setPriority</ref>(uint8_t<sp/>prio)<sp/>{<sp/><ref refid="classTask_1a57497b2437a803730f0e5adc8656fe97" kindref="member">stateAndPriority</ref><sp/>=<sp/>(<ref refid="classTask_1a57497b2437a803730f0e5adc8656fe97" kindref="member">stateAndPriority</ref><sp/>&amp;<sp/>0x0F)<sp/>|<sp/>((prio<sp/>&amp;<sp/>0x0F)<sp/>&lt;&lt;<sp/>4);<sp/>}</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528" refid="classTask_1aef8cf69a9b677977003d8b72d66d36d8" refkind="member"><highlight class="normal">uint8_t<sp/><ref refid="classTask_1aef8cf69a9b677977003d8b72d66d36d8" kindref="member">Task::getPriority</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="classTask_1a57497b2437a803730f0e5adc8656fe97" kindref="member">stateAndPriority</ref><sp/>&gt;&gt;<sp/>4)<sp/>&amp;<sp/>0x0F;<sp/>}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530" refid="classTask_1a871f04aee2f5a2a024c96b9b54aa5ba4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTask_1a871f04aee2f5a2a024c96b9b54aa5ba4" kindref="member">Task::setMaxMessageBudget</ref>(uint8_t<sp/>budget)</highlight></codeline>
<codeline lineno="531"><highlight class="normal">{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classTask_1aceb872daf3ecd86b362df7bf2b19130f" kindref="member">maxMessageBudget</ref><sp/>=<sp/>budget;</highlight></codeline>
<codeline lineno="533"><highlight class="normal">}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536" refid="classTask_1acccd11864edfa1abbb15ff43008a17ec" refkind="member"><highlight class="normal"><ref refid="classTask_1afa88d99eb2a58c8f078a53f1195c53a8" kindref="member">Task::State</ref><sp/><ref refid="classTask_1acccd11864edfa1abbb15ff43008a17ec" kindref="member">Task::getState</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classTask_1afa88d99eb2a58c8f078a53f1195c53a8" kindref="member">State</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classTask_1a57497b2437a803730f0e5adc8656fe97" kindref="member">stateAndPriority</ref><sp/>&amp;<sp/>0x0F);<sp/>}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538" refid="classTask_1a7a79169eed523ffdafa76f3c9d07ff27" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTask_1a7a79169eed523ffdafa76f3c9d07ff27" kindref="member">Task::setState</ref>(<ref refid="classTask_1afa88d99eb2a58c8f078a53f1195c53a8" kindref="member">State</ref><sp/>newState)<sp/>{<sp/><ref refid="classTask_1a57497b2437a803730f0e5adc8656fe97" kindref="member">stateAndPriority</ref><sp/>=<sp/>(<ref refid="classTask_1a57497b2437a803730f0e5adc8656fe97" kindref="member">stateAndPriority</ref><sp/>&amp;<sp/>0xF0)<sp/>|<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(newState);<sp/>}</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540" refid="classTask_1af770c80b9b06c6f314441144dcb6b117" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classTask_1af770c80b9b06c6f314441144dcb6b117" kindref="member">Task::checkState</ref>(<ref refid="classTask_1afa88d99eb2a58c8f078a53f1195c53a8" kindref="member">State</ref><sp/>expected)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classTask_1acccd11864edfa1abbb15ff43008a17ec" kindref="member">getState</ref>()<sp/>==<sp/>expected;<sp/>}</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542" refid="classTask_1a14f40317936f729e291a81fcf4426466" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classTask_1a14f40317936f729e291a81fcf4426466" kindref="member">Task::isActive</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classTask_1acccd11864edfa1abbb15ff43008a17ec" kindref="member">getState</ref>()<sp/>==<sp/><ref refid="classTask_1afa88d99eb2a58c8f078a53f1195c53a8a5c1b2aafd7b0d425608d0481620e0827" kindref="member">ACTIVE</ref>;<sp/>}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544" refid="classTask_1abee024294d3599db8917a96cab0a55f2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classTask_1abee024294d3599db8917a96cab0a55f2" kindref="member">Task::isInactive</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classTask_1acccd11864edfa1abbb15ff43008a17ec" kindref="member">getState</ref>()<sp/>==<sp/><ref refid="classTask_1afa88d99eb2a58c8f078a53f1195c53a8a3ca0a562f7e0ec849ab64f47164b552e" kindref="member">INACTIVE</ref>;<sp/>}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546" refid="classTask_1a548d620b8f5d7490b8cdc235dbfdf6eb" refkind="member"><highlight class="normal">uint8_t<sp/><ref refid="classTask_1a548d620b8f5d7490b8cdc235dbfdf6eb" kindref="member">Task::getId</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classTask_1a4dc17810637f6e3ea836f1068393a1c8" kindref="member">taskId</ref>;<sp/>}</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548" refid="classTask_1aae9b70f6c6542469cd8c3c122536964c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>__FlashStringHelper<sp/>*<ref refid="classTask_1aae9b70f6c6542469cd8c3c122536964c" kindref="member">Task::getName</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classTask_1a7727703d676510926710ba56268959f0" kindref="member">name</ref>;<sp/>}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550" refid="classTask_1a955e48a4143b0e140a552fa25f4500c9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTask_1a955e48a4143b0e140a552fa25f4500c9" kindref="member">Task::setName</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>__FlashStringHelper<sp/>*task_name)<sp/>{<sp/><ref refid="classTask_1a7727703d676510926710ba56268959f0" kindref="member">name</ref><sp/>=<sp/>task_name;<sp/>}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Subscribe/unsubscribe<sp/>methods<sp/>are<sp/>now<sp/>inline<sp/>in<sp/>header<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554" refid="classTask_1a4b2cce5377f8ddf0cc29d00a3c58c1c0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTask_1a4b2cce5377f8ddf0cc29d00a3c58c1c0" kindref="member">Task::publish</ref>(uint8_t<sp/>topic,<sp/>uint8_t<sp/>type,<sp/>uint16_t<sp/>arg)</highlight></codeline>
<codeline lineno="555"><highlight class="normal">{</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__fsmos_1ga990d37c1e9d0a35fead6ab92e0da955e" kindref="member">OS</ref>.<ref refid="classScheduler_1a6212cb4fdc7a3ed5c9e50e97729cff8d" kindref="member">publishMessage</ref>(topic,<sp/>type,<sp/>arg);</highlight></codeline>
<codeline lineno="557"><highlight class="normal">}</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559" refid="classTask_1adbd4d278e42780bd4b6c1d918d0f85c9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTask_1adbd4d278e42780bd4b6c1d918d0f85c9" kindref="member">Task::tell</ref>(uint8_t<sp/>target_task_id,<sp/>uint8_t<sp/>type,<sp/>uint16_t<sp/>arg)</highlight></codeline>
<codeline lineno="560"><highlight class="normal">{</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__fsmos_1ga990d37c1e9d0a35fead6ab92e0da955e" kindref="member">OS</ref>.<ref refid="classScheduler_1a4f3960871e36fdf7234b151f81f04120" kindref="member">sendMessage</ref>(target_task_id,<sp/>type,<sp/>arg);</highlight></codeline>
<codeline lineno="562"><highlight class="normal">}</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564" refid="classTask_1a8bc9456ebb7dfbb657f040320af1a6ef" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTask_1a8bc9456ebb7dfbb657f040320af1a6ef" kindref="member">Task::log</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>__FlashStringHelper<sp/>*msg)<sp/>{<sp/><ref refid="group__fsmos_1ga990d37c1e9d0a35fead6ab92e0da955e" kindref="member">OS</ref>.<ref refid="classScheduler_1acaab28b4949d5a175212d134c04cf406" kindref="member">logMessage</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/><ref refid="classScheduler_1ab2bd6aa333e3f108343fedb022eaca79ac50a6d9344241d486cea80292b5ba327" kindref="member">Scheduler::LOG_INFO</ref>,<sp/>msg);<sp/>}</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566" refid="classTask_1aa961a934509f354a023b8f32d3656e95" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTask_1aa961a934509f354a023b8f32d3656e95" kindref="member">Task::logDebug</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>__FlashStringHelper<sp/>*msg)<sp/>{<sp/><ref refid="group__fsmos_1ga990d37c1e9d0a35fead6ab92e0da955e" kindref="member">OS</ref>.<ref refid="classScheduler_1acaab28b4949d5a175212d134c04cf406" kindref="member">logMessage</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/><ref refid="classScheduler_1ab2bd6aa333e3f108343fedb022eaca79ae533a07bf1ba23e55ae9769602ac74a7" kindref="member">Scheduler::LOG_DEBUG</ref>,<sp/>msg);<sp/>}</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568" refid="classTask_1a24f4e032e0dd55e6e2e7ef44c715e9ca" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTask_1a24f4e032e0dd55e6e2e7ef44c715e9ca" kindref="member">Task::logInfo</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>__FlashStringHelper<sp/>*msg)<sp/>{<sp/><ref refid="group__fsmos_1ga990d37c1e9d0a35fead6ab92e0da955e" kindref="member">OS</ref>.<ref refid="classScheduler_1acaab28b4949d5a175212d134c04cf406" kindref="member">logMessage</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/><ref refid="classScheduler_1ab2bd6aa333e3f108343fedb022eaca79ac50a6d9344241d486cea80292b5ba327" kindref="member">Scheduler::LOG_INFO</ref>,<sp/>msg);<sp/>}</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570" refid="classTask_1a36592cc85ff1d08bf6cb2442055188f6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTask_1a36592cc85ff1d08bf6cb2442055188f6" kindref="member">Task::logWarn</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>__FlashStringHelper<sp/>*msg)<sp/>{<sp/><ref refid="group__fsmos_1ga990d37c1e9d0a35fead6ab92e0da955e" kindref="member">OS</ref>.<ref refid="classScheduler_1acaab28b4949d5a175212d134c04cf406" kindref="member">logMessage</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/><ref refid="classScheduler_1ab2bd6aa333e3f108343fedb022eaca79a43ae65cd6d87b4c15b8ddb2e1a110286" kindref="member">Scheduler::LOG_WARN</ref>,<sp/>msg);<sp/>}</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572" refid="classTask_1aa4c091b4c65870bd83c6111d23ecee21" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTask_1aa4c091b4c65870bd83c6111d23ecee21" kindref="member">Task::logError</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>__FlashStringHelper<sp/>*msg)<sp/>{<sp/><ref refid="group__fsmos_1ga990d37c1e9d0a35fead6ab92e0da955e" kindref="member">OS</ref>.<ref refid="classScheduler_1acaab28b4949d5a175212d134c04cf406" kindref="member">logMessage</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/><ref refid="classScheduler_1ab2bd6aa333e3f108343fedb022eaca79aa56e45ee8b2ce204989dcede4bfa7805" kindref="member">Scheduler::LOG_ERROR</ref>,<sp/>msg);<sp/>}</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="575" refid="classTask_1a9fb78213d87aed4408f9c792fc1ade97" refkind="member"><highlight class="normal">T<sp/><ref refid="classTask_1a9fb78213d87aed4408f9c792fc1ade97" kindref="member">Task::createTimerTyped</ref>(uint32_t<sp/>duration_ms)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="576"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>timer;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Extract<sp/>the<sp/>underlying<sp/>type<sp/>from<sp/>TimerT&lt;T&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">UnderlyingType<sp/>=<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(timer.durationMs);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>UnderlyingType<sp/>max_duration<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">UnderlyingType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(~static_cast&lt;UnderlyingType&gt;(0));</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>UnderlyingType<sp/>safe_duration<sp/>=</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(duration_ms<sp/>&gt;<sp/>max_duration)<sp/>?<sp/>max_duration<sp/>:<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">UnderlyingType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(duration_ms);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>timer.startTimer(safe_duration);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>timer;</highlight></codeline>
<codeline lineno="585"><highlight class="normal">}</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Explicit<sp/>template<sp/>instantiations<sp/>for<sp/>Task::createTimerTyped</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/><ref refid="FsmOS_8h_1a9f53b37c6d575f1b498359cc429740b0" kindref="member">Timer8</ref><sp/>Task::createTimerTyped&lt;Timer8&gt;(uint32_t)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/><ref refid="FsmOS_8h_1acc8d5d8e761e9ae66c17be7f7d8ff843" kindref="member">Timer16</ref><sp/>Task::createTimerTyped&lt;Timer16&gt;(uint32_t)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/><ref refid="FsmOS_8h_1acce064b0f024fed7c7008c84a000538f" kindref="member">Timer32</ref><sp/>Task::createTimerTyped&lt;Timer32&gt;(uint32_t)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592" refid="classTask_1a8c07bf11aa75929d4028b1035e71dac7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTask_1a8c07bf11aa75929d4028b1035e71dac7" kindref="member">Task::processMessages</ref>()</highlight></codeline>
<codeline lineno="593"><highlight class="normal">{</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Message<sp/>processing<sp/>removed<sp/>for<sp/>RAM<sp/>optimization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Messages<sp/>are<sp/>now<sp/>handled<sp/>directly<sp/>by<sp/>the<sp/>scheduler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal">}</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Task<sp/>timing<sp/>monitoring<sp/>methods</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599" refid="classTask_1ac5ab04209706d6b3a0fdd5266dc0d97f" refkind="member"><highlight class="normal">uint16_t<sp/><ref refid="classTask_1ac5ab04209706d6b3a0fdd5266dc0d97f" kindref="member">Task::getDelayCount</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="600"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classTask_1aaf791abc71bca2ca62d29d2e155dc82c" kindref="member">delayCount</ref>;</highlight></codeline>
<codeline lineno="602"><highlight class="normal">}</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604" refid="classTask_1a7806ae077325d4970155cb65cace02c5" refkind="member"><highlight class="normal">uint16_t<sp/><ref refid="classTask_1a7806ae077325d4970155cb65cace02c5" kindref="member">Task::getMaxDelay</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="605"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classTask_1a82389ea58680f2ce8a0ffada921c3b6c" kindref="member">maxDelayMs</ref>;</highlight></codeline>
<codeline lineno="607"><highlight class="normal">}</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609" refid="classTask_1aed0ad6765c8ca38f4104df0ad075be60" refkind="member"><highlight class="normal">uint32_t<sp/><ref refid="classTask_1aed0ad6765c8ca38f4104df0ad075be60" kindref="member">Task::getScheduledTime</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="610"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classTask_1ac78a2eb92ac06324535259def5fe2d43" kindref="member">scheduledTime</ref>;</highlight></codeline>
<codeline lineno="612"><highlight class="normal">}</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614" refid="classTask_1ad17b132958585c85ceb73b077b52c099" refkind="member"><highlight class="normal">uint32_t<sp/><ref refid="classTask_1ad17b132958585c85ceb73b077b52c099" kindref="member">Task::getActualStartTime</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="615"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classTask_1aba00d925c610ebb6ffce38ce7d550b33" kindref="member">actualStartTime</ref>;</highlight></codeline>
<codeline lineno="617"><highlight class="normal">}</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>==================<sp/>Scheduler<sp/>Implementation<sp/>==================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620" refid="classScheduler_1a3b61aac11466cd45ae42ab8c2b0013f6" refkind="member"><highlight class="normal"><ref refid="classScheduler_1a3b61aac11466cd45ae42ab8c2b0013f6" kindref="member">Scheduler::Scheduler</ref>()</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>taskCount(0),</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nextTaskId(1),</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>systemTime(0),</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>running(false),</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>currentLogLevel(LOG_INFO)</highlight></codeline>
<codeline lineno="626"><highlight class="normal">{</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>linked<sp/>list<sp/>pointers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classScheduler_1a9eb682b2716a34e7c3eb742782aa42e2" kindref="member">taskHead</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classScheduler_1a7dbc17482550f15704cdc4e5bbdde2d9" kindref="member">taskTail</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="630"><highlight class="normal">}</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight><highlight class="comment">//<sp/>==========<sp/>Stack<sp/>Canary<sp/>(AVR<sp/>only)<sp/>==========</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__AVR__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Canary<sp/>byte<sp/>used<sp/>to<sp/>mark<sp/>free<sp/>RAM<sp/>for<sp/>stack<sp/>usage<sp/>measurement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>STACK_CANARY_BYTE<sp/>=<sp/>0xCD;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Pointers<sp/>delimiting<sp/>the<sp/>canary<sp/>region.<sp/>We<sp/>avoid<sp/>touching<sp/>the<sp/>current<sp/>stack.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8_t<sp/>*g_canary_start<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8_t<sp/>*g_canary_end<sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init_stack_canary()</highlight></codeline>
<codeline lineno="646"><highlight class="normal">{</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>__bss_end;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*__brkval;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Current<sp/>stack<sp/>pointer<sp/>approximation<sp/>via<sp/>address<sp/>of<sp/>a<sp/>local</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>sp_probe;</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>*sp<sp/>=<sp/>(uint8_t<sp/>*)&amp;sp_probe;</highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>heap<sp/>top</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>*heap_top<sp/>=<sp/>(uint8_t<sp/>*)(__brkval<sp/>?<sp/>__brkval<sp/>:<sp/>&amp;__bss_end);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Safety<sp/>margin<sp/>to<sp/>keep<sp/>above<sp/>the<sp/>canary<sp/>(below<sp/>SP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FSMOS_STACK_CANARY_MARGIN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FSMOS_STACK_CANARY_MARGIN<sp/>32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Region<sp/>end<sp/>just<sp/>below<sp/>current<sp/>SP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>*region_end<sp/>=<sp/>sp<sp/>-<sp/><ref refid="FsmOS_8h_1a9f8057007e58750af1de560ba396f6bc" kindref="member">FSMOS_STACK_CANARY_MARGIN</ref>;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Start<sp/>from<sp/>heap<sp/>top<sp/>-<sp/>cover<sp/>entire<sp/>free<sp/>RAM<sp/>area</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>*region_start<sp/>=<sp/>heap_top;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(region_start<sp/>&gt;=<sp/>region_end)</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Nothing<sp/>to<sp/>initialize;<sp/>leave<sp/>pointers<sp/>null</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_canary_start<sp/>=<sp/>g_canary_end<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>g_canary_start<sp/>=<sp/>region_start;</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/>g_canary_end<sp/><sp/><sp/>=<sp/>region_end;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Disable<sp/>interrupts<sp/>around<sp/>the<sp/>fill<sp/>to<sp/>keep<sp/>ISR<sp/>stacks<sp/>from<sp/>interfering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>sreg<sp/>=<sp/>SREG;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/>cli();</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/>*p<sp/>=<sp/>g_canary_start;<sp/>p<sp/>&lt;=<sp/>g_canary_end;<sp/>++p)</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p<sp/>=<sp/>STACK_CANARY_BYTE;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/>SREG<sp/>=<sp/>sreg;<sp/></highlight><highlight class="comment">//<sp/>restore<sp/>interrupt<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal">}</highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint16_t<sp/>measure_stack_used()</highlight></codeline>
<codeline lineno="688"><highlight class="normal">{</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!g_canary_start<sp/>||<sp/>!g_canary_end<sp/>||<sp/>g_canary_start<sp/>&gt;<sp/>g_canary_end)</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>*p<sp/>=<sp/>g_canary_start;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(p<sp/>&lt;=<sp/>g_canary_end<sp/>&amp;&amp;<sp/>*p<sp/>==<sp/>STACK_CANARY_BYTE)</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++p;</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>&gt;<sp/>g_canary_end)</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Bytes<sp/>from<sp/>first<sp/>non-canary<sp/>up<sp/>to<sp/>end<sp/>are<sp/>considered<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint16_t)(g_canary_end<sp/>-<sp/>p<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="704"><highlight class="normal">}</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="707" refid="classScheduler_1afc8187779b46f64039d3ffa58f0dbe51" refkind="member"><highlight class="normal"><ref refid="classScheduler_1afc8187779b46f64039d3ffa58f0dbe51" kindref="member">Scheduler::~Scheduler</ref>()<sp/>{<sp/><ref refid="classScheduler_1aaa234e0155e99b4fcbae695898663eea" kindref="member">removeAll</ref>();<sp/>}</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Missing<sp/>method<sp/>implementations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710" refid="classScheduler_1afa07db3c7014412af426ee1c304ebc4b" refkind="member"><highlight class="normal"><ref refid="structTaskNode" kindref="compound">TaskNode</ref><sp/>*<ref refid="classScheduler_1afa07db3c7014412af426ee1c304ebc4b" kindref="member">Scheduler::acquireTaskNode</ref>(<ref refid="classTask" kindref="compound">Task</ref><sp/>*task)</highlight></codeline>
<codeline lineno="711"><highlight class="normal">{</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classScheduler_1a38cf4a79d14bd68514a26946b19d3d53" kindref="member">allocateTaskNode</ref>(task);</highlight></codeline>
<codeline lineno="713"><highlight class="normal">}</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight></codeline>
<codeline lineno="715" refid="classScheduler_1a2e5c9f7ad69391854d3a0dc2dd73f8b4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classScheduler_1a2e5c9f7ad69391854d3a0dc2dd73f8b4" kindref="member">Scheduler::releaseTaskNode</ref>(<ref refid="structTaskNode" kindref="compound">TaskNode</ref><sp/>*node)</highlight></codeline>
<codeline lineno="716"><highlight class="normal">{</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classScheduler_1a419ac926b5685ea804fe7eae086066e3" kindref="member">deallocateTaskNode</ref>(node);</highlight></codeline>
<codeline lineno="718"><highlight class="normal">}</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="720" refid="classScheduler_1ac6614605ec1477ed4e44d93e613e3ed4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classScheduler_1ac6614605ec1477ed4e44d93e613e3ed4" kindref="member">Scheduler::dequeueQueuedMessageNode</ref>(<ref refid="structScheduler_1_1MsgNode" kindref="compound">MsgNode</ref><sp/>*&amp;outNode)</highlight></codeline>
<codeline lineno="721"><highlight class="normal">{</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>method<sp/>should<sp/>work<sp/>with<sp/>the<sp/>main<sp/>message<sp/>queue,<sp/>not<sp/>a<sp/>separate<sp/>queued<sp/>message<sp/>queue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classScheduler_1afc800a55be0f3da82ef2e79dad96496d" kindref="member">msgHead</ref>)</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outNode<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/>outNode<sp/>=<sp/><ref refid="classScheduler_1afc800a55be0f3da82ef2e79dad96496d" kindref="member">msgHead</ref>;</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classScheduler_1afc800a55be0f3da82ef2e79dad96496d" kindref="member">msgHead</ref><sp/>=<sp/><ref refid="classScheduler_1afc800a55be0f3da82ef2e79dad96496d" kindref="member">msgHead</ref>-&gt;<ref refid="structScheduler_1_1MsgNode_1a91702c9faa02b67ac24d3924be9fdaee" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classScheduler_1afc800a55be0f3da82ef2e79dad96496d" kindref="member">msgHead</ref>)</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classScheduler_1a2503ab5f7acb13a3bd46f35036af3c02" kindref="member">msgTail</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/>outNode-&gt;<ref refid="structScheduler_1_1MsgNode_1a91702c9faa02b67ac24d3924be9fdaee" kindref="member">next</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classScheduler_1a13367b7d53dc7bf804d9158e57bff5f7" kindref="member">msgCount</ref>--;</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="740"><highlight class="normal">}</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="742" refid="classScheduler_1aaa8cc86207802e4a457202396b2f7441" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classScheduler_1aaa8cc86207802e4a457202396b2f7441" kindref="member">Scheduler::initializeTaskNodePool</ref>()</highlight></codeline>
<codeline lineno="743"><highlight class="normal">{</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classScheduler_1a6f21f46d36e9c56a43fadfa6cc32aad7" kindref="member">taskNodePoolInitialized</ref>)</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Preallocate<sp/>TaskNode<sp/>objects<sp/>as<sp/>a<sp/>singly-linked<sp/>free-list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Start<sp/>with<sp/>the<sp/>number<sp/>of<sp/>created<sp/>tasks<sp/>(at<sp/>least<sp/>1).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structTaskNode" kindref="compound">TaskNode</ref><sp/>*prev<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>initial<sp/>=<sp/><ref refid="classTask_1a42a50afac20691fb27694ca04ccc4e90" kindref="member">Task::getCreatedInstanceCount</ref>();</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(initial<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initial<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>initial;<sp/>++i)</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structTaskNode" kindref="compound">TaskNode</ref><sp/>*node<sp/>=<sp/>(<ref refid="structTaskNode" kindref="compound">TaskNode</ref><sp/>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structTaskNode" kindref="compound">TaskNode</ref>));</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!node)</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocation<sp/>failure;<sp/>cleanup<sp/>any<sp/>already<sp/>allocated<sp/>nodes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(prev)</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structTaskNode" kindref="compound">TaskNode</ref><sp/>*temp<sp/>=<sp/>prev;</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev<sp/>=<sp/>prev-&gt;<ref refid="structTaskNode_1af6f74dbb5d2baa80d10dabc43b593ffd" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(temp);</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classScheduler_1a72d0e1044f04173955e8783b8c1c9bb0" kindref="member">taskNodePoolCapacity</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>fields<sp/>manually;<sp/>building<sp/>free-list<sp/>in<sp/>reverse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;<ref refid="structTaskNode_1a04f109a440464fd95c18d0f3758ee0af" kindref="member">task</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;<ref refid="structTaskNode_1af6f74dbb5d2baa80d10dabc43b593ffd" kindref="member">next</ref><sp/>=<sp/>prev;</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev<sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classScheduler_1a72d0e1044f04173955e8783b8c1c9bb0" kindref="member">taskNodePoolCapacity</ref>++;</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classScheduler_1ae4384c1ec8e5ef486776d6dc255a501a" kindref="member">freeTaskNodeHead</ref><sp/>=<sp/>prev;</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classScheduler_1a6f21f46d36e9c56a43fadfa6cc32aad7" kindref="member">taskNodePoolInitialized</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="780"><highlight class="normal">}</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight></codeline>
<codeline lineno="783" refid="classScheduler_1a278e9940ce3dd1c708c5bd55b0e4059b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classScheduler_1a278e9940ce3dd1c708c5bd55b0e4059b" kindref="member">Scheduler::add</ref>(<ref refid="classTask" kindref="compound">Task</ref><sp/>*task)</highlight></codeline>
<codeline lineno="784"><highlight class="normal">{</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!task)</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>task<sp/>limit<sp/>based<sp/>on<sp/>TOPIC_BITFIELD_SIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classScheduler_1a3e1f741da7d85ea80bb2f226d6457ab6" kindref="member">taskCount</ref><sp/>&gt;=<sp/><ref refid="FsmOS_8h_1a91bc2cac3c4615c062e7524ba2ea2278" kindref="member">MAX_TOPICS</ref>)</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classScheduler_1a1c6dd608a209d55e1925a4dbf5fb4344" kindref="member">logSystemEvent</ref>(<ref refid="classScheduler_1ab2bd6aa333e3f108343fedb022eaca79aa56e45ee8b2ce204989dcede4bfa7805" kindref="member">LOG_ERROR</ref>,<sp/>F(</highlight><highlight class="stringliteral">&quot;Task<sp/>limit<sp/>reached&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__fsmos_1ga0fd80592a7d1d2fd9b1b52081a8d69cb" kindref="member">logInfof</ref>(F(</highlight><highlight class="stringliteral">&quot;Max<sp/>tasks:<sp/>%u,<sp/>Current:<sp/>%u&quot;</highlight><highlight class="normal">),<sp/><ref refid="FsmOS_8h_1a91bc2cac3c4615c062e7524ba2ea2278" kindref="member">MAX_TOPICS</ref>,<sp/><ref refid="classScheduler_1a3e1f741da7d85ea80bb2f226d6457ab6" kindref="member">taskCount</ref>);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Acquire<sp/>node<sp/>from<sp/>pool<sp/>using<sp/>helper<sp/>method</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structTaskNode" kindref="compound">TaskNode</ref><sp/>*newNode<sp/>=<sp/><ref refid="classScheduler_1a38cf4a79d14bd68514a26946b19d3d53" kindref="member">allocateTaskNode</ref>(task);</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!newNode)</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>Pool<sp/>allocation<sp/>failed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Assign<sp/>task<sp/>ID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/>task-&gt;<ref refid="classTask_1a4dc17810637f6e3ea836f1068393a1c8" kindref="member">taskId</ref><sp/>=<sp/><ref refid="classScheduler_1a89473e616865792db671bdb2551aa338" kindref="member">nextTaskId</ref>++;</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classScheduler_1a89473e616865792db671bdb2551aa338" kindref="member">nextTaskId</ref><sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classScheduler_1a89473e616865792db671bdb2551aa338" kindref="member">nextTaskId</ref><sp/>=<sp/>1;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Avoid<sp/>zero<sp/>task<sp/>ID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>to<sp/>linked<sp/>list<sp/>(singly-linked)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classScheduler_1a9eb682b2716a34e7c3eb742782aa42e2" kindref="member">taskHead</ref><sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>task</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classScheduler_1a9eb682b2716a34e7c3eb742782aa42e2" kindref="member">taskHead</ref><sp/>=<sp/><ref refid="classScheduler_1a7dbc17482550f15704cdc4e5bbdde2d9" kindref="member">taskTail</ref><sp/>=<sp/>newNode;</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Append<sp/>to<sp/>tail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classScheduler_1a7dbc17482550f15704cdc4e5bbdde2d9" kindref="member">taskTail</ref>-&gt;<ref refid="structTaskNode_1af6f74dbb5d2baa80d10dabc43b593ffd" kindref="member">next</ref><sp/>=<sp/>newNode;</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classScheduler_1a7dbc17482550f15704cdc4e5bbdde2d9" kindref="member">taskTail</ref><sp/>=<sp/>newNode;</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classScheduler_1a3e1f741da7d85ea80bb2f226d6457ab6" kindref="member">taskCount</ref>++;</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="827"><highlight class="normal">}</highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight></codeline>
<codeline lineno="829" refid="classScheduler_1a303a5bd8d44b55803e6da7b4108401c2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classScheduler_1a303a5bd8d44b55803e6da7b4108401c2" kindref="member">Scheduler::remove</ref>(<ref refid="classTask" kindref="compound">Task</ref><sp/>*task)</highlight></codeline>
<codeline lineno="830"><highlight class="normal">{</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!task)</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>node<sp/>containing<sp/>this<sp/>task,<sp/>tracking<sp/>previous<sp/>(singly-linked)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structTaskNode" kindref="compound">TaskNode</ref><sp/>*current<sp/>=<sp/><ref refid="classScheduler_1a9eb682b2716a34e7c3eb742782aa42e2" kindref="member">taskHead</ref>;</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structTaskNode" kindref="compound">TaskNode</ref><sp/>*previous<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(current<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current-&gt;<ref refid="structTaskNode_1a04f109a440464fd95c18d0f3758ee0af" kindref="member">task</ref><sp/>==<sp/>task)</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>from<sp/>linked<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(previous)</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>previous-&gt;<ref refid="structTaskNode_1af6f74dbb5d2baa80d10dabc43b593ffd" kindref="member">next</ref><sp/>=<sp/>current-&gt;<ref refid="structTaskNode_1af6f74dbb5d2baa80d10dabc43b593ffd" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Removing<sp/>head</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classScheduler_1a9eb682b2716a34e7c3eb742782aa42e2" kindref="member">taskHead</ref><sp/>=<sp/>current-&gt;<ref refid="structTaskNode_1af6f74dbb5d2baa80d10dabc43b593ffd" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current<sp/>==<sp/><ref refid="classScheduler_1a7dbc17482550f15704cdc4e5bbdde2d9" kindref="member">taskTail</ref>)</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>tail<sp/>if<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classScheduler_1a7dbc17482550f15704cdc4e5bbdde2d9" kindref="member">taskTail</ref><sp/>=<sp/>previous;</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classScheduler_1a419ac926b5685ea804fe7eae086066e3" kindref="member">deallocateTaskNode</ref>(current);</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classScheduler_1a3e1f741da7d85ea80bb2f226d6457ab6" kindref="member">taskCount</ref>--;</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>previous<sp/>=<sp/>current;</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current<sp/>=<sp/>current-&gt;<ref refid="structTaskNode_1af6f74dbb5d2baa80d10dabc43b593ffd" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="869"><highlight class="normal">}</highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight></codeline>
<codeline lineno="871" refid="classScheduler_1aaa234e0155e99b4fcbae695898663eea" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classScheduler_1aaa234e0155e99b4fcbae695898663eea" kindref="member">Scheduler::removeAll</ref>()</highlight></codeline>
<codeline lineno="872"><highlight class="normal">{</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structTaskNode" kindref="compound">TaskNode</ref><sp/>*current<sp/>=<sp/><ref refid="classScheduler_1a9eb682b2716a34e7c3eb742782aa42e2" kindref="member">taskHead</ref>;</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(current<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structTaskNode" kindref="compound">TaskNode</ref><sp/>*next<sp/>=<sp/>current-&gt;<ref refid="structTaskNode_1af6f74dbb5d2baa80d10dabc43b593ffd" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current-&gt;<ref refid="structTaskNode_1a04f109a440464fd95c18d0f3758ee0af" kindref="member">task</ref>-&gt;<ref refid="classTask_1aba5eb3d6c2a034aa0e319383fbec68c4" kindref="member">stop</ref>();</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classScheduler_1a419ac926b5685ea804fe7eae086066e3" kindref="member">deallocateTaskNode</ref>(current);</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current<sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classScheduler_1a9eb682b2716a34e7c3eb742782aa42e2" kindref="member">taskHead</ref><sp/>=<sp/><ref refid="classScheduler_1a7dbc17482550f15704cdc4e5bbdde2d9" kindref="member">taskTail</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classScheduler_1a3e1f741da7d85ea80bb2f226d6457ab6" kindref="member">taskCount</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="883"><highlight class="normal">}</highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight></codeline>
<codeline lineno="885" refid="classScheduler_1aabf3840938cc797555cdee88f5d19dd2" refkind="member"><highlight class="normal"><ref refid="classTask" kindref="compound">Task</ref><sp/>*<ref refid="classScheduler_1aabf3840938cc797555cdee88f5d19dd2" kindref="member">Scheduler::getTask</ref>(uint8_t<sp/>task_id)</highlight></codeline>
<codeline lineno="886"><highlight class="normal">{</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classScheduler_1ad2b77c7b7e929aad03ce0034f992d876" kindref="member">findTask</ref>([task_id](<ref refid="classTask" kindref="compound">Task</ref><sp/>*<sp/>task)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>task-&gt;<ref refid="classTask_1a548d620b8f5d7490b8cdc235dbfdf6eb" kindref="member">getId</ref>()<sp/>==<sp/>task_id;<sp/>});</highlight></codeline>
<codeline lineno="888"><highlight class="normal">}</highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight><highlight class="comment">//<sp/>getTaskCount<sp/>is<sp/>now<sp/>inline<sp/>in<sp/>header<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight></codeline>
<codeline lineno="892" refid="classScheduler_1acb0612339205f7e921b0034768dba4c5" refkind="member"><highlight class="normal">uint16_t<sp/><ref refid="classScheduler_1acb0612339205f7e921b0034768dba4c5" kindref="member">Scheduler::getMaxTasks</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classScheduler_1a72d0e1044f04173955e8783b8c1c9bb0" kindref="member">taskNodePoolCapacity</ref>;<sp/>}</highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight></codeline>
<codeline lineno="894" refid="classScheduler_1ae552f70c9bc8fa9f7406e482d6a3769b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classScheduler_1ae552f70c9bc8fa9f7406e482d6a3769b" kindref="member">Scheduler::begin</ref>()</highlight></codeline>
<codeline lineno="895"><highlight class="normal">{</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>stack<sp/>canary<sp/>before<sp/>tasks<sp/>start<sp/>executing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__AVR__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/>init_stack_canary();</highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>log<sp/>level<sp/>to<sp/>INFO<sp/>for<sp/>better<sp/>debugging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classScheduler_1a612b33338832de0d18ebf5859b3d7037" kindref="member">setLogLevel</ref>(<ref refid="classScheduler_1ab2bd6aa333e3f108343fedb022eaca79ac50a6d9344241d486cea80292b5ba327" kindref="member">LOG_INFO</ref>);</highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Log<sp/>startup<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classScheduler_1a1c6dd608a209d55e1925a4dbf5fb4344" kindref="member">logSystemEvent</ref>(<ref refid="classScheduler_1ab2bd6aa333e3f108343fedb022eaca79ac50a6d9344241d486cea80292b5ba327" kindref="member">LOG_INFO</ref>,<sp/>F(</highlight><highlight class="stringliteral">&quot;FsmOS<sp/>starting&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classScheduler_1a8a0b0619fdfbda3338fc4964999b3ffd" kindref="member">running</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classScheduler_1ac66364f021223ea49e76680b6dbcb56a" kindref="member">systemTime</ref><sp/>=<sp/>millis();</highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__AVR__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/>init_stdio_to_serial();</highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Start<sp/>all<sp/>tasks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classScheduler_1a3c9f6290c6ae7231b96c9ba6da36382b" kindref="member">forEachTask</ref>([</highlight><highlight class="keyword">this</highlight><highlight class="normal">](<ref refid="classTask" kindref="compound">Task</ref><sp/>*<sp/>task)</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task-&gt;<ref refid="classTask_1a5d6a1d3c6cd5b587d2414737fab9f3ed" kindref="member">start</ref>();</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classScheduler_1aa541036ba6db4765a2270d39f74c8758" kindref="member">feedWatchdog</ref>();</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Log<sp/>task<sp/>count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classScheduler_1a1c6dd608a209d55e1925a4dbf5fb4344" kindref="member">logSystemEvent</ref>(<ref refid="classScheduler_1ab2bd6aa333e3f108343fedb022eaca79ac50a6d9344241d486cea80292b5ba327" kindref="member">LOG_INFO</ref>,<sp/>F(</highlight><highlight class="stringliteral">&quot;Scheduler<sp/>ready&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="922"><highlight class="normal">}</highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight></codeline>
<codeline lineno="924" refid="classScheduler_1ae3fa321ea81e2c07e361147f4f0d606e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classScheduler_1ae3fa321ea81e2c07e361147f4f0d606e" kindref="member">Scheduler::loopOnce</ref>()</highlight></codeline>
<codeline lineno="925"><highlight class="normal">{</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classScheduler_1a8a0b0619fdfbda3338fc4964999b3ffd" kindref="member">running</ref>)</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classScheduler_1a0a80134fcc4380c2577a5281352847eb" kindref="member">updateSystemTime</ref>();</highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Decrease<sp/>remaining<sp/>time<sp/>for<sp/>all<sp/>active<sp/>tasks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classScheduler_1a3c9f6290c6ae7231b96c9ba6da36382b" kindref="member">forEachTask</ref>([](<ref refid="classTask" kindref="compound">Task</ref><sp/>*<sp/>task)</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(task-&gt;<ref refid="classTask_1a14f40317936f729e291a81fcf4426466" kindref="member">isActive</ref>()<sp/>&amp;&amp;<sp/>task-&gt;<ref refid="classTask_1a69b0d2b2a7231d2e2a2880b7cca136e1" kindref="member">remainingTime</ref><sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task-&gt;remainingTime--;</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Feed<sp/>watchdog<sp/>timer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classScheduler_1aa541036ba6db4765a2270d39f74c8758" kindref="member">feedWatchdog</ref>();</highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Process<sp/>a<sp/>limited<sp/>number<sp/>of<sp/>queued<sp/>messages<sp/>per<sp/>tick</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classScheduler_1aef20dca5b8efdd71b4e91f91d5e0240f" kindref="member">processMessages</ref>();</highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classTask" kindref="compound">Task</ref><sp/>*next_task<sp/>=<sp/><ref refid="classScheduler_1aafdaee288f465a178ef154e1fce57cf4" kindref="member">findNextTask</ref>();</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(next_task)</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classScheduler_1a42e220f60192016791fa56855fcc8e46" kindref="member">executeTask</ref>(next_task);</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="953"><highlight class="normal">}</highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight></codeline>
<codeline lineno="955" refid="classScheduler_1a81607abe2905dee2e7cf9222a9e35b8f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classScheduler_1a81607abe2905dee2e7cf9222a9e35b8f" kindref="member">Scheduler::loop</ref>()</highlight></codeline>
<codeline lineno="956"><highlight class="normal">{</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="classScheduler_1a8a0b0619fdfbda3338fc4964999b3ffd" kindref="member">running</ref>)</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classScheduler_1ae3fa321ea81e2c07e361147f4f0d606e" kindref="member">loopOnce</ref>();</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="961"><highlight class="normal">}</highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight></codeline>
<codeline lineno="963" refid="classScheduler_1a7ac470a1b0421f2db78e5b478a6b28b1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classScheduler_1a7ac470a1b0421f2db78e5b478a6b28b1" kindref="member">Scheduler::stop</ref>()<sp/>{<sp/><ref refid="classScheduler_1a8a0b0619fdfbda3338fc4964999b3ffd" kindref="member">running</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight></codeline>
<codeline lineno="965" refid="classScheduler_1a6212cb4fdc7a3ed5c9e50e97729cff8d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classScheduler_1a6212cb4fdc7a3ed5c9e50e97729cff8d" kindref="member">Scheduler::publishMessage</ref>(uint8_t<sp/>topic,<sp/>uint8_t<sp/>type,<sp/>uint16_t<sp/>arg)</highlight></codeline>
<codeline lineno="966"><highlight class="normal">{</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Enqueue<sp/>for<sp/>all<sp/>subscribed<sp/>tasks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classScheduler_1a3c9f6290c6ae7231b96c9ba6da36382b" kindref="member">forEachTask</ref>([</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>topic,<sp/>type,<sp/>arg](<ref refid="classTask" kindref="compound">Task</ref><sp/>*<sp/>task)</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(task-&gt;<ref refid="classTask_1a14f40317936f729e291a81fcf4426466" kindref="member">isActive</ref>()<sp/>&amp;&amp;<sp/>task-&gt;<ref refid="classTask_1a1f356af32a2d49b158ead810225d00be" kindref="member">isSubscribedToTopic</ref>(topic))</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enqueueQueuedMessage(task-&gt;getId(),<sp/>topic,<sp/>type,<sp/>arg);</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="975"><highlight class="normal">}</highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight></codeline>
<codeline lineno="977" refid="classScheduler_1a4f3960871e36fdf7234b151f81f04120" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classScheduler_1a4f3960871e36fdf7234b151f81f04120" kindref="member">Scheduler::sendMessage</ref>(uint8_t<sp/>task_id,<sp/>uint8_t<sp/>type,<sp/>uint16_t<sp/>arg)</highlight></codeline>
<codeline lineno="978"><highlight class="normal">{</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classTask" kindref="compound">Task</ref><sp/>*target_task<sp/>=<sp/><ref refid="classScheduler_1aabf3840938cc797555cdee88f5d19dd2" kindref="member">getTask</ref>(task_id);</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!target_task<sp/>||<sp/>!target_task-&gt;<ref refid="classTask_1a14f40317936f729e291a81fcf4426466" kindref="member">isActive</ref>())</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classScheduler_1acb1eb89034fcb709b8769ff9060063e5" kindref="member">enqueueQueuedMessage</ref>(task_id,<sp/>0,<sp/>type,<sp/>arg);</highlight></codeline>
<codeline lineno="986"><highlight class="normal">}</highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight></codeline>
<codeline lineno="988" refid="classScheduler_1afe202befb3d6eac9dbb6acd1a4b09401" refkind="member"><highlight class="normal">uint32_t<sp/><ref refid="classScheduler_1afe202befb3d6eac9dbb6acd1a4b09401" kindref="member">Scheduler::now</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classScheduler_1ac66364f021223ea49e76680b6dbcb56a" kindref="member">systemTime</ref>;<sp/>}</highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight></codeline>
<codeline lineno="990" refid="classScheduler_1a56c3c1a776927eeb7917e7b636a2e3ab" refkind="member"><highlight class="normal">uint16_t<sp/><ref refid="classScheduler_1a56c3c1a776927eeb7917e7b636a2e3ab" kindref="member">Scheduler::getFreeMemory</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="991"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>__heap_start;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>start<sp/>of<sp/>heap<sp/>(in<sp/>.bss)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*__brkval;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>current<sp/>heap<sp/>break<sp/>(nullptr<sp/>if<sp/>none)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>v;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stack<sp/>variable<sp/>to<sp/>get<sp/>current<sp/>stack<sp/>address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Difference<sp/>between<sp/>current<sp/>stack<sp/>pointer<sp/>and<sp/>heap<sp/>end/start</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint16_t)(&amp;v<sp/>-<sp/>(__brkval<sp/>==<sp/>0<sp/>?<sp/>&amp;__heap_start<sp/>:<sp/>__brkval));</highlight></codeline>
<codeline lineno="997"><highlight class="normal">}</highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight></codeline>
<codeline lineno="999" refid="classScheduler_1a612b33338832de0d18ebf5859b3d7037" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classScheduler_1a612b33338832de0d18ebf5859b3d7037" kindref="member">Scheduler::setLogLevel</ref>(<ref refid="classScheduler_1ab2bd6aa333e3f108343fedb022eaca79" kindref="member">LogLevel</ref><sp/>level)<sp/>{<sp/><ref refid="classScheduler_1a720b2ff4a9e770649fe7b63d3098613d" kindref="member">currentLogLevel</ref><sp/>=<sp/>level;<sp/>}</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight></codeline>
<codeline lineno="1001" refid="classScheduler_1acaab28b4949d5a175212d134c04cf406" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classScheduler_1acaab28b4949d5a175212d134c04cf406" kindref="member">Scheduler::logMessage</ref>(<ref refid="classTask" kindref="compound">Task</ref><sp/>*task,<sp/><ref refid="classScheduler_1ab2bd6aa333e3f108343fedb022eaca79" kindref="member">LogLevel</ref><sp/>level,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*msg)</highlight></codeline>
<codeline lineno="1002"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(level<sp/>&lt;<sp/><ref refid="classScheduler_1a720b2ff4a9e770649fe7b63d3098613d" kindref="member">currentLogLevel</ref>)</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*level_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;DEBUG&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(level)</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="classScheduler_1ab2bd6aa333e3f108343fedb022eaca79ac50a6d9344241d486cea80292b5ba327" kindref="member">LOG_INFO</ref>:</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>level_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;INFO&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="classScheduler_1ab2bd6aa333e3f108343fedb022eaca79a43ae65cd6d87b4c15b8ddb2e1a110286" kindref="member">LOG_WARN</ref>:</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>level_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;WARN&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="classScheduler_1ab2bd6aa333e3f108343fedb022eaca79aa56e45ee8b2ce204989dcede4bfa7805" kindref="member">LOG_ERROR</ref>:</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>level_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ERROR&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(level_str);</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;]<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(task)</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;T&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.print(task-&gt;<ref refid="classTask_1a548d620b8f5d7490b8cdc235dbfdf6eb" kindref="member">getId</ref>());</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.println(msg);</highlight></codeline>
<codeline lineno="1036"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight></codeline>
<codeline lineno="1038" refid="classScheduler_1af5334fe39dbfc2286e91ee358087d3b5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classScheduler_1acaab28b4949d5a175212d134c04cf406" kindref="member">Scheduler::logMessage</ref>(<ref refid="classTask" kindref="compound">Task</ref><sp/>*task,<sp/><ref refid="classScheduler_1ab2bd6aa333e3f108343fedb022eaca79" kindref="member">LogLevel</ref><sp/>level,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>__FlashStringHelper<sp/>*msg)</highlight></codeline>
<codeline lineno="1039"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(level<sp/>&lt;<sp/><ref refid="classScheduler_1a720b2ff4a9e770649fe7b63d3098613d" kindref="member">currentLogLevel</ref>)</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*level_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;DEBUG&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(level)</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="classScheduler_1ab2bd6aa333e3f108343fedb022eaca79ac50a6d9344241d486cea80292b5ba327" kindref="member">LOG_INFO</ref>:</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>level_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;INFO&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="classScheduler_1ab2bd6aa333e3f108343fedb022eaca79a43ae65cd6d87b4c15b8ddb2e1a110286" kindref="member">LOG_WARN</ref>:</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>level_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;WARN&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="classScheduler_1ab2bd6aa333e3f108343fedb022eaca79aa56e45ee8b2ce204989dcede4bfa7805" kindref="member">LOG_ERROR</ref>:</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>level_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ERROR&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(level_str);</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;]<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(task)</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;T&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.print(task-&gt;<ref refid="classTask_1a548d620b8f5d7490b8cdc235dbfdf6eb" kindref="member">getId</ref>());</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.println(msg);</highlight></codeline>
<codeline lineno="1073"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight></codeline>
<codeline lineno="1075" refid="classScheduler_1aab0e31c53df15af0ffbcd97d0510c9a2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classScheduler_1aab0e31c53df15af0ffbcd97d0510c9a2" kindref="member">Scheduler::onTick</ref>()<sp/>{<sp/><ref refid="classScheduler_1ac66364f021223ea49e76680b6dbcb56a" kindref="member">systemTime</ref>++;<sp/>}</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight></codeline>
<codeline lineno="1077" refid="classScheduler_1aef20dca5b8efdd71b4e91f91d5e0240f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classScheduler_1aef20dca5b8efdd71b4e91f91d5e0240f" kindref="member">Scheduler::processMessages</ref>()</highlight></codeline>
<codeline lineno="1078"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Dequeue<sp/>node<sp/>to<sp/>ensure<sp/>we<sp/>recycle<sp/>only<sp/>after<sp/>handler<sp/>finishes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classScheduler_1a13367b7d53dc7bf804d9158e57bff5f7" kindref="member">msgCount</ref><sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structScheduler_1_1MsgNode" kindref="compound">MsgNode</ref><sp/>*node<sp/>=<sp/><ref refid="classScheduler_1afc800a55be0f3da82ef2e79dad96496d" kindref="member">msgHead</ref>;</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classScheduler_1afc800a55be0f3da82ef2e79dad96496d" kindref="member">msgHead</ref><sp/>=<sp/>node-&gt;<ref refid="structScheduler_1_1MsgNode_1a91702c9faa02b67ac24d3924be9fdaee" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classScheduler_1afc800a55be0f3da82ef2e79dad96496d" kindref="member">msgHead</ref>)</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classScheduler_1a2503ab5f7acb13a3bd46f35036af3c02" kindref="member">msgTail</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classScheduler_1a13367b7d53dc7bf804d9158e57bff5f7" kindref="member">msgCount</ref>--;</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structScheduler_1_1QueuedMessage" kindref="compound">QueuedMessage</ref><sp/>&amp;qm<sp/>=<sp/>node-&gt;<ref refid="structScheduler_1_1MsgNode_1ab2623f2b15be317f6b54848af08ce97c" kindref="member">payload</ref>;</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classTask" kindref="compound">Task</ref><sp/>*target<sp/>=<sp/><ref refid="classScheduler_1aabf3840938cc797555cdee88f5d19dd2" kindref="member">getTask</ref>(qm.<ref refid="structScheduler_1_1QueuedMessage_1ab2d20d6197328866badf5e94f048255c" kindref="member">targetTaskId</ref>);</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(target<sp/>&amp;&amp;<sp/>target-&gt;<ref refid="classTask_1a14f40317936f729e291a81fcf4426466" kindref="member">isActive</ref>())</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target-&gt;<ref refid="classTask_1a25e697fa851318504170fc4f3edf8308" kindref="member">on_msg</ref>(qm.<ref refid="structScheduler_1_1QueuedMessage_1a4920af5804a48c59719261484553f169" kindref="member">msg</ref>);</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Recycle<sp/>node<sp/>after<sp/>handler<sp/>returns;<sp/>keep<sp/>buffer<sp/>for<sp/>reuse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;<ref refid="structScheduler_1_1MsgNode_1a91702c9faa02b67ac24d3924be9fdaee" kindref="member">next</ref><sp/>=<sp/><ref refid="classScheduler_1a59fa5a068cd9a36672b39362982c2e97" kindref="member">freeHead</ref>;</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classScheduler_1a59fa5a068cd9a36672b39362982c2e97" kindref="member">freeHead</ref><sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight></codeline>
<codeline lineno="1107" refid="classScheduler_1a0a80134fcc4380c2577a5281352847eb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classScheduler_1a0a80134fcc4380c2577a5281352847eb" kindref="member">Scheduler::updateSystemTime</ref>()<sp/>{<sp/><ref refid="classScheduler_1ac66364f021223ea49e76680b6dbcb56a" kindref="member">systemTime</ref><sp/>=<sp/>millis();<sp/>}</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight></codeline>
<codeline lineno="1109" refid="classScheduler_1aafdaee288f465a178ef154e1fce57cf4" refkind="member"><highlight class="normal"><ref refid="classTask" kindref="compound">Task</ref><sp/>*<ref refid="classScheduler_1aafdaee288f465a178ef154e1fce57cf4" kindref="member">Scheduler::findNextTask</ref>()</highlight></codeline>
<codeline lineno="1110"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classTask" kindref="compound">Task</ref><sp/>*nextTask<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>shortestTime<sp/>=<sp/>UINT16_MAX;</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structTaskNode" kindref="compound">TaskNode</ref><sp/>*current<sp/>=<sp/><ref refid="classScheduler_1a9eb682b2716a34e7c3eb742782aa42e2" kindref="member">taskHead</ref>;</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(current<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current-&gt;<ref refid="structTaskNode_1a04f109a440464fd95c18d0f3758ee0af" kindref="member">task</ref><sp/>&amp;&amp;<sp/>current-&gt;<ref refid="structTaskNode_1a04f109a440464fd95c18d0f3758ee0af" kindref="member">task</ref>-&gt;<ref refid="classTask_1a14f40317936f729e291a81fcf4426466" kindref="member">isActive</ref>()<sp/>&amp;&amp;<sp/>current-&gt;<ref refid="structTaskNode_1a04f109a440464fd95c18d0f3758ee0af" kindref="member">task</ref>-&gt;<ref refid="classTask_1a69b0d2b2a7231d2e2a2880b7cca136e1" kindref="member">remainingTime</ref><sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>task<sp/>declares<sp/>a<sp/>message<sp/>production<sp/>budget,<sp/>ensure<sp/>enough<sp/>free<sp/>queue<sp/>slots</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>budget<sp/>=<sp/>current-&gt;<ref refid="structTaskNode_1a04f109a440464fd95c18d0f3758ee0af" kindref="member">task</ref>-&gt;<ref refid="group__fsmos_1gadf715a30a3759bfd0856f12cfdf29d0e" kindref="member">getMaxMessageBudget</ref>();</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>use<sp/>default<sp/>if<sp/>task<sp/>hasn&apos;t<sp/>explicitly<sp/>set<sp/>a<sp/>budget<sp/>(inherited<sp/>default)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(budget<sp/>==<sp/><ref refid="group__fsmos_1ga5c3f1eb0aa79f56d91fdbf8fd9f1b911" kindref="member">DEFAULT_TASK_MESSAGE_BUDGET</ref>)</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Task<sp/>is<sp/>using<sp/>the<sp/>default,<sp/>which<sp/>is<sp/>fine</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>budget<sp/>is<sp/>0,<sp/>task<sp/>explicitly<sp/>wants<sp/>no<sp/>message<sp/>production</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>budget<sp/>&gt;<sp/>0,<sp/>task<sp/>has<sp/>explicit<sp/>budget</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>both<sp/>cases,<sp/>respect<sp/>the<sp/>task&apos;s<sp/>decision</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classScheduler_1a86ddccd30b5b2af61d3cb76d53ca1b4b" kindref="member">getFreeQueueSlots</ref>()<sp/>&lt;<sp/>budget)</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Skip<sp/>this<sp/>task<sp/>for<sp/>now;<sp/>not<sp/>enough<sp/>capacity<sp/>to<sp/>accept<sp/>its<sp/>messages</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nextTask<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nextTask<sp/>=<sp/>current-&gt;<ref refid="structTaskNode_1a04f109a440464fd95c18d0f3758ee0af" kindref="member">task</ref>;</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current-&gt;<ref refid="structTaskNode_1a04f109a440464fd95c18d0f3758ee0af" kindref="member">task</ref>-&gt;<ref refid="classTask_1aef8cf69a9b677977003d8b72d66d36d8" kindref="member">getPriority</ref>()<sp/>&gt;<sp/>nextTask-&gt;<ref refid="classTask_1aef8cf69a9b677977003d8b72d66d36d8" kindref="member">getPriority</ref>())</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Higher<sp/>enum<sp/>value<sp/>wins<sp/>(PRIORITY_SYSTEM=7<sp/>&gt;<sp/>PRIORITY_LOWEST=0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nextTask<sp/>=<sp/>current-&gt;<ref refid="structTaskNode_1a04f109a440464fd95c18d0f3758ee0af" kindref="member">task</ref>;</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current-&gt;<ref refid="structTaskNode_1a04f109a440464fd95c18d0f3758ee0af" kindref="member">task</ref>-&gt;<ref refid="classTask_1aef8cf69a9b677977003d8b72d66d36d8" kindref="member">getPriority</ref>()<sp/>==<sp/>nextTask-&gt;<ref refid="classTask_1aef8cf69a9b677977003d8b72d66d36d8" kindref="member">getPriority</ref>())</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Same<sp/>priority,<sp/>smaller<sp/>task<sp/>ID<sp/>wins</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current-&gt;<ref refid="structTaskNode_1a04f109a440464fd95c18d0f3758ee0af" kindref="member">task</ref>-&gt;<ref refid="classTask_1a548d620b8f5d7490b8cdc235dbfdf6eb" kindref="member">getId</ref>()<sp/>&lt;<sp/>nextTask-&gt;<ref refid="classTask_1a548d620b8f5d7490b8cdc235dbfdf6eb" kindref="member">getId</ref>())</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nextTask<sp/>=<sp/>current-&gt;<ref refid="structTaskNode_1a04f109a440464fd95c18d0f3758ee0af" kindref="member">task</ref>;</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current-&gt;<ref refid="structTaskNode_1a04f109a440464fd95c18d0f3758ee0af" kindref="member">task</ref><sp/>&amp;&amp;<sp/>current-&gt;<ref refid="structTaskNode_1a04f109a440464fd95c18d0f3758ee0af" kindref="member">task</ref>-&gt;<ref refid="classTask_1a14f40317936f729e291a81fcf4426466" kindref="member">isActive</ref>()<sp/>&amp;&amp;<sp/>current-&gt;<ref refid="structTaskNode_1a04f109a440464fd95c18d0f3758ee0af" kindref="member">task</ref>-&gt;<ref refid="classTask_1a69b0d2b2a7231d2e2a2880b7cca136e1" kindref="member">remainingTime</ref><sp/>&lt;<sp/>shortestTime)</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shortestTime<sp/>=<sp/>current-&gt;<ref refid="structTaskNode_1a04f109a440464fd95c18d0f3758ee0af" kindref="member">task</ref>-&gt;<ref refid="classTask_1a69b0d2b2a7231d2e2a2880b7cca136e1" kindref="member">remainingTime</ref>;</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current<sp/>=<sp/>current-&gt;<ref refid="structTaskNode_1af6f74dbb5d2baa80d10dabc43b593ffd" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nextTask;</highlight></codeline>
<codeline lineno="1159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"></highlight></codeline>
<codeline lineno="1161" refid="classScheduler_1a42e220f60192016791fa56855fcc8e46" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classScheduler_1a42e220f60192016791fa56855fcc8e46" kindref="member">Scheduler::executeTask</ref>(<ref refid="classTask" kindref="compound">Task</ref><sp/>*task)</highlight></codeline>
<codeline lineno="1162"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!task<sp/>||<sp/>!task-&gt;<ref refid="classTask_1a14f40317936f729e291a81fcf4426466" kindref="member">isActive</ref>())</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"></highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>execStart<sp/>=<sp/>micros();</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>currentTime<sp/>=<sp/><ref refid="classScheduler_1ac66364f021223ea49e76680b6dbcb56a" kindref="member">systemTime</ref>;</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Handle<sp/>task<sp/>timing<sp/>monitoring</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classScheduler_1a22a32d58cf6898fff48880c5349c115f" kindref="member">handleTaskTiming</ref>(task,<sp/>currentTime);</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Execute<sp/>the<sp/>actual<sp/>task<sp/>step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classScheduler_1a74551b047dfdd1675e53de6d1fc53ac7" kindref="member">executeTaskStep</ref>(task);</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>task<sp/>execution<sp/>statistics</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classScheduler_1a23437fce9b79f76f4534c402e832d4f5" kindref="member">updateTaskStatistics</ref>(task,<sp/>execStart);</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>timing<sp/>monitoring<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classScheduler_1a6ee466fc5e47301d6101c246c691c131" kindref="member">updateTimingVariables</ref>(task);</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>terminated<sp/>tasks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classScheduler_1af423092ed6af17160b11a8fab79c2eab" kindref="member">checkForTerminatedTask</ref>(task);</highlight></codeline>
<codeline lineno="1185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Refactored<sp/>helper<sp/>methods<sp/>for<sp/>executeTask</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1188" refid="classScheduler_1a22a32d58cf6898fff48880c5349c115f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classScheduler_1a22a32d58cf6898fff48880c5349c115f" kindref="member">Scheduler::handleTaskTiming</ref>(<ref refid="classTask" kindref="compound">Task</ref><sp/>*task,<sp/>uint32_t<sp/>currentTime)</highlight></codeline>
<codeline lineno="1189"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>scheduled<sp/>time<sp/>(when<sp/>task<sp/>should<sp/>have<sp/>started)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/>task-&gt;<ref refid="classTask_1ac78a2eb92ac06324535259def5fe2d43" kindref="member">scheduledTime</ref><sp/>=<sp/>currentTime<sp/>-<sp/>task-&gt;<ref refid="classTask_1aa096c58dddc4fb8f7f8d5f40e1815d2d" kindref="member">getPeriod</ref>();</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/>task-&gt;<ref refid="classTask_1aba00d925c610ebb6ffce38ce7d550b33" kindref="member">actualStartTime</ref><sp/>=<sp/>currentTime;</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>delay</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(task-&gt;<ref refid="classTask_1aba00d925c610ebb6ffce38ce7d550b33" kindref="member">actualStartTime</ref><sp/>&gt;<sp/>task-&gt;<ref refid="classTask_1ac78a2eb92ac06324535259def5fe2d43" kindref="member">scheduledTime</ref>)</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>delay<sp/>=<sp/>task-&gt;<ref refid="classTask_1aba00d925c610ebb6ffce38ce7d550b33" kindref="member">actualStartTime</ref><sp/>-<sp/>task-&gt;<ref refid="classTask_1ac78a2eb92ac06324535259def5fe2d43" kindref="member">scheduledTime</ref>;</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>delayMs<sp/>=<sp/>(delay<sp/>&gt;<sp/>65535)<sp/>?<sp/>65535<sp/>:<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(delay);</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"></highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>delay<sp/>statistics</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task-&gt;<ref refid="classTask_1aaf791abc71bca2ca62d29d2e155dc82c" kindref="member">delayCount</ref>++;</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(delayMs<sp/>&gt;<sp/>task-&gt;<ref refid="classTask_1a82389ea58680f2ce8a0ffada921c3b6c" kindref="member">maxDelayMs</ref>)</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task-&gt;<ref refid="classTask_1a82389ea58680f2ce8a0ffada921c3b6c" kindref="member">maxDelayMs</ref><sp/>=<sp/>delayMs;</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Log<sp/>delay<sp/>with<sp/>attribution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classScheduler_1a40371a166759f310c2223ef082526829" kindref="member">logTaskDelay</ref>(task,<sp/>delayMs,<sp/><ref refid="classScheduler_1ac44741f6b01d7d8f914851b72f538617" kindref="member">lastExecutedTaskId</ref>);</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"></highlight></codeline>
<codeline lineno="1212" refid="classScheduler_1a74551b047dfdd1675e53de6d1fc53ac7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classScheduler_1a74551b047dfdd1675e53de6d1fc53ac7" kindref="member">Scheduler::executeTaskStep</ref>(<ref refid="classTask" kindref="compound">Task</ref><sp/>*task)</highlight></codeline>
<codeline lineno="1213"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>remaining<sp/>time<sp/>for<sp/>next<sp/>execution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/>task-&gt;<ref refid="classTask_1a69b0d2b2a7231d2e2a2880b7cca136e1" kindref="member">remainingTime</ref><sp/>=<sp/>task-&gt;<ref refid="classTask_1aa096c58dddc4fb8f7f8d5f40e1815d2d" kindref="member">getPeriod</ref>();</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Execute<sp/>task<sp/>step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/>task-&gt;<ref refid="classTask_1a399ff82ffe4b94a11cd8148987e38622" kindref="member">step</ref>();</highlight></codeline>
<codeline lineno="1219"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"></highlight></codeline>
<codeline lineno="1221" refid="classScheduler_1a23437fce9b79f76f4534c402e832d4f5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classScheduler_1a23437fce9b79f76f4534c402e832d4f5" kindref="member">Scheduler::updateTaskStatistics</ref>(<ref refid="classTask" kindref="compound">Task</ref><sp/>*task,<sp/>uint32_t<sp/>execStart)</highlight></codeline>
<codeline lineno="1222"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>execution<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>execTime<sp/>=<sp/>micros()<sp/>-<sp/>execStart;</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>execTime16<sp/>=<sp/>(execTime<sp/>&gt;<sp/>65535)<sp/>?<sp/>65535<sp/>:<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(execTime);</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>run<sp/>count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(task-&gt;<ref refid="classTask_1a48485325ce407372474c73982690a0cc" kindref="member">runCount</ref><sp/>&lt;<sp/>65535)</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task-&gt;<ref refid="classTask_1a48485325ce407372474c73982690a0cc" kindref="member">runCount</ref>++;</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>max<sp/>execution<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(execTime16<sp/>&gt;<sp/>task-&gt;<ref refid="classTask_1ad464cac8faf232328c59600a70bfa11c" kindref="member">maxExecTimeUs</ref>)</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task-&gt;<ref refid="classTask_1ad464cac8faf232328c59600a70bfa11c" kindref="member">maxExecTimeUs</ref><sp/>=<sp/>execTime16;</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>average<sp/>execution<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(task-&gt;<ref refid="classTask_1a48485325ce407372474c73982690a0cc" kindref="member">runCount</ref><sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task-&gt;<ref refid="classTask_1a54935dc05e1ff8ba284d18b84a057ac6" kindref="member">avgExecTimeUs</ref><sp/>=<sp/>execTime16;</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(task-&gt;<ref refid="classTask_1a48485325ce407372474c73982690a0cc" kindref="member">runCount</ref><sp/>==<sp/>65535)</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Exponential<sp/>moving<sp/>average<sp/>to<sp/>avoid<sp/>overflow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>diff<sp/>=<sp/>execTime16<sp/>-<sp/>task-&gt;<ref refid="classTask_1a54935dc05e1ff8ba284d18b84a057ac6" kindref="member">avgExecTimeUs</ref>;</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>adjustment<sp/>=<sp/>diff<sp/>/<sp/>1000;<sp/><sp/></highlight><highlight class="comment">//<sp/>Slow<sp/>adaptation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>newAvg<sp/>=<sp/>task-&gt;<ref refid="classTask_1a54935dc05e1ff8ba284d18b84a057ac6" kindref="member">avgExecTimeUs</ref><sp/>+<sp/>adjustment;</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clamp<sp/>to<sp/>valid<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newAvg<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newAvg<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newAvg<sp/>&gt;<sp/>65535)</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newAvg<sp/>=<sp/>65535;</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task-&gt;<ref refid="classTask_1a54935dc05e1ff8ba284d18b84a057ac6" kindref="member">avgExecTimeUs</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(newAvg);</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Simple<sp/>moving<sp/>average</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>newAvg<sp/>=<sp/>((uint32_t)task-&gt;<ref refid="classTask_1a54935dc05e1ff8ba284d18b84a057ac6" kindref="member">avgExecTimeUs</ref><sp/>*<sp/>(task-&gt;<ref refid="classTask_1a48485325ce407372474c73982690a0cc" kindref="member">runCount</ref><sp/>-<sp/>1)<sp/>+<sp/>execTime16)<sp/>/<sp/>task-&gt;<ref refid="classTask_1a48485325ce407372474c73982690a0cc" kindref="member">runCount</ref>;</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task-&gt;<ref refid="classTask_1a54935dc05e1ff8ba284d18b84a057ac6" kindref="member">avgExecTimeUs</ref><sp/>=<sp/>(newAvg<sp/>&gt;<sp/>65535)<sp/>?<sp/>65535<sp/>:<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(newAvg);</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"></highlight></codeline>
<codeline lineno="1271" refid="classScheduler_1a6ee466fc5e47301d6101c246c691c131" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classScheduler_1a6ee466fc5e47301d6101c246c691c131" kindref="member">Scheduler::updateTimingVariables</ref>(<ref refid="classTask" kindref="compound">Task</ref><sp/>*task)</highlight></codeline>
<codeline lineno="1272"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classScheduler_1ac44741f6b01d7d8f914851b72f538617" kindref="member">lastExecutedTaskId</ref><sp/>=<sp/>task-&gt;<ref refid="classTask_1a548d620b8f5d7490b8cdc235dbfdf6eb" kindref="member">getId</ref>();</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classScheduler_1a4e2da8da4d0ca8ce7da09e92fcc04ffc" kindref="member">lastTaskEndTime</ref><sp/>=<sp/><ref refid="classScheduler_1ac66364f021223ea49e76680b6dbcb56a" kindref="member">systemTime</ref>;</highlight></codeline>
<codeline lineno="1275"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"></highlight></codeline>
<codeline lineno="1277" refid="classScheduler_1af423092ed6af17160b11a8fab79c2eab" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classScheduler_1af423092ed6af17160b11a8fab79c2eab" kindref="member">Scheduler::checkForTerminatedTask</ref>(<ref refid="classTask" kindref="compound">Task</ref><sp/>*task)</highlight></codeline>
<codeline lineno="1278"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(task-&gt;<ref refid="classTask_1acccd11864edfa1abbb15ff43008a17ec" kindref="member">getState</ref>()<sp/>==<sp/><ref refid="classTask_1afa88d99eb2a58c8f078a53f1195c53a8a7a6d8686d5e5ecffdf01fdd137d7713e" kindref="member">Task::TERMINATED</ref>)</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classScheduler_1a303a5bd8d44b55803e6da7b4108401c2" kindref="member">remove</ref>(task);</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1283"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"></highlight></codeline>
<codeline lineno="1285" refid="classScheduler_1a40371a166759f310c2223ef082526829" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classScheduler_1a40371a166759f310c2223ef082526829" kindref="member">Scheduler::logTaskDelay</ref>(<ref refid="classTask" kindref="compound">Task</ref><sp/>*task,<sp/>uint16_t<sp/>delayMs,<sp/>uint8_t<sp/>causingTaskId)</highlight></codeline>
<codeline lineno="1286"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Task<sp/>delay<sp/>logging<sp/>disabled<sp/>to<sp/>save<sp/>ROM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)task;</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)delayMs;</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)causingTaskId;</highlight></codeline>
<codeline lineno="1291"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"></highlight></codeline>
<codeline lineno="1293"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Task<sp/>iteration<sp/>template<sp/>methods</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1294"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func&gt;</highlight></codeline>
<codeline lineno="1295" refid="classScheduler_1a3c9f6290c6ae7231b96c9ba6da36382b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classScheduler_1a3c9f6290c6ae7231b96c9ba6da36382b" kindref="member">Scheduler::forEachTask</ref>(Func<sp/>func)</highlight></codeline>
<codeline lineno="1296"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structTaskNode" kindref="compound">TaskNode</ref><sp/>*current<sp/>=<sp/><ref refid="classScheduler_1a9eb682b2716a34e7c3eb742782aa42e2" kindref="member">taskHead</ref>;</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(current<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current-&gt;<ref refid="structTaskNode_1a04f109a440464fd95c18d0f3758ee0af" kindref="member">task</ref>)</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func(current-&gt;<ref refid="structTaskNode_1a04f109a440464fd95c18d0f3758ee0af" kindref="member">task</ref>);</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current<sp/>=<sp/>current-&gt;<ref refid="structTaskNode_1af6f74dbb5d2baa80d10dabc43b593ffd" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1306"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"></highlight></codeline>
<codeline lineno="1308"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func&gt;</highlight></codeline>
<codeline lineno="1309" refid="classScheduler_1ad2b77c7b7e929aad03ce0034f992d876" refkind="member"><highlight class="normal"><ref refid="classTask" kindref="compound">Task</ref><sp/>*<ref refid="classScheduler_1ad2b77c7b7e929aad03ce0034f992d876" kindref="member">Scheduler::findTask</ref>(Func<sp/>predicate)</highlight></codeline>
<codeline lineno="1310"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structTaskNode" kindref="compound">TaskNode</ref><sp/>*current<sp/>=<sp/><ref refid="classScheduler_1a9eb682b2716a34e7c3eb742782aa42e2" kindref="member">taskHead</ref>;</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(current<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current-&gt;<ref refid="structTaskNode_1a04f109a440464fd95c18d0f3758ee0af" kindref="member">task</ref><sp/>&amp;&amp;<sp/>predicate(current-&gt;<ref refid="structTaskNode_1a04f109a440464fd95c18d0f3758ee0af" kindref="member">task</ref>))</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>current-&gt;<ref refid="structTaskNode_1a04f109a440464fd95c18d0f3758ee0af" kindref="member">task</ref>;</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current<sp/>=<sp/>current-&gt;<ref refid="structTaskNode_1af6f74dbb5d2baa80d10dabc43b593ffd" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1321"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"></highlight></codeline>
<codeline lineno="1323"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Explicit<sp/>template<sp/>instantiations<sp/>for<sp/>common<sp/>use<sp/>cases</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1324"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Scheduler::forEachTask&lt;void(*)(Task<sp/>*)&gt;(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(*)(<ref refid="classTask" kindref="compound">Task</ref><sp/>*));</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/><ref refid="classTask" kindref="compound">Task</ref><sp/>*Scheduler::findTask&lt;bool(*)(Task<sp/>*)&gt;(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">(*)(<ref refid="classTask" kindref="compound">Task</ref><sp/>*));</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"></highlight></codeline>
<codeline lineno="1327"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Memory<sp/>management<sp/>helpers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1328" refid="classScheduler_1a38cf4a79d14bd68514a26946b19d3d53" refkind="member"><highlight class="normal"><ref refid="structTaskNode" kindref="compound">TaskNode</ref><sp/>*<ref refid="classScheduler_1a38cf4a79d14bd68514a26946b19d3d53" kindref="member">Scheduler::allocateTaskNode</ref>(<ref refid="classTask" kindref="compound">Task</ref><sp/>*task)</highlight></codeline>
<codeline lineno="1329"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classScheduler_1a6f21f46d36e9c56a43fadfa6cc32aad7" kindref="member">taskNodePoolInitialized</ref><sp/>&amp;&amp;<sp/>!<ref refid="classScheduler_1aaa8cc86207802e4a457202396b2f7441" kindref="member">initializeTaskNodePool</ref>())</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classScheduler_1ae4384c1ec8e5ef486776d6dc255a501a" kindref="member">freeTaskNodeHead</ref>)</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Try<sp/>to<sp/>expand<sp/>by<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structTaskNode" kindref="compound">TaskNode</ref><sp/>*node<sp/>=<sp/>(<ref refid="structTaskNode" kindref="compound">TaskNode</ref><sp/>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structTaskNode" kindref="compound">TaskNode</ref>));</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!node)</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;<ref refid="structTaskNode_1a04f109a440464fd95c18d0f3758ee0af" kindref="member">task</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;<ref refid="structTaskNode_1af6f74dbb5d2baa80d10dabc43b593ffd" kindref="member">next</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classScheduler_1ae4384c1ec8e5ef486776d6dc255a501a" kindref="member">freeTaskNodeHead</ref><sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classScheduler_1a72d0e1044f04173955e8783b8c1c9bb0" kindref="member">taskNodePoolCapacity</ref>++;</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structTaskNode" kindref="compound">TaskNode</ref><sp/>*node<sp/>=<sp/><ref refid="classScheduler_1ae4384c1ec8e5ef486776d6dc255a501a" kindref="member">freeTaskNodeHead</ref>;</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classScheduler_1ae4384c1ec8e5ef486776d6dc255a501a" kindref="member">freeTaskNodeHead</ref><sp/>=<sp/><ref refid="classScheduler_1ae4384c1ec8e5ef486776d6dc255a501a" kindref="member">freeTaskNodeHead</ref>-&gt;<ref refid="structTaskNode_1af6f74dbb5d2baa80d10dabc43b593ffd" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/>node-&gt;<ref refid="structTaskNode_1a04f109a440464fd95c18d0f3758ee0af" kindref="member">task</ref><sp/>=<sp/>task;</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/>node-&gt;<ref refid="structTaskNode_1af6f74dbb5d2baa80d10dabc43b593ffd" kindref="member">next</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node;</highlight></codeline>
<codeline lineno="1352"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"></highlight></codeline>
<codeline lineno="1354" refid="classScheduler_1a419ac926b5685ea804fe7eae086066e3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classScheduler_1a419ac926b5685ea804fe7eae086066e3" kindref="member">Scheduler::deallocateTaskNode</ref>(<ref refid="structTaskNode" kindref="compound">TaskNode</ref><sp/>*node)</highlight></codeline>
<codeline lineno="1355"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!node)</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/>node-&gt;<ref refid="structTaskNode_1a04f109a440464fd95c18d0f3758ee0af" kindref="member">task</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/>node-&gt;<ref refid="structTaskNode_1af6f74dbb5d2baa80d10dabc43b593ffd" kindref="member">next</ref><sp/>=<sp/><ref refid="classScheduler_1ae4384c1ec8e5ef486776d6dc255a501a" kindref="member">freeTaskNodeHead</ref>;</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classScheduler_1ae4384c1ec8e5ef486776d6dc255a501a" kindref="member">freeTaskNodeHead</ref><sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="1363"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"></highlight></codeline>
<codeline lineno="1365" refid="classScheduler_1a45b70d5aed26ed5bf7c4d99d9df12966" refkind="member"><highlight class="normal"><ref refid="structScheduler_1_1MsgNode" kindref="compound">Scheduler::MsgNode</ref><sp/>*<ref refid="classScheduler_1a45b70d5aed26ed5bf7c4d99d9df12966" kindref="member">Scheduler::allocateMsgNode</ref>()</highlight></codeline>
<codeline lineno="1366"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classScheduler_1a59fa5a068cd9a36672b39362982c2e97" kindref="member">freeHead</ref>)</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classScheduler_1ad767f69dc7aab8c8bd0f15720693d1c2" kindref="member">allocateMsgNodesChunk</ref>())</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"></highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structScheduler_1_1MsgNode" kindref="compound">MsgNode</ref><sp/>*node<sp/>=<sp/><ref refid="classScheduler_1a59fa5a068cd9a36672b39362982c2e97" kindref="member">freeHead</ref>;</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classScheduler_1a59fa5a068cd9a36672b39362982c2e97" kindref="member">freeHead</ref><sp/>=<sp/><ref refid="classScheduler_1a59fa5a068cd9a36672b39362982c2e97" kindref="member">freeHead</ref>-&gt;<ref refid="structScheduler_1_1MsgNode_1a91702c9faa02b67ac24d3924be9fdaee" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/>node-&gt;<ref refid="structScheduler_1_1MsgNode_1a91702c9faa02b67ac24d3924be9fdaee" kindref="member">next</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node;</highlight></codeline>
<codeline lineno="1379"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"></highlight></codeline>
<codeline lineno="1381" refid="classScheduler_1a4d40d84c82a4b3f5366d1a7fe5fd9307" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classScheduler_1a4d40d84c82a4b3f5366d1a7fe5fd9307" kindref="member">Scheduler::deallocateMsgNode</ref>(<ref refid="structScheduler_1_1MsgNode" kindref="compound">Scheduler::MsgNode</ref><sp/>*node)</highlight></codeline>
<codeline lineno="1382"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!node)</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"></highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Free<sp/>the<sp/>buffer<sp/>if<sp/>it<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node-&gt;<ref refid="structScheduler_1_1MsgNode_1ab2623f2b15be317f6b54848af08ce97c" kindref="member">payload</ref>.<ref refid="structScheduler_1_1QueuedMessage_1aa23777039e9446ad21fb93a6ec1e7e65" kindref="member">buffer</ref>)</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(node-&gt;<ref refid="structScheduler_1_1MsgNode_1ab2623f2b15be317f6b54848af08ce97c" kindref="member">payload</ref>.<ref refid="structScheduler_1_1QueuedMessage_1aa23777039e9446ad21fb93a6ec1e7e65" kindref="member">buffer</ref>);</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;<ref refid="structScheduler_1_1MsgNode_1ab2623f2b15be317f6b54848af08ce97c" kindref="member">payload</ref>.<ref refid="structScheduler_1_1QueuedMessage_1aa23777039e9446ad21fb93a6ec1e7e65" kindref="member">buffer</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;<ref refid="structScheduler_1_1MsgNode_1ab2623f2b15be317f6b54848af08ce97c" kindref="member">payload</ref>.<ref refid="structScheduler_1_1QueuedMessage_1a79ba2cf8a493da73c1b64f9aa2549938" kindref="member">capacity</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"></highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>message<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/>node-&gt;<ref refid="structScheduler_1_1MsgNode_1ab2623f2b15be317f6b54848af08ce97c" kindref="member">payload</ref>.<ref refid="structScheduler_1_1QueuedMessage_1ab2d20d6197328866badf5e94f048255c" kindref="member">targetTaskId</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/>node-&gt;<ref refid="structScheduler_1_1MsgNode_1ab2623f2b15be317f6b54848af08ce97c" kindref="member">payload</ref>.<ref refid="structScheduler_1_1QueuedMessage_1a4920af5804a48c59719261484553f169" kindref="member">msg</ref>.type<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/>node-&gt;<ref refid="structScheduler_1_1MsgNode_1ab2623f2b15be317f6b54848af08ce97c" kindref="member">payload</ref>.<ref refid="structScheduler_1_1QueuedMessage_1a4920af5804a48c59719261484553f169" kindref="member">msg</ref>.topic<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/>node-&gt;<ref refid="structScheduler_1_1MsgNode_1ab2623f2b15be317f6b54848af08ce97c" kindref="member">payload</ref>.<ref refid="structScheduler_1_1QueuedMessage_1a4920af5804a48c59719261484553f169" kindref="member">msg</ref>.arg<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/>node-&gt;<ref refid="structScheduler_1_1MsgNode_1ab2623f2b15be317f6b54848af08ce97c" kindref="member">payload</ref>.<ref refid="structScheduler_1_1QueuedMessage_1a4920af5804a48c59719261484553f169" kindref="member">msg</ref>.refCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"></highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>to<sp/>free<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/>node-&gt;<ref refid="structScheduler_1_1MsgNode_1a91702c9faa02b67ac24d3924be9fdaee" kindref="member">next</ref><sp/>=<sp/><ref refid="classScheduler_1a59fa5a068cd9a36672b39362982c2e97" kindref="member">freeHead</ref>;</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classScheduler_1a59fa5a068cd9a36672b39362982c2e97" kindref="member">freeHead</ref><sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="1406"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"></highlight></codeline>
<codeline lineno="1408"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Logging<sp/>system<sp/>helpers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1409" refid="classScheduler_1a1c6dd608a209d55e1925a4dbf5fb4344" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classScheduler_1a1c6dd608a209d55e1925a4dbf5fb4344" kindref="member">Scheduler::logSystemEvent</ref>(<ref refid="classScheduler_1ab2bd6aa333e3f108343fedb022eaca79" kindref="member">LogLevel</ref><sp/>level,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>__FlashStringHelper<sp/>*msg)</highlight></codeline>
<codeline lineno="1410"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classScheduler_1acaab28b4949d5a175212d134c04cf406" kindref="member">logMessage</ref>(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>level,<sp/>msg);</highlight></codeline>
<codeline lineno="1412"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"></highlight></codeline>
<codeline lineno="1414" refid="classScheduler_1a46f4a6ce080b281fd2941aa35450c3c0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classScheduler_1a46f4a6ce080b281fd2941aa35450c3c0" kindref="member">Scheduler::logTaskExecution</ref>(<ref refid="classTask" kindref="compound">Task</ref><sp/>*task,<sp/>uint32_t<sp/>execTime)</highlight></codeline>
<codeline lineno="1415"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Execution<sp/>time<sp/>logging<sp/>disabled<sp/>to<sp/>save<sp/>ROM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)task;</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)execTime;</highlight></codeline>
<codeline lineno="1419"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"></highlight></codeline>
<codeline lineno="1421"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>==================<sp/>Additional<sp/>Scheduler<sp/>Methods<sp/>==================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1422" refid="classScheduler_1acd30d51a85bda0b42d8ee5253a42e9f4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classScheduler_1acd30d51a85bda0b42d8ee5253a42e9f4" kindref="member">Scheduler::getResetInfo</ref>(<ref refid="structResetInfo" kindref="compound">ResetInfo</ref><sp/>&amp;info)</highlight></codeline>
<codeline lineno="1423"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Basic<sp/>reset<sp/>info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/>info.<ref refid="structResetInfo_1a4a91d356cc432144cd170d8e26e33a44" kindref="member">resetReason</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/>info.<ref refid="structResetInfo_1ae2c739e645762e75b0137ecf4edcaea8" kindref="member">resetTime</ref><sp/>=<sp/><ref refid="classScheduler_1ac66364f021223ea49e76680b6dbcb56a" kindref="member">systemTime</ref>;</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/>info.<ref refid="structResetInfo_1a99e40fbce39ff24b43a4fc1c2d44a81c" kindref="member">watchdogTimeout</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/>info.<ref refid="structResetInfo_1a8969cb34a6ef24088d2e647a121cd878" kindref="member">lastTaskId</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"></highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>reset<sp/>cause<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/>info.<ref refid="structResetInfo_1ad979eaae9cfc3f1cf959811b090194b5" kindref="member">optibootResetFlags</ref><sp/>=<sp/><ref refid="classScheduler_1a06438be1e9b5f2e9441b9c8c7c0d696e" kindref="member">getResetCauseFlags</ref>();</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/>info.<ref refid="structResetInfo_1a05874fdc762c1aa26bd60d8d16e2cc7b" kindref="member">optibootResetCause</ref><sp/>=<sp/><ref refid="classScheduler_1a3d51992ab99d1b8e7055ac1b5b6445ea" kindref="member">getResetCause</ref>();</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"></highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1435"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"></highlight></codeline>
<codeline lineno="1437" refid="classScheduler_1a3d51992ab99d1b8e7055ac1b5b6445ea" refkind="member"><highlight class="normal"><ref refid="group__fsmos_1gaf0e4bd86b7877a41cdb3452dec42904d" kindref="member">ResetCause</ref><sp/><ref refid="classScheduler_1a3d51992ab99d1b8e7055ac1b5b6445ea" kindref="member">Scheduler::getResetCause</ref>()</highlight></codeline>
<codeline lineno="1438"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>flags<sp/>=<sp/><ref refid="classScheduler_1a06438be1e9b5f2e9441b9c8c7c0d696e" kindref="member">getResetCauseFlags</ref>();</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"></highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flags<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__fsmos_1ggaf0e4bd86b7877a41cdb3452dec42904da8bf9995e300055d0078c4a09dfe0c883" kindref="member">RESET_UNKNOWN</ref>;</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"></highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>multiple<sp/>causes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flags<sp/>&amp;<sp/><ref refid="FsmOS_8h_1a0fe30f99377de57d909e461a560dee78" kindref="member">RESET_CAUSE_POWER_ON</ref>)</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count++;</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flags<sp/>&amp;<sp/><ref refid="group__fsmos_1gad69a300f3356c3ac65410bbafd9a0dfb" kindref="member">RESET_CAUSE_EXTERNAL</ref>)</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count++;</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flags<sp/>&amp;<sp/><ref refid="FsmOS_8h_1a1725fe610295be64608f3418032d83cf" kindref="member">RESET_CAUSE_BROWN_OUT</ref>)</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count++;</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flags<sp/>&amp;<sp/><ref refid="FsmOS_8h_1a8ddfa282a94d5f071d6b99b875d220b7" kindref="member">RESET_CAUSE_WATCHDOG</ref>)</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count++;</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__fsmos_1ggaf0e4bd86b7877a41cdb3452dec42904dac94fa96c03ded460233a532ab79a089b" kindref="member">RESET_MULTIPLE</ref>;</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"></highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Single<sp/>cause</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flags<sp/>&amp;<sp/><ref refid="FsmOS_8h_1a0fe30f99377de57d909e461a560dee78" kindref="member">RESET_CAUSE_POWER_ON</ref>)</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__fsmos_1ggaf0e4bd86b7877a41cdb3452dec42904da37c7f4bc95e2b9679583655a8090880e" kindref="member">RESET_POWER_ON</ref>;</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flags<sp/>&amp;<sp/><ref refid="group__fsmos_1gad69a300f3356c3ac65410bbafd9a0dfb" kindref="member">RESET_CAUSE_EXTERNAL</ref>)</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__fsmos_1ggaf0e4bd86b7877a41cdb3452dec42904da187c6b01e1cfc544ee25193f43790323" kindref="member">RESET_EXTERNAL</ref>;</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flags<sp/>&amp;<sp/><ref refid="FsmOS_8h_1a1725fe610295be64608f3418032d83cf" kindref="member">RESET_CAUSE_BROWN_OUT</ref>)</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__fsmos_1ggaf0e4bd86b7877a41cdb3452dec42904da3ab8379425c9a63d5a64c2687968d3a1" kindref="member">RESET_BROWN_OUT</ref>;</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flags<sp/>&amp;<sp/><ref refid="FsmOS_8h_1a8ddfa282a94d5f071d6b99b875d220b7" kindref="member">RESET_CAUSE_WATCHDOG</ref>)</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__fsmos_1ggaf0e4bd86b7877a41cdb3452dec42904da9777f5f16727a14c3ccd7601fb09da6d" kindref="member">RESET_WATCHDOG</ref>;</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"></highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__fsmos_1ggaf0e4bd86b7877a41cdb3452dec42904da8bf9995e300055d0078c4a09dfe0c883" kindref="member">RESET_UNKNOWN</ref>;</highlight></codeline>
<codeline lineno="1489"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"></highlight></codeline>
<codeline lineno="1491" refid="classScheduler_1a06438be1e9b5f2e9441b9c8c7c0d696e" refkind="member"><highlight class="normal">uint8_t<sp/><ref refid="classScheduler_1a06438be1e9b5f2e9441b9c8c7c0d696e" kindref="member">Scheduler::getResetCauseFlags</ref>()</highlight></codeline>
<codeline lineno="1492"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__AVR__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GPIOR0;</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>Not<sp/>available<sp/>on<sp/>non-AVR<sp/>platforms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1497"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1498"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"></highlight></codeline>
<codeline lineno="1500" refid="classScheduler_1a1ad7c1772cfa11033b280e9b5de86d35" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classScheduler_1a1ad7c1772cfa11033b280e9b5de86d35" kindref="member">Scheduler::wasResetCause</ref>(<ref refid="group__fsmos_1gaf0e4bd86b7877a41cdb3452dec42904d" kindref="member">ResetCause</ref><sp/>cause)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classScheduler_1a3d51992ab99d1b8e7055ac1b5b6445ea" kindref="member">getResetCause</ref>()<sp/>==<sp/>cause;<sp/>}</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"></highlight></codeline>
<codeline lineno="1502" refid="classScheduler_1a4a491d929e3bee5c1bb5db4ad9a13dc3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classScheduler_1a4a491d929e3bee5c1bb5db4ad9a13dc3" kindref="member">Scheduler::getTaskStats</ref>(uint8_t<sp/>task_id,<sp/><ref refid="structTaskStats" kindref="compound">TaskStats</ref><sp/>&amp;stats)</highlight></codeline>
<codeline lineno="1503"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classTask" kindref="compound">Task</ref><sp/>*task<sp/>=<sp/><ref refid="classScheduler_1aabf3840938cc797555cdee88f5d19dd2" kindref="member">getTask</ref>(task_id);</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!task)</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"></highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/>stats.<ref refid="structTaskStats_1a1fc9ad09023166819ea34a6c9e00a956" kindref="member">taskId</ref><sp/>=<sp/>task-&gt;<ref refid="classTask_1a548d620b8f5d7490b8cdc235dbfdf6eb" kindref="member">getId</ref>();</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/>stats.<ref refid="structTaskStats_1acee85734ca75baa7fe01cad1c24fc34b" kindref="member">name</ref><sp/>=<sp/>task-&gt;<ref refid="classTask_1aae9b70f6c6542469cd8c3c122536964c" kindref="member">getName</ref>();</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/>stats.<ref refid="structTaskStats_1ad14bdd478708018fae0f1bbceb19d2d0" kindref="member">state</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(task-&gt;<ref refid="classTask_1acccd11864edfa1abbb15ff43008a17ec" kindref="member">getState</ref>());</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/>stats.<ref refid="structTaskStats_1a28271d6c20d6bfccfea9f21fcdb7dd63" kindref="member">periodMs</ref><sp/>=<sp/>task-&gt;<ref refid="classTask_1aa096c58dddc4fb8f7f8d5f40e1815d2d" kindref="member">getPeriod</ref>();</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/>stats.<ref refid="structTaskStats_1a434524846cef9e3a82b15d7f7b5d439d" kindref="member">priority</ref><sp/>=<sp/>task-&gt;<ref refid="classTask_1aef8cf69a9b677977003d8b72d66d36d8" kindref="member">getPriority</ref>();</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/>stats.<ref refid="structTaskStats_1afb9812d3db56b4a74e3534a0b1046b8c" kindref="member">runCount</ref><sp/>=<sp/>task-&gt;<ref refid="classTask_1a48485325ce407372474c73982690a0cc" kindref="member">runCount</ref>;</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/>stats.<ref refid="structTaskStats_1a922dffb9309c234de882457919f7cb66" kindref="member">maxExecTimeUs</ref><sp/>=<sp/>task-&gt;<ref refid="classTask_1ad464cac8faf232328c59600a70bfa11c" kindref="member">maxExecTimeUs</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>16-bit<sp/>max<sp/>execution<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/>stats.<ref refid="structTaskStats_1a68e1e0b13b6fc7e48ac77f22bc338492" kindref="member">totalExecTimeUs</ref><sp/>=<sp/>task-&gt;<ref refid="classTask_1a48485325ce407372474c73982690a0cc" kindref="member">runCount</ref><sp/>*<sp/>task-&gt;<ref refid="classTask_1a54935dc05e1ff8ba284d18b84a057ac6" kindref="member">avgExecTimeUs</ref>;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>total<sp/>from<sp/>avg<sp/>*<sp/>count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/>stats.<ref refid="structTaskStats_1ab319b8455c244af5111b6c2e395ffad9" kindref="member">stackUsage</ref><sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Still<sp/>placeholder<sp/>-<sp/>requires<sp/>stack<sp/>monitoring</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/>stats.<ref refid="structTaskStats_1abbf27ee4cb7f8272b150152df12c3da0" kindref="member">delayCount</ref><sp/>=<sp/>task-&gt;<ref refid="classTask_1aaf791abc71bca2ca62d29d2e155dc82c" kindref="member">delayCount</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Task<sp/>delay<sp/>count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/>stats.<ref refid="structTaskStats_1ac2ef063a104bca4c81457a8db057a51a" kindref="member">maxDelayMs</ref><sp/>=<sp/>task-&gt;<ref refid="classTask_1a82389ea58680f2ce8a0ffada921c3b6c" kindref="member">maxDelayMs</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Maximum<sp/>delay<sp/>experienced</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1522"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"></highlight></codeline>
<codeline lineno="1524" refid="classScheduler_1a7c61b8b908a19416283e66c0fb076a40" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classScheduler_1a7c61b8b908a19416283e66c0fb076a40" kindref="member">Scheduler::getSystemMemoryInfo</ref>(<ref refid="structSystemMemoryInfo" kindref="compound">SystemMemoryInfo</ref><sp/>&amp;info)</highlight></codeline>
<codeline lineno="1525"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/>info.<ref refid="structSystemMemoryInfo_1a3fead35bc0c51a87ca8cb5630eea2fe6" kindref="member">freeRam</ref><sp/>=<sp/><ref refid="classScheduler_1a56c3c1a776927eeb7917e7b636a2e3ab" kindref="member">getFreeMemory</ref>();</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/>info.<ref refid="structSystemMemoryInfo_1a74fd6f112cb2a361579343bc609ba3bd" kindref="member">totalRam</ref><sp/>=<sp/>2048;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVR<sp/>typical</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Heap<sp/>size<sp/>(bytes)<sp/>from<sp/>end<sp/>of<sp/>.bss<sp/>to<sp/>current<sp/>break<sp/>value<sp/>(if<sp/>any)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1529"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__AVR__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>__bss_end;</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*__brkval;</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(__brkval)</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info.<ref refid="structSystemMemoryInfo_1ab46e008190c5d4dc58a098653fc96e21" kindref="member">heapSize</ref><sp/>=<sp/>(uint16_t)((uint16_t)__brkval<sp/>-<sp/>(uint16_t)&amp;__bss_end);</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info.<ref refid="structSystemMemoryInfo_1ab46e008190c5d4dc58a098653fc96e21" kindref="member">heapSize</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/>info.<ref refid="structSystemMemoryInfo_1ab46e008190c5d4dc58a098653fc96e21" kindref="member">heapSize</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/>info.<ref refid="structSystemMemoryInfo_1aafc733c82678f25b4579ac80ff3f3416" kindref="member">largestBlock</ref><sp/>=<sp/>0;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Not<sp/>tracked</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/>info.<ref refid="structSystemMemoryInfo_1aa49fcb6068c10bdab13a7cfa97241c27" kindref="member">heapFragments</ref><sp/>=<sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>Not<sp/>tracked</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1545"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__AVR__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Approximate<sp/>stack<sp/>usage<sp/>based<sp/>on<sp/>canary<sp/>region</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>__bss_end;</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*__brkval;</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>lower<sp/>=<sp/>(uint16_t)(__brkval<sp/>?<sp/>__brkval<sp/>:<sp/>&amp;__bss_end);</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>upper<sp/>=<sp/>(uint16_t)RAMEND;</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>approxUsed<sp/>=<sp/>measure_stack_used();</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/>*g_canary_start;<sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/>*g_canary_end;</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>windowSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_canary_start<sp/>&amp;&amp;<sp/>g_canary_end<sp/>&amp;&amp;<sp/>g_canary_end<sp/>&gt;=<sp/>g_canary_start)</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>windowSize<sp/>=<sp/>(uint16_t)(g_canary_end<sp/>-<sp/>g_canary_start<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>windowSize<sp/>=<sp/>(upper<sp/>&gt;=<sp/>lower)<sp/>?<sp/>(upper<sp/>-<sp/>lower<sp/>+<sp/>1)<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/>info.<ref refid="structSystemMemoryInfo_1a12ed83e6ef3ab65b2e708eb7634ae3d9" kindref="member">stackSize</ref><sp/>=<sp/>windowSize;</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/>info.<ref refid="structSystemMemoryInfo_1a23c2b52b7aa05bdd6c8316280fafb35e" kindref="member">stackUsed</ref><sp/>=<sp/>(approxUsed<sp/>&gt;<sp/>windowSize)<sp/>?<sp/>windowSize<sp/>:<sp/>approxUsed;</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/>info.<ref refid="structSystemMemoryInfo_1aa09da446795f6a14640ac228f8775332" kindref="member">stackFree</ref><sp/>=<sp/>(info.<ref refid="structSystemMemoryInfo_1a23c2b52b7aa05bdd6c8316280fafb35e" kindref="member">stackUsed</ref><sp/>&gt;=<sp/>info.<ref refid="structSystemMemoryInfo_1a12ed83e6ef3ab65b2e708eb7634ae3d9" kindref="member">stackSize</ref>)<sp/>?<sp/>0<sp/>:<sp/>(info.<ref refid="structSystemMemoryInfo_1a12ed83e6ef3ab65b2e708eb7634ae3d9" kindref="member">stackSize</ref><sp/>-<sp/>info.<ref refid="structSystemMemoryInfo_1a23c2b52b7aa05bdd6c8316280fafb35e" kindref="member">stackUsed</ref>);</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/>info.<ref refid="structSystemMemoryInfo_1a12ed83e6ef3ab65b2e708eb7634ae3d9" kindref="member">stackSize</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/>info.<ref refid="structSystemMemoryInfo_1a23c2b52b7aa05bdd6c8316280fafb35e" kindref="member">stackUsed</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/>info.<ref refid="structSystemMemoryInfo_1aa09da446795f6a14640ac228f8775332" kindref="member">stackFree</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/>info.<ref refid="structSystemMemoryInfo_1ab4646e94bacfe136033551f29c88127f" kindref="member">totalTasks</ref><sp/>=<sp/><ref refid="classScheduler_1a3e1f741da7d85ea80bb2f226d6457ab6" kindref="member">taskCount</ref>;</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sum<sp/>estimated<sp/>task<sp/>memory<sp/>(struct<sp/>size<sp/>+<sp/>subscription<sp/>bitfield)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>taskMem<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structTaskNode" kindref="compound">TaskNode</ref><sp/>*tn<sp/>=<sp/><ref refid="classScheduler_1a9eb682b2716a34e7c3eb742782aa42e2" kindref="member">taskHead</ref>;</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(tn)</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tn-&gt;<ref refid="structTaskNode_1a04f109a440464fd95c18d0f3758ee0af" kindref="member">task</ref>)</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>taskMem<sp/>+=<sp/>tn-&gt;<ref refid="structTaskNode_1a04f109a440464fd95c18d0f3758ee0af" kindref="member">task</ref>-&gt;<ref refid="classTask_1aea07a4be09d08cb8b1afa1914ddc988c" kindref="member">getTaskStructSize</ref>();</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>taskMem<sp/>+=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(tn-&gt;<ref refid="structTaskNode_1a04f109a440464fd95c18d0f3758ee0af" kindref="member">task</ref>-&gt;<ref refid="classTask_1acae0e3e69ae99fa0f3ca9298e74c7236" kindref="member">subscribedTopics</ref>);</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tn<sp/>=<sp/>tn-&gt;<ref refid="structTaskNode_1af6f74dbb5d2baa80d10dabc43b593ffd" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/>info.<ref refid="structSystemMemoryInfo_1ad53218d4a3a0bd2bf27ee57618c502f9" kindref="member">taskMemory</ref><sp/>=<sp/>taskMem;</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/>info.<ref refid="structSystemMemoryInfo_1af922c19a62e2db75d2d35abc96282760" kindref="member">activeMessages</ref><sp/>=<sp/><ref refid="classScheduler_1a13367b7d53dc7bf804d9158e57bff5f7" kindref="member">msgCount</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>Provide<sp/>actual<sp/>active<sp/>message<sp/>count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Approximate<sp/>message<sp/>memory:<sp/>nodes<sp/>+<sp/>buffers<sp/>across<sp/>queue<sp/>and<sp/>free<sp/>lists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>msgMem<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structScheduler_1_1MsgNode" kindref="compound">MsgNode</ref><sp/>*mn<sp/>=<sp/><ref refid="classScheduler_1afc800a55be0f3da82ef2e79dad96496d" kindref="member">msgHead</ref>;</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(mn)</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msgMem<sp/>+=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structScheduler_1_1MsgNode" kindref="compound">MsgNode</ref>);</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msgMem<sp/>+=<sp/>mn-&gt;<ref refid="structScheduler_1_1MsgNode_1ab2623f2b15be317f6b54848af08ce97c" kindref="member">payload</ref>.<ref refid="structScheduler_1_1QueuedMessage_1a79ba2cf8a493da73c1b64f9aa2549938" kindref="member">capacity</ref>;</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mn<sp/>=<sp/>mn-&gt;<ref refid="structScheduler_1_1MsgNode_1a91702c9faa02b67ac24d3924be9fdaee" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/>mn<sp/>=<sp/><ref refid="classScheduler_1a59fa5a068cd9a36672b39362982c2e97" kindref="member">freeHead</ref>;</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(mn)</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msgMem<sp/>+=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structScheduler_1_1MsgNode" kindref="compound">MsgNode</ref>);</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msgMem<sp/>+=<sp/>mn-&gt;<ref refid="structScheduler_1_1MsgNode_1ab2623f2b15be317f6b54848af08ce97c" kindref="member">payload</ref>.<ref refid="structScheduler_1_1QueuedMessage_1a79ba2cf8a493da73c1b64f9aa2549938" kindref="member">capacity</ref>;</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mn<sp/>=<sp/>mn-&gt;<ref refid="structScheduler_1_1MsgNode_1a91702c9faa02b67ac24d3924be9fdaee" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/>info.<ref refid="structSystemMemoryInfo_1a76bfcb475e0cfe6757e0fbbc04ad371e" kindref="member">messageMemory</ref><sp/>=<sp/>msgMem;</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"></highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Flash<sp/>usage<sp/>from<sp/>build-time<sp/>constants</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1604"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BUILD_FLASH_USED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>real<sp/>build-time<sp/>values<sp/>injected<sp/>by<sp/>build<sp/>script</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/>info.<ref refid="structSystemMemoryInfo_1ae527fbdfcb22a4136b2f6f24d60c895a" kindref="member">flashUsed</ref><sp/>=<sp/>BUILD_FLASH_USED;</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/>info.<ref refid="structSystemMemoryInfo_1abdbd97bb0a5a2fece0b70320ccedffc4" kindref="member">flashFree</ref><sp/>=<sp/>BUILD_FLASH_FREE;</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/>info.<ref refid="structSystemMemoryInfo_1ae527fbdfcb22a4136b2f6f24d60c895a" kindref="member">flashUsed</ref><sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Not<sp/>available<sp/>at<sp/>runtime</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/>info.<ref refid="structSystemMemoryInfo_1abdbd97bb0a5a2fece0b70320ccedffc4" kindref="member">flashFree</ref><sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Not<sp/>available<sp/>at<sp/>runtime</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1611"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1612"><highlight class="normal"></highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>EEPROM<sp/>usage<sp/>(approximate<sp/>based<sp/>on<sp/>known<sp/>usage)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1614"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FSMOS_EEPROM_SIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Estimate<sp/>EEPROM<sp/>usage<sp/>based<sp/>on<sp/>known<sp/>variables<sp/>stored</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>LightTask<sp/>saves<sp/>dim<sp/>level<sp/>(1<sp/>byte),<sp/>other<sp/>tasks<sp/>may<sp/>use<sp/>EEPROM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>eepromUsed<sp/>=<sp/>1;<sp/><sp/></highlight><highlight class="comment">//<sp/>Conservative<sp/>estimate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/>info.<ref refid="structSystemMemoryInfo_1a863feffbb30f9ba2b8bf031421830f31" kindref="member">eepromUsed</ref><sp/>=<sp/>eepromUsed;</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/>info.<ref refid="structSystemMemoryInfo_1afbf8d2df35ecd00576f480561255f04d" kindref="member">eepromFree</ref><sp/>=<sp/>FSMOS_EEPROM_SIZE<sp/>-<sp/>eepromUsed;</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/>info.<ref refid="structSystemMemoryInfo_1a863feffbb30f9ba2b8bf031421830f31" kindref="member">eepromUsed</ref><sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Not<sp/>available<sp/>at<sp/>runtime</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/>info.<ref refid="structSystemMemoryInfo_1afbf8d2df35ecd00576f480561255f04d" kindref="member">eepromFree</ref><sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Not<sp/>available<sp/>at<sp/>runtime</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1623"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1625"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"></highlight></codeline>
<codeline lineno="1627" refid="classScheduler_1a7170da5c7dfd33bd0a5bd6509538d84f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classScheduler_1a7170da5c7dfd33bd0a5bd6509538d84f" kindref="member">Scheduler::getTaskMemoryInfo</ref>(uint8_t<sp/>task_id,<sp/><ref refid="structTaskMemoryInfo" kindref="compound">TaskMemoryInfo</ref><sp/>&amp;info)</highlight></codeline>
<codeline lineno="1628"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classTask" kindref="compound">Task</ref><sp/>*task<sp/>=<sp/><ref refid="classScheduler_1aabf3840938cc797555cdee88f5d19dd2" kindref="member">getTask</ref>(task_id);</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!task)</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"></highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/>info.<ref refid="structTaskMemoryInfo_1a6ccb06721fe721014762215555523d65" kindref="member">task_id</ref><sp/>=<sp/>task-&gt;<ref refid="classTask_1a548d620b8f5d7490b8cdc235dbfdf6eb" kindref="member">getId</ref>();</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Derive<sp/>struct<sp/>size<sp/>via<sp/>virtual<sp/>API;<sp/>if<sp/>not<sp/>implemented<sp/>by<sp/>a<sp/>task,<sp/>it<sp/>won&apos;t<sp/>link.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/>info.<ref refid="structTaskMemoryInfo_1a455ea7f69c1a9c3b898d5c8d40e0fac7" kindref="member">task_struct_size</ref><sp/>=<sp/>task-&gt;<ref refid="classTask_1aea07a4be09d08cb8b1afa1914ddc988c" kindref="member">getTaskStructSize</ref>();</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/>info.<ref refid="structTaskMemoryInfo_1a33936208344182c0cb2040787efaf117" kindref="member">subscription_size</ref><sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(task-&gt;<ref refid="classTask_1acae0e3e69ae99fa0f3ca9298e74c7236" kindref="member">subscribedTopics</ref>);</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/>info.<ref refid="structTaskMemoryInfo_1afc06164ff4977316ba80890f78771b91" kindref="member">queue_size</ref><sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>per-task<sp/>queue<sp/>in<sp/>current<sp/>design</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/>info.<ref refid="structTaskMemoryInfo_1ae365acfa19af10f054aee062cfe3b824" kindref="member">total_allocated</ref><sp/>=<sp/>info.<ref refid="structTaskMemoryInfo_1a455ea7f69c1a9c3b898d5c8d40e0fac7" kindref="member">task_struct_size</ref><sp/>+<sp/>info.<ref refid="structTaskMemoryInfo_1a33936208344182c0cb2040787efaf117" kindref="member">subscription_size</ref>;</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1642"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"></highlight></codeline>
<codeline lineno="1644" refid="classScheduler_1a69444823d403c8c84670eda2c0d594a4" refkind="member"><highlight class="normal">uint8_t<sp/><ref refid="classScheduler_1a69444823d403c8c84670eda2c0d594a4" kindref="member">Scheduler::getHeapFragmentation</ref>()</highlight></codeline>
<codeline lineno="1645"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>Placeholder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1647"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"></highlight></codeline>
<codeline lineno="1649" refid="classScheduler_1a26f332614d3126f5efdc42092138b0e6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classScheduler_1a26f332614d3126f5efdc42092138b0e6" kindref="member">Scheduler::getMemoryLeakStats</ref>(<ref refid="structMemoryStats" kindref="compound">MemoryStats</ref><sp/>&amp;stats)</highlight></codeline>
<codeline lineno="1650"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/>stats<sp/>=<sp/><ref refid="FsmOS_8cpp_1a4b161d5fdd35540a17153452e7c6af01" kindref="member">fsmos_memory_stats</ref>;</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1653"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"></highlight></codeline>
<codeline lineno="1655"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>==================<sp/>Additional<sp/>Logging<sp/>Functions<sp/>==================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1656"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Internal<sp/>helpers<sp/>to<sp/>reuse<sp/>formatted<sp/>logging<sp/>logic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1657" refid="FsmOS_8cpp_1ade20b4a6bf510c7319a727cdf86ebe37" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="FsmOS_8cpp_1ade20b4a6bf510c7319a727cdf86ebe37" kindref="member">printLogHeader</ref>(<ref refid="classScheduler_1ab2bd6aa333e3f108343fedb022eaca79" kindref="member">Scheduler::LogLevel</ref><sp/>level)</highlight></codeline>
<codeline lineno="1658"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__AVR__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*level_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;DEBUG&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(level)</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="classScheduler_1ab2bd6aa333e3f108343fedb022eaca79ac50a6d9344241d486cea80292b5ba327" kindref="member">Scheduler::LOG_INFO</ref>:</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>level_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;INFO&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="classScheduler_1ab2bd6aa333e3f108343fedb022eaca79a43ae65cd6d87b4c15b8ddb2e1a110286" kindref="member">Scheduler::LOG_WARN</ref>:</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>level_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;WARN&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="classScheduler_1ab2bd6aa333e3f108343fedb022eaca79aa56e45ee8b2ce204989dcede4bfa7805" kindref="member">Scheduler::LOG_ERROR</ref>:</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>level_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ERROR&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(level_str);</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(F(</highlight><highlight class="stringliteral">&quot;]<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)level;</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1681"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"></highlight></codeline>
<codeline lineno="1683" refid="FsmOS_8cpp_1a239a4328ae320786411ee555c3a20250" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="FsmOS_8cpp_1a239a4328ae320786411ee555c3a20250" kindref="member">logFormattedV</ref>(<ref refid="classScheduler_1ab2bd6aa333e3f108343fedb022eaca79" kindref="member">Scheduler::LogLevel</ref><sp/>level,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>__FlashStringHelper<sp/>*format,<sp/>va_list<sp/>args)</highlight></codeline>
<codeline lineno="1684"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__AVR__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="FsmOS_8cpp_1ade20b4a6bf510c7319a727cdf86ebe37" kindref="member">printLogHeader</ref>(level);</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/>vfprintf_P(stdout,<sp/>(PGM_P)format,<sp/>args);</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.println();</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>formatted[128];</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/>vsnprintf(formatted,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(formatted),<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)format,<sp/>args);</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__fsmos_1ga990d37c1e9d0a35fead6ab92e0da955e" kindref="member">OS</ref>.<ref refid="classScheduler_1acaab28b4949d5a175212d134c04cf406" kindref="member">logMessage</ref>(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>level,<sp/>formatted);</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1694"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1695" refid="group__fsmos_1gac6c8dbf1f133ab906d0f3490e0de5d74" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__fsmos_1gac6c8dbf1f133ab906d0f3490e0de5d74" kindref="member">logDebugf</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>__FlashStringHelper<sp/>*format,<sp/>...)</highlight></codeline>
<codeline lineno="1696"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/>args;</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(args,<sp/>format);</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="FsmOS_8cpp_1a239a4328ae320786411ee555c3a20250" kindref="member">logFormattedV</ref>(<ref refid="classScheduler_1ab2bd6aa333e3f108343fedb022eaca79ae533a07bf1ba23e55ae9769602ac74a7" kindref="member">Scheduler::LOG_DEBUG</ref>,<sp/>format,<sp/>args);</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(args);</highlight></codeline>
<codeline lineno="1701"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"></highlight></codeline>
<codeline lineno="1703" refid="group__fsmos_1ga0fd80592a7d1d2fd9b1b52081a8d69cb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__fsmos_1ga0fd80592a7d1d2fd9b1b52081a8d69cb" kindref="member">logInfof</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>__FlashStringHelper<sp/>*format,<sp/>...)</highlight></codeline>
<codeline lineno="1704"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/>args;</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(args,<sp/>format);</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="FsmOS_8cpp_1a239a4328ae320786411ee555c3a20250" kindref="member">logFormattedV</ref>(<ref refid="classScheduler_1ab2bd6aa333e3f108343fedb022eaca79ac50a6d9344241d486cea80292b5ba327" kindref="member">Scheduler::LOG_INFO</ref>,<sp/>format,<sp/>args);</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(args);</highlight></codeline>
<codeline lineno="1709"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"></highlight></codeline>
<codeline lineno="1711" refid="group__fsmos_1ga58264bc1f779d2cd6cb6a8c733a17a21" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__fsmos_1ga58264bc1f779d2cd6cb6a8c733a17a21" kindref="member">logWarnf</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>__FlashStringHelper<sp/>*format,<sp/>...)</highlight></codeline>
<codeline lineno="1712"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/>args;</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(args,<sp/>format);</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="FsmOS_8cpp_1a239a4328ae320786411ee555c3a20250" kindref="member">logFormattedV</ref>(<ref refid="classScheduler_1ab2bd6aa333e3f108343fedb022eaca79a43ae65cd6d87b4c15b8ddb2e1a110286" kindref="member">Scheduler::LOG_WARN</ref>,<sp/>format,<sp/>args);</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(args);</highlight></codeline>
<codeline lineno="1717"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"></highlight></codeline>
<codeline lineno="1719" refid="group__fsmos_1gade3c130d653bf887af5b2f6120f388ad" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__fsmos_1gade3c130d653bf887af5b2f6120f388ad" kindref="member">logErrorf</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>__FlashStringHelper<sp/>*format,<sp/>...)</highlight></codeline>
<codeline lineno="1720"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/>args;</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(args,<sp/>format);</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="FsmOS_8cpp_1a239a4328ae320786411ee555c3a20250" kindref="member">logFormattedV</ref>(<ref refid="classScheduler_1ab2bd6aa333e3f108343fedb022eaca79aa56e45ee8b2ce204989dcede4bfa7805" kindref="member">Scheduler::LOG_ERROR</ref>,<sp/>format,<sp/>args);</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(args);</highlight></codeline>
<codeline lineno="1725"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"></highlight></codeline>
<codeline lineno="1727"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>==================<sp/>Additional<sp/>Scheduler<sp/>System<sp/>Methods<sp/>==================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1728"><highlight class="normal"></highlight></codeline>
<codeline lineno="1729" refid="classScheduler_1aaba5575657eb6345d1da5442be50f29c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classScheduler_1aaba5575657eb6345d1da5442be50f29c" kindref="member">Scheduler::enableWatchdog</ref>(uint8_t<sp/>timeout)</highlight></codeline>
<codeline lineno="1730"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__AVR__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/>wdt_enable(timeout);</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1734"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"></highlight></codeline>
<codeline lineno="1736" refid="classScheduler_1aa541036ba6db4765a2270d39f74c8758" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classScheduler_1aa541036ba6db4765a2270d39f74c8758" kindref="member">Scheduler::feedWatchdog</ref>()</highlight></codeline>
<codeline lineno="1737"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__AVR__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/>wdt_reset();</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1741"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"></highlight></codeline>
<codeline lineno="1743" refid="classScheduler_1a1ded1b3c0e167dde6574bc8b4a0aca63" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classScheduler_1a1ded1b3c0e167dde6574bc8b4a0aca63" kindref="member">Scheduler::logFormatted</ref>(<ref refid="classTask" kindref="compound">Task</ref><sp/>*task,<sp/><ref refid="classScheduler_1ab2bd6aa333e3f108343fedb022eaca79" kindref="member">LogLevel</ref><sp/>level,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>__FlashStringHelper<sp/>*format,<sp/>...)</highlight></codeline>
<codeline lineno="1744"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Simplified<sp/>implementation<sp/>-<sp/>just<sp/>log<sp/>the<sp/>format<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classScheduler_1acaab28b4949d5a175212d134c04cf406" kindref="member">logMessage</ref>(task,<sp/>level,<sp/>format);</highlight></codeline>
<codeline lineno="1747"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"></highlight></codeline>
<codeline lineno="1749" refid="classScheduler_1a86ddccd30b5b2af61d3cb76d53ca1b4b" refkind="member"><highlight class="normal">uint8_t<sp/><ref refid="classScheduler_1a86ddccd30b5b2af61d3cb76d53ca1b4b" kindref="member">Scheduler::getFreeQueueSlots</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1750"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="FsmOS_8h_1addd900ed12192f9ff21848d61476d5f2" kindref="member">MAX_MESSAGE_POOL_SIZE</ref><sp/>-<sp/><ref refid="classScheduler_1a13367b7d53dc7bf804d9158e57bff5f7" kindref="member">msgCount</ref>);</highlight></codeline>
<codeline lineno="1752"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"></highlight></codeline>
<codeline lineno="1754" refid="classScheduler_1a2ccde4ea0d8e9a6996c4a897aee709e9" refkind="member"><highlight class="normal">uint8_t<sp/><ref refid="classScheduler_1a2ccde4ea0d8e9a6996c4a897aee709e9" kindref="member">Scheduler::getMostDelayingTask</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1755"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>mostDelayingTaskId<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>maxDelayCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"></highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structTaskNode" kindref="compound">TaskNode</ref><sp/>*current<sp/>=<sp/><ref refid="classScheduler_1a9eb682b2716a34e7c3eb742782aa42e2" kindref="member">taskHead</ref>;</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(current<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current-&gt;<ref refid="structTaskNode_1a04f109a440464fd95c18d0f3758ee0af" kindref="member">task</ref><sp/>&amp;&amp;<sp/>current-&gt;<ref refid="structTaskNode_1a04f109a440464fd95c18d0f3758ee0af" kindref="member">task</ref>-&gt;<ref refid="classTask_1ac5ab04209706d6b3a0fdd5266dc0d97f" kindref="member">getDelayCount</ref>()<sp/>&gt;<sp/>maxDelayCount)</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxDelayCount<sp/>=<sp/>current-&gt;<ref refid="structTaskNode_1a04f109a440464fd95c18d0f3758ee0af" kindref="member">task</ref>-&gt;<ref refid="classTask_1ac5ab04209706d6b3a0fdd5266dc0d97f" kindref="member">getDelayCount</ref>();</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mostDelayingTaskId<sp/>=<sp/>current-&gt;<ref refid="structTaskNode_1a04f109a440464fd95c18d0f3758ee0af" kindref="member">task</ref>-&gt;<ref refid="classTask_1a548d620b8f5d7490b8cdc235dbfdf6eb" kindref="member">getId</ref>();</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current<sp/>=<sp/>current-&gt;<ref refid="structTaskNode_1af6f74dbb5d2baa80d10dabc43b593ffd" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"></highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mostDelayingTaskId;</highlight></codeline>
<codeline lineno="1771"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"></highlight></codeline>
<codeline lineno="1773" refid="classScheduler_1ad767f69dc7aab8c8bd0f15720693d1c2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classScheduler_1ad767f69dc7aab8c8bd0f15720693d1c2" kindref="member">Scheduler::allocateMsgNodesChunk</ref>()</highlight></codeline>
<codeline lineno="1774"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classScheduler_1a15bd5f3410a22f750d9cc40579e11084" kindref="member">totalNodes</ref><sp/>&gt;=<sp/><ref refid="FsmOS_8h_1addd900ed12192f9ff21848d61476d5f2" kindref="member">MAX_MESSAGE_POOL_SIZE</ref>)</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"></highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>up<sp/>to<sp/>4<sp/>nodes,<sp/>but<sp/>donâ€™t<sp/>exceed<sp/>hard<sp/>cap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>canAdd<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="FsmOS_8h_1addd900ed12192f9ff21848d61476d5f2" kindref="member">MAX_MESSAGE_POOL_SIZE</ref><sp/>-<sp/><ref refid="classScheduler_1a15bd5f3410a22f750d9cc40579e11084" kindref="member">totalNodes</ref>);</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>toAdd<sp/>=<sp/>(canAdd<sp/>&gt;=<sp/>4)<sp/>?<sp/>4<sp/>:<sp/>canAdd;</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>toAdd;<sp/>i++)</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structScheduler_1_1MsgNode" kindref="compound">MsgNode</ref><sp/>*n<sp/>=<sp/>(<ref refid="structScheduler_1_1MsgNode" kindref="compound">MsgNode</ref><sp/>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structScheduler_1_1MsgNode" kindref="compound">MsgNode</ref>));</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!n)</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocation<sp/>failed;<sp/>stop<sp/>early</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>node<sp/>payload<sp/>to<sp/>safe<sp/>defaults</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n-&gt;<ref refid="structScheduler_1_1MsgNode_1a91702c9faa02b67ac24d3924be9fdaee" kindref="member">next</ref><sp/>=<sp/><ref refid="classScheduler_1a59fa5a068cd9a36672b39362982c2e97" kindref="member">freeHead</ref>;</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n-&gt;<ref refid="structScheduler_1_1MsgNode_1ab2623f2b15be317f6b54848af08ce97c" kindref="member">payload</ref>.<ref refid="structScheduler_1_1QueuedMessage_1ab2d20d6197328866badf5e94f048255c" kindref="member">targetTaskId</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n-&gt;<ref refid="structScheduler_1_1MsgNode_1ab2623f2b15be317f6b54848af08ce97c" kindref="member">payload</ref>.<ref refid="structScheduler_1_1QueuedMessage_1a4920af5804a48c59719261484553f169" kindref="member">msg</ref>.type<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n-&gt;<ref refid="structScheduler_1_1MsgNode_1ab2623f2b15be317f6b54848af08ce97c" kindref="member">payload</ref>.<ref refid="structScheduler_1_1QueuedMessage_1a4920af5804a48c59719261484553f169" kindref="member">msg</ref>.topic<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n-&gt;<ref refid="structScheduler_1_1MsgNode_1ab2623f2b15be317f6b54848af08ce97c" kindref="member">payload</ref>.<ref refid="structScheduler_1_1QueuedMessage_1a4920af5804a48c59719261484553f169" kindref="member">msg</ref>.arg<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n-&gt;<ref refid="structScheduler_1_1MsgNode_1ab2623f2b15be317f6b54848af08ce97c" kindref="member">payload</ref>.<ref refid="structScheduler_1_1QueuedMessage_1a4920af5804a48c59719261484553f169" kindref="member">msg</ref>.refCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n-&gt;<ref refid="structScheduler_1_1MsgNode_1ab2623f2b15be317f6b54848af08ce97c" kindref="member">payload</ref>.<ref refid="structScheduler_1_1QueuedMessage_1aa23777039e9446ad21fb93a6ec1e7e65" kindref="member">buffer</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n-&gt;<ref refid="structScheduler_1_1MsgNode_1ab2623f2b15be317f6b54848af08ce97c" kindref="member">payload</ref>.<ref refid="structScheduler_1_1QueuedMessage_1a79ba2cf8a493da73c1b64f9aa2549938" kindref="member">capacity</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classScheduler_1a59fa5a068cd9a36672b39362982c2e97" kindref="member">freeHead</ref><sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classScheduler_1a15bd5f3410a22f750d9cc40579e11084" kindref="member">totalNodes</ref>++;</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1804"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"></highlight></codeline>
<codeline lineno="1806" refid="classScheduler_1acb1eb89034fcb709b8769ff9060063e5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classScheduler_1acb1eb89034fcb709b8769ff9060063e5" kindref="member">Scheduler::enqueueQueuedMessage</ref>(uint8_t<sp/>targetTaskId,<sp/>uint8_t<sp/>topic,<sp/>uint8_t<sp/>type,<sp/>uint16_t<sp/>arg)</highlight></codeline>
<codeline lineno="1807"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classScheduler_1a13367b7d53dc7bf804d9158e57bff5f7" kindref="member">msgCount</ref><sp/>&gt;=<sp/><ref refid="FsmOS_8h_1addd900ed12192f9ff21848d61476d5f2" kindref="member">MAX_MESSAGE_POOL_SIZE</ref>)</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"></highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classScheduler_1a59fa5a068cd9a36672b39362982c2e97" kindref="member">freeHead</ref>)</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classScheduler_1ad767f69dc7aab8c8bd0f15720693d1c2" kindref="member">allocateMsgNodesChunk</ref>();</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classScheduler_1a59fa5a068cd9a36672b39362982c2e97" kindref="member">freeHead</ref>)</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"></highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structScheduler_1_1MsgNode" kindref="compound">MsgNode</ref><sp/>*node<sp/>=<sp/><ref refid="classScheduler_1a59fa5a068cd9a36672b39362982c2e97" kindref="member">freeHead</ref>;</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classScheduler_1a59fa5a068cd9a36672b39362982c2e97" kindref="member">freeHead</ref><sp/>=<sp/><ref refid="classScheduler_1a59fa5a068cd9a36672b39362982c2e97" kindref="member">freeHead</ref>-&gt;<ref refid="structScheduler_1_1MsgNode_1a91702c9faa02b67ac24d3924be9fdaee" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"></highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structScheduler_1_1QueuedMessage" kindref="compound">QueuedMessage</ref><sp/>&amp;slot<sp/>=<sp/>node-&gt;<ref refid="structScheduler_1_1MsgNode_1ab2623f2b15be317f6b54848af08ce97c" kindref="member">payload</ref>;</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/>slot.<ref refid="structScheduler_1_1QueuedMessage_1ab2d20d6197328866badf5e94f048255c" kindref="member">targetTaskId</ref><sp/>=<sp/>targetTaskId;</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/>slot.<ref refid="structScheduler_1_1QueuedMessage_1a4920af5804a48c59719261484553f169" kindref="member">msg</ref>.type<sp/>=<sp/>type;</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/>slot.<ref refid="structScheduler_1_1QueuedMessage_1a4920af5804a48c59719261484553f169" kindref="member">msg</ref>.topic<sp/>=<sp/>topic;</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/>slot.<ref refid="structScheduler_1_1QueuedMessage_1a4920af5804a48c59719261484553f169" kindref="member">msg</ref>.arg<sp/>=<sp/>arg;</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/>slot.<ref refid="structScheduler_1_1QueuedMessage_1a4920af5804a48c59719261484553f169" kindref="member">msg</ref>.refCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"></highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/>node-&gt;<ref refid="structScheduler_1_1MsgNode_1a91702c9faa02b67ac24d3924be9fdaee" kindref="member">next</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classScheduler_1a2503ab5f7acb13a3bd46f35036af3c02" kindref="member">msgTail</ref>)</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classScheduler_1a2503ab5f7acb13a3bd46f35036af3c02" kindref="member">msgTail</ref>-&gt;<ref refid="structScheduler_1_1MsgNode_1a91702c9faa02b67ac24d3924be9fdaee" kindref="member">next</ref><sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classScheduler_1a2503ab5f7acb13a3bd46f35036af3c02" kindref="member">msgTail</ref><sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classScheduler_1afc800a55be0f3da82ef2e79dad96496d" kindref="member">msgHead</ref><sp/>=<sp/><ref refid="classScheduler_1a2503ab5f7acb13a3bd46f35036af3c02" kindref="member">msgTail</ref><sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classScheduler_1a13367b7d53dc7bf804d9158e57bff5f7" kindref="member">msgCount</ref>++;</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1844"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"></highlight></codeline>
<codeline lineno="1846" refid="classScheduler_1a13c5cff92aab0d7516c469cb7196c1ba" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classScheduler_1a13c5cff92aab0d7516c469cb7196c1ba" kindref="member">Scheduler::dequeueQueuedMessage</ref>(<ref refid="structScheduler_1_1QueuedMessage" kindref="compound">QueuedMessage</ref><sp/>&amp;out)</highlight></codeline>
<codeline lineno="1847"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classScheduler_1a13367b7d53dc7bf804d9158e57bff5f7" kindref="member">msgCount</ref><sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structScheduler_1_1MsgNode" kindref="compound">MsgNode</ref><sp/>*node<sp/>=<sp/><ref refid="classScheduler_1afc800a55be0f3da82ef2e79dad96496d" kindref="member">msgHead</ref>;</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classScheduler_1afc800a55be0f3da82ef2e79dad96496d" kindref="member">msgHead</ref><sp/>=<sp/>node-&gt;<ref refid="structScheduler_1_1MsgNode_1a91702c9faa02b67ac24d3924be9fdaee" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classScheduler_1afc800a55be0f3da82ef2e79dad96496d" kindref="member">msgHead</ref>)</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classScheduler_1a2503ab5f7acb13a3bd46f35036af3c02" kindref="member">msgTail</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>node-&gt;<ref refid="structScheduler_1_1MsgNode_1ab2623f2b15be317f6b54848af08ce97c" kindref="member">payload</ref>;</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Node<sp/>is<sp/>not<sp/>recycled<sp/>here<sp/>to<sp/>avoid<sp/>in-flight<sp/>overwrite;<sp/>caller<sp/>should<sp/>recycle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classScheduler_1a13367b7d53dc7bf804d9158e57bff5f7" kindref="member">msgCount</ref>--;</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1862"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="FsmOS.cpp"/>
  </compounddef>
</doxygen>
