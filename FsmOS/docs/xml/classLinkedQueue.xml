<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classLinkedQueue" kind="class" language="C++" prot="public">
    <compoundname>LinkedQueue</compoundname>
    <includes refid="FsmOS_8h" local="no">FsmOS.h</includes>
    <innerclass refid="structLinkedQueue_1_1Node" prot="public">LinkedQueue::Node</innerclass>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classLinkedQueue_1ab473bd215aaee5a68ed9535a9605e8be" prot="private" static="no" mutable="no">
        <type><ref refid="structLinkedQueue_1_1Node" kindref="compound">Node</ref> *</type>
        <definition>Node* LinkedQueue&lt; T &gt;::head</definition>
        <argsstring></argsstring>
        <name>head</name>
        <qualifiedname>LinkedQueue::head</qualifiedname>
        <briefdescription>
<para>Pointer to first node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="FsmOS.h" line="522" column="10" bodyfile="FsmOS.h" bodystart="522" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classLinkedQueue_1ad7eec3a18abedbe1e43f275ae2e37c20" prot="private" static="no" mutable="no">
        <type><ref refid="structLinkedQueue_1_1Node" kindref="compound">Node</ref> *</type>
        <definition>Node* LinkedQueue&lt; T &gt;::tail</definition>
        <argsstring></argsstring>
        <name>tail</name>
        <qualifiedname>LinkedQueue::tail</qualifiedname>
        <briefdescription>
<para>Pointer to last node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="FsmOS.h" line="523" column="10" bodyfile="FsmOS.h" bodystart="523" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classLinkedQueue_1a7f8ecf880cc644bd53a75551e96d0987" prot="private" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t LinkedQueue&lt; T &gt;::count</definition>
        <argsstring></argsstring>
        <name>count</name>
        <qualifiedname>LinkedQueue::count</qualifiedname>
        <briefdescription>
<para>Number of items in queue. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="FsmOS.h" line="524" column="13" bodyfile="FsmOS.h" bodystart="524" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classLinkedQueue_1a4983be0b269558e5bb0f93d2ce084345" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>LinkedQueue&lt; T &gt;::LinkedQueue</definition>
        <argsstring>()</argsstring>
        <name>LinkedQueue</name>
        <qualifiedname>LinkedQueue::LinkedQueue</qualifiedname>
        <briefdescription>
<para>Default constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Creates an empty queue </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="FsmOS.h" line="480" column="5" bodyfile="FsmOS.cpp" bodystart="310" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="classLinkedQueue_1ad84250d452864b16e000f4d1ee6295f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>LinkedQueue&lt; T &gt;::~LinkedQueue</definition>
        <argsstring>()</argsstring>
        <name>~LinkedQueue</name>
        <qualifiedname>LinkedQueue::~LinkedQueue</qualifiedname>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Frees all nodes in the queue </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="FsmOS.h" line="486" column="5" bodyfile="FsmOS.cpp" bodystart="313" bodyend="321"/>
        <references refid="structLinkedQueue_1_1Node_1a105896e21861dcb1bb7bcb5af3e5c9b2" compoundref="FsmOS_8h" startline="473">LinkedQueue&lt; T &gt;::Node::next</references>
      </memberdef>
      <memberdef kind="function" id="classLinkedQueue_1a8c5a6ea35be6ffaf35f76098e8bc89f9" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>LinkedQueue&lt; T &gt;::LinkedQueue</definition>
        <argsstring>(LinkedQueue &amp;&amp;other) noexcept</argsstring>
        <name>LinkedQueue</name>
        <qualifiedname>LinkedQueue::LinkedQueue</qualifiedname>
        <param>
          <type><ref refid="classLinkedQueue" kindref="compound">LinkedQueue</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Queue to move from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Transfers ownership of nodes from other queue </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="FsmOS.h" line="493" column="5" bodyfile="FsmOS.cpp" bodystart="324" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="classLinkedQueue_1ab2bb64be832ea8f62e76dc7fcbe1e9fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LinkedQueue&lt; T &gt;::push</definition>
        <argsstring>(const T &amp;item)</argsstring>
        <name>push</name>
        <qualifiedname>LinkedQueue::push</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Add item to the end of the queue. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item</parametername>
</parameternamelist>
<parameterdescription>
<para>Item to add </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Allocates new node for the item </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="FsmOS.h" line="500" column="10" bodyfile="FsmOS.cpp" bodystart="332" bodyend="353"/>
        <references refid="structLinkedQueue_1_1Node_1abfc1309426317b5ec46b96ad93fa3615" compoundref="FsmOS_8h" startline="472">LinkedQueue&lt; T &gt;::Node::data</references>
        <references refid="structLinkedQueue_1_1Node_1a105896e21861dcb1bb7bcb5af3e5c9b2" compoundref="FsmOS_8h" startline="473">LinkedQueue&lt; T &gt;::Node::next</references>
      </memberdef>
      <memberdef kind="function" id="classLinkedQueue_1ae54fefdc687852e0465e414bbfadd138" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool LinkedQueue&lt; T &gt;::pop</definition>
        <argsstring>(T &amp;item)</argsstring>
        <name>pop</name>
        <qualifiedname>LinkedQueue::pop</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Remove item from the front of the queue. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>item</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to store the removed item </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if item was removed, false if queue was empty </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="FsmOS.h" line="507" column="10" bodyfile="FsmOS.cpp" bodystart="356" bodyend="375"/>
        <references refid="structLinkedQueue_1_1Node_1abfc1309426317b5ec46b96ad93fa3615" compoundref="FsmOS_8h" startline="472">LinkedQueue&lt; T &gt;::Node::data</references>
      </memberdef>
      <memberdef kind="function" id="classLinkedQueue_1af4554d6d9ca422c9332217fbbe054c06" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool LinkedQueue&lt; T &gt;::isEmpty</definition>
        <argsstring>() const</argsstring>
        <name>isEmpty</name>
        <qualifiedname>LinkedQueue::isEmpty</qualifiedname>
        <briefdescription>
<para>Check if queue is empty. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if queue is empty, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="FsmOS.h" line="513" column="10" bodyfile="FsmOS.cpp" bodystart="378" bodyend="381"/>
      </memberdef>
      <memberdef kind="function" id="classLinkedQueue_1a81123eba59f05b7218b756740cfb3fa6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t LinkedQueue&lt; T &gt;::getSize</definition>
        <argsstring>() const</argsstring>
        <name>getSize</name>
        <qualifiedname>LinkedQueue::getSize</qualifiedname>
        <briefdescription>
<para>Get number of items in queue. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Number of items currently in queue </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="FsmOS.h" line="519" column="13" bodyfile="FsmOS.cpp" bodystart="384" bodyend="387"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Lightweight, interrupt-safe linked queue. </para>
    </briefdescription>
    <detaileddescription>
<para><ref refid="classLinkedQueue" kindref="compound">LinkedQueue</ref> provides a simple queue implementation that is safe to use from interrupt context. It uses a linked list structure for efficient insertion and removal.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of elements to store in the queue </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This queue is not thread-safe for concurrent access </para>
</simplesect>
</para>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>LinkedQueue&lt; T &gt;::Node</label>
        <link refid="structLinkedQueue_1_1Node"/>
        <childnode refid="2" relation="usage">
          <edgelabel>next</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>LinkedQueue&lt; T &gt;</label>
        <link refid="classLinkedQueue"/>
        <childnode refid="2" relation="usage">
          <edgelabel>head</edgelabel>
          <edgelabel>tail</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="FsmOS.h" line="464" column="1" bodyfile="FsmOS.h" bodystart="465" bodyend="525"/>
    <listofallmembers>
      <member refid="classLinkedQueue_1a7f8ecf880cc644bd53a75551e96d0987" prot="private" virt="non-virtual"><scope>LinkedQueue</scope><name>count</name></member>
      <member refid="classLinkedQueue_1a81123eba59f05b7218b756740cfb3fa6" prot="public" virt="non-virtual"><scope>LinkedQueue</scope><name>getSize</name></member>
      <member refid="classLinkedQueue_1ab473bd215aaee5a68ed9535a9605e8be" prot="private" virt="non-virtual"><scope>LinkedQueue</scope><name>head</name></member>
      <member refid="classLinkedQueue_1af4554d6d9ca422c9332217fbbe054c06" prot="public" virt="non-virtual"><scope>LinkedQueue</scope><name>isEmpty</name></member>
      <member refid="classLinkedQueue_1a4983be0b269558e5bb0f93d2ce084345" prot="public" virt="non-virtual"><scope>LinkedQueue</scope><name>LinkedQueue</name></member>
      <member refid="classLinkedQueue_1a8c5a6ea35be6ffaf35f76098e8bc89f9" prot="public" virt="non-virtual"><scope>LinkedQueue</scope><name>LinkedQueue</name></member>
      <member refid="classLinkedQueue_1ae54fefdc687852e0465e414bbfadd138" prot="public" virt="non-virtual"><scope>LinkedQueue</scope><name>pop</name></member>
      <member refid="classLinkedQueue_1ab2bb64be832ea8f62e76dc7fcbe1e9fb" prot="public" virt="non-virtual"><scope>LinkedQueue</scope><name>push</name></member>
      <member refid="classLinkedQueue_1ad7eec3a18abedbe1e43f275ae2e37c20" prot="private" virt="non-virtual"><scope>LinkedQueue</scope><name>tail</name></member>
      <member refid="classLinkedQueue_1ad84250d452864b16e000f4d1ee6295f6" prot="public" virt="non-virtual"><scope>LinkedQueue</scope><name>~LinkedQueue</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
