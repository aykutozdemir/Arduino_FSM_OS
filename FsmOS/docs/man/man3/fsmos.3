.TH "fsmos" 3 "Version 1.3.0" "FsmOS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
fsmos \- FsmOS
.PP
 \- Lightweight cooperative scheduler and message-passing library for Arduino\&.  

.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBTaskNode\fP"
.br
.RI "Node structure for \fBTask\fP linked list\&. "
.ti -1c
.RI "struct \fBMemoryStats\fP"
.br
.RI "Memory tracking statistics\&. "
.ti -1c
.RI "struct \fBTaskStats\fP"
.br
.RI "\fBTask\fP execution statistics\&. "
.ti -1c
.RI "struct \fBResetInfo\fP"
.br
.RI "System reset information\&. "
.ti -1c
.RI "struct \fBSystemMemoryInfo\fP"
.br
.RI "System memory information\&. "
.ti -1c
.RI "struct \fBTaskMemoryInfo\fP"
.br
.RI "\fBTask\fP memory information\&. "
.ti -1c
.RI "class \fBSharedMsg\fP"
.br
.RI "Smart pointer-like wrapper for MsgData with reference counting\&. "
.ti -1c
.RI "class \fBMsgDataPool\fP"
.br
.RI "Memory pool for efficient MsgData allocation\&. "
.ti -1c
.RI "class \fBLinkedQueue< T >\fP"
.br
.RI "Lightweight, interrupt-safe linked queue\&. "
.ti -1c
.RI "class \fBMutex\fP"
.br
.RI "\fBMutex\fP for cooperative task synchronization\&. "
.ti -1c
.RI "class \fBSemaphore\fP"
.br
.RI "\fBSemaphore\fP for resource counting and synchronization\&. "
.ti -1c
.RI "class \fBScheduler\fP"
.br
.RI "Core scheduler and task manager for FsmOS\&. "
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBTOPIC_BITFIELD_SIZE\fP   16"
.br
.RI "Topic bitfield configuration\&. "
.ti -1c
.RI "#define \fBRESET_CAUSE_EXTERNAL\fP   0x01"
.br
.RI "Reset cause flag constants from MCUSR register\&. "
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBResetCause\fP { \fBRESET_UNKNOWN\fP = 0, \fBRESET_POWER_ON\fP, \fBRESET_EXTERNAL\fP, \fBRESET_BROWN_OUT\fP, \fBRESET_WATCHDOG\fP, \fBRESET_MULTIPLE\fP }"
.br
.RI "Reset cause enumeration for Optiboot reset flags\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "template<typename T > struct \fB__attribute__\fP ((packed)) TimerT"
.br
.RI "Memory-optimized template-based timer for specific duration ranges\&. "
.ti -1c
.RI "struct \fB__attribute__\fP ((packed)) MsgData"
.br
.RI "Message data structure for inter-task communication\&. "
.ti -1c
.RI "virtual uint8_t \fBTask::getMaxMessageBudget\fP () const"
.br
.RI "Get the maximum number of messages this task may produce in one \fBstep()\fP "
.ti -1c
.RI "void \fBlogDebugf\fP (const __FlashStringHelper *format,\&.\&.\&.)"
.br
.RI "Default per-task message production budget\&. "
.ti -1c
.RI "void \fBlogInfof\fP (const __FlashStringHelper *format,\&.\&.\&.)"
.br
.RI "Log an info message with formatting\&. "
.ti -1c
.RI "void \fBlogWarnf\fP (const __FlashStringHelper *format,\&.\&.\&.)"
.br
.RI "Log a warning message with formatting\&. "
.ti -1c
.RI "void \fBlogErrorf\fP (const __FlashStringHelper *format,\&.\&.\&.)"
.br
.RI "Log an error message with formatting\&. "
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "const uint8_t \fBDEFAULT_TASK_MESSAGE_BUDGET\fP = 1"
.br
.RI "Base class for all tasks in FsmOS\&. "
.ti -1c
.RI "\fBScheduler\fP \fBOS\fP"
.br
.RI "Global scheduler instance\&. "
.ti -1c
.RI "const uint16_t \fBDEFAULT_TASK_PERIOD\fP = 100"
.br
.RI "Default task period in milliseconds\&. "
.ti -1c
.RI "const uint16_t \fBMIN_TASK_PERIOD\fP = 1"
.br
.RI "Minimum allowed task period in milliseconds\&. "
.ti -1c
.RI "const uint16_t \fBMAX_TASK_PERIOD\fP = 65535"
.br
.RI "Maximum allowed task period in milliseconds\&. "
.in -1c
.SH "Detailed Description"
.PP 
Lightweight cooperative scheduler and message-passing library for Arduino\&. 

Provides tasks, scheduler, message passing, synchronization primitives, and diagnostics with a focus on small RAM/flash usage and clear APIs\&. 
.SH "Macro Definition Documentation"
.PP 
.SS "#define RESET_CAUSE_EXTERNAL   0x01"

.PP
Reset cause flag constants from MCUSR register\&. These flags are stored by Optiboot in GPIOR0 External Reset flag (fallback) 
.PP
Definition at line \fB185\fP of file \fBFsmOS\&.h\fP\&.
.SS "#define TOPIC_BITFIELD_SIZE   16"

.PP
Topic bitfield configuration\&. Choose the bitfield size based on your topic count:
.IP "\(bu" 2
TOPIC_BITFIELD_8: 8 topics max (1 byte)
.IP "\(bu" 2
TOPIC_BITFIELD_16: 16 topics max (2 bytes) - DEFAULT
.IP "\(bu" 2
TOPIC_BITFIELD_32: 32 topics max (4 bytes) 
.PP

.PP
Definition at line \fB70\fP of file \fBFsmOS\&.h\fP\&.
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBResetCause\fP"

.PP
Reset cause enumeration for Optiboot reset flags\&. Used to identify the cause of system reset 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIRESET_UNKNOWN \fP\fP
Unknown reset cause\&. 
.TP
\fB\fIRESET_POWER_ON \fP\fP
Power-on reset\&. 
.TP
\fB\fIRESET_EXTERNAL \fP\fP
External reset\&. 
.TP
\fB\fIRESET_BROWN_OUT \fP\fP
Brown-out reset\&. 
.TP
\fB\fIRESET_WATCHDOG \fP\fP
Watchdog reset\&. 
.TP
\fB\fIRESET_MULTIPLE \fP\fP
Multiple reset causes detected\&. 
.PP
Definition at line \fB164\fP of file \fBFsmOS\&.h\fP\&.
.SH "Function Documentation"
.PP 
.SS "struct __attribute__ ((packed))"

.PP
Message data structure for inter-task communication\&. This structure holds the actual message data and is managed by the message pool system for efficient memory usage\&.
.PP
\fBNote\fP
.RS 4
Messages are reference-counted and automatically returned to the pool when no longer needed\&. 
.RE
.PP
< Message type identifier
.PP
< Topic/channel for message routing
.PP
< Additional argument data
.PP
< Reference count for memory management
.PP
Definition at line \fB78\fP of file \fBFsmOS\&.h\fP\&.
.SS "template<typename T > struct __attribute__ ((packed))"

.PP
Memory-optimized template-based timer for specific duration ranges\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIT\fP The integer type to use for timing (uint8_t, uint16_t, uint32_t) Choose based on your maximum duration needs:
.IP "\(bu" 2
uint8_t: 0-255ms (2 bytes total)
.IP "\(bu" 2
uint16_t: 0-65535ms (4 bytes total)
.IP "\(bu" 2
uint32_t: 0-4294967295ms (8 bytes total)
.PP
.RE
.PP
\fBNote\fP
.RS 4
This template allows memory optimization by using smaller data types for shorter timer durations, reducing RAM usage in memory-constrained systems\&. 
.RE
.PP
< Timer start timestamp in milliseconds
.PP
< Timer duration in milliseconds
.PP
Start the timer with specified duration 
.PP
\fBParameters\fP
.RS 4
\fId\fP Duration in milliseconds 
.RE
.PP
\fBNote\fP
.RS 4
Timer will be marked as expired if duration is 0
.RE
.PP
Check if timer has expired 
.PP
\fBReturns\fP
.RS 4
true if timer duration has elapsed, false otherwise 
.RE
.PP
\fBNote\fP
.RS 4
Handles type-specific overflow correctly
.RE
.PP

.PP
Definition at line \fB78\fP of file \fBFsmOS\&.h\fP\&.
.SS "virtual uint8_t Task::getMaxMessageBudget () const\fC [inline]\fP, \fC [virtual]\fP"

.PP
Get the maximum number of messages this task may produce in one \fBstep()\fP \fBScheduler\fP uses this to ensure there are at least this many free message slots before running the task\&. 
.PP
\fBReturns\fP
.RS 4
Planned message production budget for the upcoming step 
.RE
.PP

.PP
Definition at line \fB801\fP of file \fBFsmOS\&.h\fP\&.
.SS "void logDebugf (const __FlashStringHelper * format,  \&.\&.\&.)"

.PP
Default per-task message production budget\&. If a task does not explicitly declare a budget via \fBTask::setMaxMessageBudget\fP, the scheduler applies this default to ensure capacity checks are enforced\&.
.PP
Log a debug message with formatting 
.PP
\fBParameters\fP
.RS 4
\fIformat\fP Format string (FlashStringHelper) 
.br
\fI\&.\&.\&.\fP Variable arguments for formatting 
.RE
.PP

.PP
Definition at line \fB1695\fP of file \fBFsmOS\&.cpp\fP\&.
.SS "void logErrorf (const __FlashStringHelper * format,  \&.\&.\&.)"

.PP
Log an error message with formatting\&. 
.PP
\fBParameters\fP
.RS 4
\fIformat\fP Format string (FlashStringHelper) 
.br
\fI\&.\&.\&.\fP Variable arguments for formatting 
.RE
.PP

.PP
Definition at line \fB1719\fP of file \fBFsmOS\&.cpp\fP\&.
.SS "void logInfof (const __FlashStringHelper * format,  \&.\&.\&.)"

.PP
Log an info message with formatting\&. 
.PP
\fBParameters\fP
.RS 4
\fIformat\fP Format string (FlashStringHelper) 
.br
\fI\&.\&.\&.\fP Variable arguments for formatting 
.RE
.PP

.PP
Definition at line \fB1703\fP of file \fBFsmOS\&.cpp\fP\&.
.SS "void logWarnf (const __FlashStringHelper * format,  \&.\&.\&.)"

.PP
Log a warning message with formatting\&. 
.PP
\fBParameters\fP
.RS 4
\fIformat\fP Format string (FlashStringHelper) 
.br
\fI\&.\&.\&.\fP Variable arguments for formatting 
.RE
.PP

.PP
Definition at line \fB1711\fP of file \fBFsmOS\&.cpp\fP\&.
.SH "Variable Documentation"
.PP 
.SS "const uint8_t DEFAULT_TASK_MESSAGE_BUDGET = 1"

.PP
Base class for all tasks in FsmOS\&. \fBTask\fP provides the foundation for cooperative multitasking\&. Each task runs in its own context and can communicate with other tasks through messages and events\&.
.PP
\fBNote\fP
.RS 4
Tasks must implement the step() method to define their behavior\&. The scheduler calls step() periodically based on the task's period\&.
.RE
.PP
Default message budget for tasks
.PP
If a task does not explicitly declare a budget via \fBTask::setMaxMessageBudget\fP, the scheduler applies this default to ensure capacity checks are enforced\&. 
.PP
Definition at line \fB648\fP of file \fBFsmOS\&.h\fP\&.
.SS "const uint16_t DEFAULT_TASK_PERIOD = 100"

.PP
Default task period in milliseconds\&. 
.PP
Definition at line \fB1515\fP of file \fBFsmOS\&.h\fP\&.
.SS "const uint16_t MAX_TASK_PERIOD = 65535"

.PP
Maximum allowed task period in milliseconds\&. 
.PP
Definition at line \fB1527\fP of file \fBFsmOS\&.h\fP\&.
.SS "const uint16_t MIN_TASK_PERIOD = 1"

.PP
Minimum allowed task period in milliseconds\&. 
.PP
Definition at line \fB1521\fP of file \fBFsmOS\&.h\fP\&.
.SS "\fBScheduler\fP OS\fC [extern]\fP"

.PP
Global scheduler instance\&. Convenient global instance for easy access 
.PP
\fBNote\fP
.RS 4
This is the main scheduler instance used by most applications 
.RE
.PP

.PP
Definition at line \fB48\fP of file \fBFsmOS\&.cpp\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for FsmOS from the source code\&.
